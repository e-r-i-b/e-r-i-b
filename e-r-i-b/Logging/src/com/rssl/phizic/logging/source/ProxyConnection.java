package com.rssl.phizic.logging.source;

import com.rssl.phizic.logging.messaging.System;

import java.sql.*;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.Map;

/**
 * User: Moshenko
 * Date: 01.08.2012
 * Time: 18:32:25
 * Обертка для sql.Connection.
   Основная цель получение LogableCallableStatement, при вызове prepareCall.
 */
public class ProxyConnection implements Connection
{
	private Connection delegateConnection;
	private System system;

	public ProxyConnection(Connection delegateConnection, System system)
	{
		this.delegateConnection = delegateConnection;
		this.system = system;
	}

	public void clearWarnings() throws SQLException
	{
		delegateConnection.clearWarnings();
	}

	public void close() throws SQLException
	{
		delegateConnection.close();
	}

	public void commit() throws SQLException
	{
		delegateConnection.commit();
	}

	public Statement createStatement() throws SQLException
	{
		return new LogableStatement(delegateConnection.createStatement(), system);
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException
	{
		return new LogableStatement(delegateConnection.createStatement(resultSetType, resultSetConcurrency), system);
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
	{
		return new LogableStatement(delegateConnection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), system);
	}

	public boolean getAutoCommit() throws SQLException
	{
		return delegateConnection.getAutoCommit();
	}

	public String getCatalog() throws SQLException
	{
		return delegateConnection.getCatalog();
	}

	public int getHoldability() throws SQLException
	{
		return delegateConnection.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException
	{
		return delegateConnection.getMetaData();
	}

	public int getTransactionIsolation() throws SQLException
	{
		return delegateConnection.getTransactionIsolation();
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException
	{
		return delegateConnection.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException
	{
		return delegateConnection.getWarnings();
	}

	public boolean isClosed() throws SQLException
	{
		return delegateConnection.isClosed();
	}

	public boolean isReadOnly() throws SQLException
	{
		return delegateConnection.isReadOnly();
	}

	public String nativeSQL(String sql) throws SQLException
	{
		return delegateConnection.nativeSQL(sql);
	}

	public CallableStatement prepareCall(String sql) throws SQLException
	{
		return new LogableCallableStatement(delegateConnection.prepareCall(sql),sql,system);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException
	{
		return new LogableCallableStatement(delegateConnection.prepareCall(sql, resultSetType, resultSetConcurrency),sql,system);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
	{
		return new LogableCallableStatement(delegateConnection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability),sql,system);
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException
	{
		return  delegateConnection.prepareStatement(sql);
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException
	{
		return delegateConnection.prepareStatement(sql, autoGeneratedKeys);
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException
	{
		return delegateConnection.prepareStatement(sql, columnIndexes);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException
	{
		return delegateConnection.prepareStatement(sql, columnNames);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException
	{
		return delegateConnection.prepareStatement(sql, resultSetType, resultSetConcurrency);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
	{
		return delegateConnection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException
	{
		delegateConnection.releaseSavepoint(savepoint);
	}

	public void rollback() throws SQLException
	{
		delegateConnection.rollback();
	}

	public void rollback(Savepoint savepoint) throws SQLException
	{
		delegateConnection.rollback(savepoint);
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException
	{
		delegateConnection.setAutoCommit(autoCommit);
	}

	public void setCatalog(String catalog) throws SQLException
	{
		delegateConnection.setCatalog(catalog);
	}

	public void setHoldability(int holdability) throws SQLException
	{
		delegateConnection.setHoldability(holdability);
	}

	public void setReadOnly(boolean readOnly) throws SQLException
	{
		delegateConnection.setReadOnly(readOnly);
	}

	public Savepoint setSavepoint() throws SQLException
	{
		return delegateConnection.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException
	{
		return delegateConnection.setSavepoint(name);
	}

	public void setTransactionIsolation(int level) throws SQLException
	{
		delegateConnection.setTransactionIsolation(level);
	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException
	{
		delegateConnection.setTypeMap(map);
	}

	/**
	 * Получить делегата
	 * @return обернутое соединение
	 */
	public Connection getDelegateConnection()
	{
		return delegateConnection;
	}
}
