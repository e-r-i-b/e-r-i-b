<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
    <typedef name="Publicity" class="com.rssl.phizic.dataaccess.hibernate.EnumType">
		<param name="enumClass">com.rssl.phizic.business.loans.products.Publicity</param>
	</typedef>
    
    <class name="com.rssl.phizic.business.creditcards.products.CreditCardProduct" table="CREDIT_CARD_PRODUCTS" polymorphism="explicit">
        <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_CREDIT_CARD_PRODUCTS</param>
            </generator>
        </id>

        <property name="name"                             type="string"      column="NAME"                      not-null="true"/>
        <property name="allowGracePeriod"                 type="boolean"     column="ALLOW_GRACE_PERIOD"        not-null="true"/>
        <property name="useForPreapprovedOffers"          type="boolean"     column="USE_FOR_PREAPPROVED"       not-null="true"/>
        <property name="defaultForPreapprovedOffers"      type="boolean"     column="DEFAULT_FOR_PREAPPROVED"   not-null="true"/>
        <property name="gracePeriodDuration"              type="integer"     column="GP_DURATION"               not-null="false"/>
        <property name="gracePeriodInterestRate"          type="big_decimal" column="GP_INT_RATE"               not-null="false"/>
        <property name="additionalTerms"                  type="string"      column="ADDITIONAL_TERMS"          not-null="false"/>
        <property name="publicity"                        type="Publicity"   column="IS_PUBLIC"                 not-null="true"/>
        <property name="changeDate"                       type="calendar"    column="CHANGE_DATE"               not-null="false"/>
        <property name="cardTypeCode"                     type="integer"     column="CARD_TYPE_CODE"            not-null="false"/>
        <property name="guestLead"                        type="boolean"     column="GUEST_LEAD"                not-null="true"/>
        <property name="guestPreapproved"                 type="boolean"     column="GUEST_PREAPPROVED"         not-null="true"/>
        <property name="commonLead"                       type="boolean"     column="COMMON_LEAD"               not-null="true"/>

        <bag name="conditions" table="CREDIT_CARD_CONDITIONS" lazy="false" cascade="all-delete-orphan" order-by="CURRENCY">
            <key column="PRODUCT_ID"/>
            <one-to-many class="com.rssl.phizic.business.creditcards.conditions.CreditCardCondition"/>
        </bag>

    </class>

     <class name="com.rssl.phizic.business.creditcards.products.PartCreditCardProduct" mutable="false">
        <id name="id"/>

        <property name="minCreditLimit"         type="big_decimal" access="field"/>
        <property name="minCreditLimitCurrency" type="isoCurrency"/>

        <property name="maxCreditLimit"         type="big_decimal" access="field"/>
        <property name="maxCreditLimitCurrency" type="isoCurrency"/>

        <property name="isMaxCreditLimitInclude"/>
        <property name="offerInterestRate"/>
        <property name="firstYearPayment"          type="big_decimal"  access="field"/>
        <property name="firstYearPaymentCurrency"  type="isoCurrency" />

        <property name="nextYearPayment"           type="big_decimal"  access="field"/>
        <property name="nextYearPaymentCurrency"   type="isoCurrency"/>

        <property name="changeDate"/>
        <property name="name"/>
        <property name="allowGracePeriod"/>
        <property name="gracePeriodDuration"/>
        <property name="gracePeriodInterestRate"/>
        <property name="additionalTerms"/>
    </class>

    <query name="com.rssl.phizic.business.creditcards.products.CreditCardProduct.getAll">
        select product
        from com.rssl.phizic.business.creditcards.products.CreditCardProduct product
        where product.publicity != 'DELETED'
    </query>

    <query name="com.rssl.phizic.business.creditcards.products.CreditCardProduct.getDefaultForPreappovedProducts">
        select product
        from com.rssl.phizic.business.creditcards.products.CreditCardProduct product
        where product.publicity != 'DELETED'
        and product.useForPreapprovedOffers = true
        and product.defaultForPreapprovedOffers = true
    </query>

    <query name="com.rssl.phizic.business.creditcards.products.CreditCardProduct.getConditionsByProduct">
        select condition
        from com.rssl.phizic.business.creditcards.conditions.CreditCardCondition as condition
        where condition.productId = :productId
    </query>

    <query name="com.rssl.phizic.business.creditcards.products.CreditCardProduct.findCreditCardProductByCreditCardConditionId">
        select product
        from com.rssl.phizic.business.creditcards.products.CreditCardProduct product
        join product.conditions condition
        where condition.id = :conditionId
    </query>

    <sql-query name="com.rssl.phizic.business.creditcards.products.CreditCardProduct.getAvailableProducts">
        <return alias="product" class="com.rssl.phizic.business.creditcards.products.CreditCardProduct"/>
        <![CDATA[
        select {product.*}
        from CREDIT_CARD_PRODUCTS product
        join CREDIT_CARD_CONDITIONS condition on condition.PRODUCT_ID = product.ID
        join CARD_AMOUT_STEP creditLimit on creditLimit.ID = condition.MIN_CREDIT_LIMIT
        where product.IS_PUBLIC != 'DELETED'
            and creditLimit.VALUE_CURRENCY = :currency
            and (
                (creditLimit.VALUE_AMOUNT <= :creditLimit and :include = 'true')
                or
                (creditLimit.VALUE_AMOUNT < :creditLimit and :include = 'false')
            )
        ]]>
    </sql-query>

    <!--Проверка наличия опубликованных карточных кредитных продуктов-->
    <query name="com.rssl.phizic.business.creditcards.products.CreditCardProduct.isPublishedProductsExists">
        select count(*) from com.rssl.phizic.business.creditcards.products.CreditCardProduct as product
        where product.publicity = 'PUBLISHED'
    </query>

<!---->
     <sql-query name="com.rssl.phizic.business.creditcards.products.CreditCardProduct.getPublicApprovedProducts">
        <return alias="product" class="com.rssl.phizic.business.creditcards.products.CreditCardProduct"/>
        <![CDATA[
        select {product.*}
        from CREDIT_CARD_PRODUCTS product
        join CREDIT_CARD_CONDITIONS condition on condition.PRODUCT_ID = product.ID
        join CARD_AMOUT_STEP minLimit on minLimit.ID = condition.MIN_CREDIT_LIMIT
        join CARD_AMOUT_STEP maxLimit on maxLimit.ID = condition.MAX_CREDIT_LIMIT
        where product.IS_PUBLIC = 'PUBLISHED'
            and product.USE_FOR_PREAPPROVED = '1'
            and minLimit.VALUE_CURRENCY = :currency
            and minLimit.VALUE_AMOUNT <= :creditLimit
            and maxLimit.VALUE_AMOUNT >= :creditLimit
        ]]>
    </sql-query>
</hibernate-mapping>