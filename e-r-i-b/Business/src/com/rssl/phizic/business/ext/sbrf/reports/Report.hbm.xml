<?xml version="1.0"?><!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
    <typedef name="IdleType" class="com.rssl.phizic.dataaccess.hibernate.EnumType">
        <param name="enumClass">com.rssl.phizic.business.monitoring.serveravailability.IdleType</param>
    </typedef>

    <!-- Общая информация по всем отчетам -->
    <class name="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" table="REPORTS">
        <id name="id" type="long" column="ID">
            <generator class="native">
                <param name="sequence">S_REPORTS</param>
            </generator>
        </id>

        <discriminator column="KIND"/>

        <property name="state"      type="char"              column="STATE"               not-null="true"  /> <!-- Состояние отчета: s- отправлен на исполнение, o - выполнен, e - ошибка -->
        <property name="date"       type="calendar"          column="CREATE_DATE"         not-null="true"  /> <!-- Дата формирования отчета -->
        <property name="startDate"  type="calendar"          column="START_DATE"          not-null="false" /> <!-- Начало периода формирования отчета, или дата, на которую формируется отчет -->
        <property name="endDate"    type="calendar"          column="END_DATE"            not-null="false" /> <!-- Окончание периода формирования отчета -->
        <property name="type"       type="char"              column="TYPE"                not-null="true"  /> <!-- Тип отчета -->
        <property name="params"     type="string"            column="PARAMS"              not-null="false" /><!-- Передаваемые параметры для последующего построения отчетов (id департаментов через ;) -->

        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.BusinessReport"  discriminator-value="B"/>
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.it.ITReport"  discriminator-value="I"/>
    </class>


    <!-- Отчет 'Количество договоров по ТБ/ОСБ/ВСП/ОКР' -->
    <class name="com.rssl.phizic.business.ext.sbrf.reports.ContractReports"  table="COUNT_CONTRACTS">
        <id name="id" type="long" column="ID">
            <generator class="native">
                <param name="sequence">S_COUNT_CONTRACTS</param>
            </generator>
        </id>

        <discriminator column="KIND"/>

        <property name="tb_id"            type="long"    column="TB_ID"            not-null="true"/>  <!-- номер ТБ-->
        <property name="tb_name"          type="string"  column="TB_NAME"          not-null="false"/> <!-- название ТБ-->
        <!-- УДБО пока что нереализовано, пишем всегда 0-->
        <property name="count_UDBO_all"   type="int"     column="count_UDBO_all"   not-null="true"/>  <!-- общее количество договоров по УДБО -->
        <property name="count_UDBO_month" type="int"     column="count_UDBO_month" not-null="true"/>  <!--  изменение количества договоров УДБО за последний месяц -->
        <property name="count_UDBO_year"   type="int"    column="count_UDBO_year"  not-null="true"/>  <!-- изменение количества договоров УДБО за последний год-->
        <!-- СБОЛ -->
        <property name="count_SBOL_all"   type="int"     column="count_SBOL_all"   not-null="true"/>  <!-- общее количество договоров по СБОЛ-->
        <property name="count_SBOL_month" type="int"     column="count_SBOL_month" not-null="true"/>  <!-- изменение количества договоров СБОЛ за последний месяц -->
        <property name="count_SBOL_year"   type="int"    column="count_SBOL_year"  not-null="true"/>  <!-- изменение количества договоров СБОЛ за последний год-->

        <many-to-one name="report_id"  column="REPORT_ID" class="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" lazy="false"/>   <!-- ссылка на основной отчет -->

        <!-- Отчет 'Количество договоров по ТБ' -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.ContractTB" discriminator-value="T"/>

        <!-- Отчет 'Количество договоров по ОСБ' -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.ContractOSB" discriminator-value="O">
            <property name="osb_id"           type="long"  column="OSB_ID"           not-null="false"/>     <!-- номер ОСБ -->
        </subclass>

        <!-- Отчет 'Количество договоров по  ВСП' -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.ContractVSP" discriminator-value="V">
            <property name="osb_id"           type="long"  column="OSB_ID"           not-null="false"/>     <!-- номер ОСБ -->
            <property name="vsp_id"           type="long"    column="VSP_ID"           not-null="false"/>  <!-- номер ВСП -->
        </subclass>

        <!-- Отчет 'Количество договоров по  ОКР' -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.ContractOKR" discriminator-value="E">
            <property name="osb_id"           type="long"  column="OSB_ID"           not-null="false"/>     <!-- номер ОСБ -->
            <property name="vsp_id"           type="long"    column="VSP_ID"           not-null="false"/>  <!-- номер ВСП -->
            <property name="employe_name"     type="string"  column="EMPLOYE_NAME"     not-null="false"/>     <!-- ФИО сотрудника-->
        </subclass>
    </class>

    <!-- Отчет 'Количество активных пользователей по ТБ/ВСП'-->
    <class name="com.rssl.phizic.business.ext.sbrf.reports.ActiveUsersReport" table="COUNT_ACTIVE_USERS">
       <id name="id" type="long" column="ID">
           <generator class="native">
               <param name="sequence">S_COUNT_ACTIVE_USERS</param>
           </generator>
       </id>

       <discriminator column="KIND"/> 

       <property name="tb_id"            type="long"    column="TB_ID"            not-null="true"/>  <!-- номер ТБ -->
       <property name="tb_name"          type="string"  column="TB_NAME"          not-null="false"/> <!-- название ТБ -->
       <property name="count_getLogins"  type="long"    column="COUNT_GET_LOGINS" not-null="true"/>  <!-- количество получивших логин и пароль -->
       <property name="count_auth"       type="long"    column="COUNT_AUTH"       not-null="true"/>  <!-- количество авторизировавшихся в системе -->
       <property name="count_UDBO_all"   type="long"    column="count_UDBO_all"   not-null="true"/>  <!-- общее количество договоров по УДБО -->
       <property name="count_SBOL_all"   type="long"    column="count_SBOL_all"   not-null="true"/>  <!-- общее количество договоров по СБОЛ-->

       <many-to-one name="report_id"  column="REPORT_ID" class="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" lazy="false"/>

       <!-- Отчет 'Количество активных пользователей по ТБ'-->
       <subclass name="com.rssl.phizic.business.ext.sbrf.reports.ActiveUsersTB" discriminator-value="T"/>

       <!-- Отчет 'Количество активных пользователей по ВСП'-->
       <subclass name="com.rssl.phizic.business.ext.sbrf.reports.ActiveUsersVSP" discriminator-value="V">
           <property name="osb_id"           type="long"    column="OSB_ID"           not-null="false"/>  <!-- номер ОСБ -->
           <property name="vsp_id"           type="long"    column="VSP_ID"           not-null="false"/>  <!-- номер ВСП -->
       </subclass>

    </class>

    <!-- Отчеты, стороящиеся по списку бизнес-операций из РО -->
    <class name="com.rssl.phizic.business.ext.sbrf.reports.CountOperations" table="COUNT_OPERATIONS">
       <id name="id" type="long" column="ID">
           <generator class="native">
               <param name="sequence">S_COUNT_OPERATIONS</param>
           </generator>
       </id>

       <discriminator column="KIND"/>

       <property name="count" type="long"  column="COUNT_OPERATIONS"   not-null="true"/> <!-- количество операций -->

       <many-to-one name="report_id"  column="REPORT_ID" class="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" lazy="false"/>

       <!-- Отчет 'Операции в СБОЛ за период по Сбербанку' -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.CountOperationsSBRFReport"  discriminator-value="S">
            <property name="type"             type="string"  column="DESCRIPTION"      not-null="false"/> <!-- тип операции-->
            <property name="currency"         type="string"  column="CURRENCY"         not-null="true"/> <!-- валюта -->
            <property name="amount"           type="float"   column="AMOUNT"          not-null="true" />  <!-- сумма операций -->

        </subclass>

        <!-- Отчет 'Операции в СБОЛ за период по ТБ' -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.CountOperationsTBReport"  discriminator-value="T">
            <property name="tb_id"            type="long"      column="TB_ID"           not-null="false"/> <!-- номер тб -->
            <property name="tb_name"          type="string"    column="TB_NAME"         not-null="false"/>  <!-- название тб -->
            <property name="currency"         type="string"    column="CURRENCY"        not-null="false"/> <!-- валюта -->
            <property name="amount"           type="float"   column="AMOUNT"           not-null="false" />  <!-- сумма операций -->
            <property name="type"             type="string"  column="DESCRIPTION"       not-null="false"/> <!-- тип операции-->

        </subclass>

        <!-- Отчет 'Операции в СБОЛ за период по ВСП' -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.CountOperationsVSPReport"  discriminator-value="V">
            <property name="tb_id"            type="long"       column="TB_ID"            not-null="false"/> <!-- номер тб -->
            <property name="tb_name"          type="string"     column="TB_NAME"          not-null="false"/>  <!-- название тб -->
            <property name="osb_id"           type="long"       column="OSB_ID"           not-null="false"/>  <!-- номер ОСБ -->
            <property name="vsp_id"           type="long"       column="VSP_ID"           not-null="false"/>  <!-- номер ВСП -->
            <property name="type"             type="string"     column="DESCRIPTION"      not-null="false"/> <!-- тип операции-->

        </subclass>

        <!-- Отчет о качестве выполнения операций за период -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.it.QualityOperationPeriodITReport" discriminator-value="Q">
            <property name="tb_id"   type="long"       column="TB_ID"              not-null="false"/> <!-- номер тб -->
            <property name="tb_name" type="string"     column="TB_NAME"            not-null="false"/>  <!-- название тб -->
            <property name="countErrorOperations" type="long" column="COUNT_ERRORS" not-null="false"/>  <!-- количество ошибок -->
        </subclass>

        <!-- Отчет о качестве выполнения операций на дату (ежедневный) -->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.it.CountOperationsDateITReport"  discriminator-value="D">
            <property name="tb_id"                  type="long"       column="TB_ID"          not-null="false"/> <!-- номер тб -->
            <property name="tb_name"                type="string"     column="TB_NAME"        not-null="false"/>  <!-- название тб -->
            <property name="countErrorOperations"   type="long"       column="COUNT_ERRORS"   not-null="false"/>  <!-- количество ошибок -->
            <property name="operation_date"         type="calendar"   column="OPERATION_DATE" not-null="false"/>  <!-- дата операции -->
            <property name="type"                   type="string"     column="DESCRIPTION"    not-null="false"/> <!-- тип операции-->
        </subclass>

           <!--Отчет по проактивному мониторингу-->
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.it.ProactiveReport"  discriminator-value="W">
            <property name="tb_id"            type="long"    column="TB_ID"            not-null="false"/>  <!-- номер ТБ -->
            <property name="tb_name"          type="string"  column="TB_NAME"          not-null="false"/> <!-- название ТБ -->
            <property name="countErrorOperations"   type="long"       column="COUNT_ERRORS"   not-null="false"/>  <!-- количество ошибок -->
            <property name="smallTime"   type="long"       column="SMALL_TIME"   not-null="false"/>
            <property name="averageTime"   type="long"       column="AVERAGE_TIME"   not-null="false"/>
            <property name="longTime"   type="long"       column="LONG_TIME"   not-null="false"/>
            <property name="type"                   type="string"     column="DESCRIPTION"    not-null="false"/> <!-- тип операции-->
        </subclass>
    </class>

     <!-- it-отчеты -->
    <class  name="com.rssl.phizic.business.ext.sbrf.reports.it.CountPaymentDocsITReport" table="COUNT_BUSINESS_PARAMS_TB">
       <id name="id" type="long" column="ID">
           <generator class="native">
               <param name="sequence">S_COUNT_BUSINESS_PARAMS_TB</param>
           </generator>
       </id>

       <property name="tb_id"                    type="long"    column="TB_ID"                        not-null="true"/>  <!-- номер ТБ -->
       <property name="tb_name"                  type="string"  column="TB_NAME"                      not-null="false"/> <!-- название ТБ -->
       <property name="countDocsDayAvg"          type="double"  column="COUNT_DOCS_DAY_AVG"           not-null="true"/> <!-- Количество платежных документов в день (ср. значение) -->
       <property name="countDocsDayMax"          type="long"    column="COUNT_DOCS_DAY_MAX"           not-null="true"/> <!-- Количество платежных документов в день (max значение) -->
       <property name="countOperationsSecondMax" type="long"    column="COUNT_OPERATIONS_SECOND_MAX"  not-null="true"/> <!-- Максимальное количество бизнес-операций в секунду -->

       <many-to-one name="report_id"  column="REPORT_ID" class="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" lazy="false"/>
    </class>

    <class name="com.rssl.phizic.business.ext.sbrf.reports.it.CountUsersDayITReport" table="COUNT_BUSINESS_PARAMS_SBRF">
       <id name="id" type="long" column="ID">
           <generator class="native">
               <param name="sequence">S_COUNT_BUSINESS_PARAMS_SBRF</param>
           </generator>
       </id>

       <property name="countUsersDayAvg"          type="double"  column="COUNT_USERS_DAY_AVG"  not-null="true"/> <!-- Количество одновременно работающих клиентов в день за период (ср. значение) -->
       <property name="countUsersDayMax"          type="long"    column="COUNT_USERS_DAY_MAX"  not-null="true"/> <!-- Количество одновременно работающих клиентов в день за период (макс. значение) -->

       <many-to-one name="report_id"  column="REPORT_ID" class="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" lazy="false"/> 
    </class>

    <class name="com.rssl.phizic.business.ext.sbrf.reports.it.SystemIdleReport" table="SYSTEM_IDLE_REPORT">
       <id name="id" type="long" column="ID">
           <generator class="native">
               <param name="sequence">S_SYSTEM_IDLE_REPORT</param>
           </generator>
       </id>

       <property name="startDate" type="calendar"  column="START_DATE"  not-null="true"/>
       <property name="endDate"   type="calendar"  column="END_DATE"  not-null="true"/>
       <property name="type"      type="IdleType"  column="TYPE"      not-null="true"/> <!--Тип неработоспособности частичная/полная...-->

       <many-to-one name="report_id"  column="REPORT_ID" class="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" lazy="false"/>
    </class>

    <class name="com.rssl.phizic.business.ext.sbrf.reports.it.SystemIdleAdditReport" table="SYSTEM_IDLE_ADDIT_REPORT">
        <id name="id" type="long" column="ID">
           <generator class="native">
               <param name="sequence">S_SYSTEM_IDLE_ADDIT_REPORT</param>
           </generator>
        </id>

        <discriminator column="KIND"/>

        <property name="startDate" type="calendar"  column="START_DATE"  not-null="true"/>
        <property name="endDate"   type="calendar"  column="END_DATE"  not-null="true"/>
        <property name="type"      type="IdleType"  column="TYPE"        not-null="true"/>

        <many-to-one name="report_id"  column="REPORT_ID" class="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" lazy="false"/>

        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.it.FullAndJobIdlesAdditReport" discriminator-value="A"/>
        <subclass name="com.rssl.phizic.business.ext.sbrf.reports.it.UserOperationsIdlesAdditReport" discriminator-value="B"/>
    </class>

    <class name="com.rssl.phizic.business.ext.sbrf.reports.CountIOSReport" table="COUNT_IOS_USERS">
        <id name="id" type="long" column="ID">
           <generator class="native">
               <param name="sequence">S_COUNT_IOS_USERS</param>
           </generator>
        </id>
        <many-to-one name="reportId"  column="REPORT_ID" class="com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract" lazy="false"/>
        
        <property name="tbName"          type="string"  column="TB_NAME"          not-null="false"/> <!-- название ТБ -->
        <property name="osbName"         type="string"  column="OSB_NAME"         not-null="false"/> <!-- название ОСБ -->
        <property name="vspName"         type="string"  column="VSP_NAME"         not-null="false"/> <!-- название ВСП -->
        <property name="totalCount"      type="long"    column="TOTAL_COUNT"      not-null="true"/> <!-- общее количество  клиентов,  которые хотя бы раз входили на  текущую дату формирования отчета-->
        <property name="lastCount"       type="long"    column="LAST_COUNT"       not-null="true"/> <!-- количество  клиентов,  которые входили за 90 дней от даты формирования отчета -->
    </class>

    <!-- Запрос для отчета 'Количество договоров по ТБ' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getContractTB">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="udbo_count" type="long"/>
        <return-scalar column="udbo_year"  type="long"/>
        <return-scalar column="udbo_month" type="long"/>
        <return-scalar column="sbol_count" type="long"/>
        <return-scalar column="sbol_year"  type="long"/>
        <return-scalar column="sbol_month" type="long"/>
        <![CDATA[
              SELECT tb.TB tb_id, tb.NAME tb_name,
            /* Общее количество договоров УДБО на ДАТУ */
            (
                SELECT count(*)
                FROM USERS users,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments 
                WHERE users.STATUS        = 'A' AND
                      users.CREATION_TYPE = 'UDBO' AND
                      users.DEPARTMENT_ID = departments.ID
            )
            +   /* количество клиентов УДБО удалено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, departments.ID)
            )
            -   /* количество клиентов УДБО добавлено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, departments.ID)
            ) udbo_count,

            /* количество клиентов УДБО в год */
                /* количество клиентов УДБО в год добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, departments.ID)
            )
            -  /* количество клиентов УДБО в год удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, departments.ID)
            ) udbo_year,

            /* количество клиентов УДБО в месяц */
                /* количество клиентов УДБО в месяц добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, departments.ID)
            )
            -   /* количество клиентов УДБО в месяц удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, departments.ID)
            ) udbo_month,


            /* Общее количество договоров СБОЛ на ДАТУ */
            (
                SELECT count(*)
                FROM USERS users,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE users.STATUS        = 'A' AND
                      users.CREATION_TYPE = 'SBOL' AND
                      users.DEPARTMENT_ID = departments.ID
            )
            +   /* количество клиентов СБОЛ удалено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, departments.ID)
            )
            -   /* количество клиентов СБОЛ добавлено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, departments.ID)
            ) sbol_count,


            /* количество клиентов СБОЛ в год */
                /* количество клиентов СБОЛ в год добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, departments.ID)
            )
            -   /* количество клиентов СБОЛ в год удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, departments.ID)
            ) sbol_year,

            /* количество клиентов СБОЛ в месяц */
                /* количество клиентов СБОЛ в месяц добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, departments.ID)
            )
            -   /* количество клиентов СБОЛ в месяц удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.ID ID
                     FROM DEPARTMENTS deps
                     WHERE deps.TB = tb.TB) departments
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, departments.ID)
            ) sbol_month

            FROM DEPARTMENTS tb
            WHERE tb.ID IN (:ids) AND
                  tb.PARENT_DEPARTMENT IS NULL
        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Количество договоров по ОСБ' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getContractOSB">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="osb_id" type="long"/>
        <return-scalar column="udbo_count" type="long"/>
        <return-scalar column="udbo_year"  type="long"/>
        <return-scalar column="udbo_month" type="long"/>
        <return-scalar column="sbol_count" type="long"/>
        <return-scalar column="sbol_year"  type="long"/>
        <return-scalar column="sbol_month" type="long"/>
        <![CDATA[
            select tb.TB tb_id, tb.NAME tb_name, osb.OSB osb_id,  
            /* Общее количество договоров УДБО на ДАТУ */
            (
                SELECT count(*)
                FROM USERS users,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE users.STATUS        = 'A' AND
                      users.CREATION_TYPE = 'UDBO' AND
                      users.DEPARTMENT_ID = departments.ID
            )
            +   /* количество клиентов УДБО удалено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, departments.ID)
            )
            -   /* количество клиентов УДБО добавлено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, departments.ID)
            ) udbo_count,

            /* количество клиентов УДБО в год */
                /* количество клиентов УДБО в год добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, departments.ID)
            )
            -  /* количество клиентов УДБО в год удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, departments.ID)
            ) udbo_year,

            /* количество клиентов УДБО в месяц */
                /* количество клиентов УДБО в месяц добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, departments.ID)
            )
            -   /* количество клиентов УДБО в месяц удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, departments.ID)
            ) udbo_month,


            /* Общее количество договоров СБОЛ на ДАТУ */
            (
                SELECT count(*)
                FROM USERS users,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE users.STATUS        = 'A' AND
                      users.CREATION_TYPE = 'SBOL' AND
                      users.DEPARTMENT_ID = departments.ID
            )
            +   /* количество клиентов УДБО удалено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, departments.ID)
            )
            -   /* количество клиентов УДБО добавлено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, departments.ID)
            ) sbol_count,


            /* количество клиентов СБОЛ в год */
                /* количество клиентов СБОЛ в год добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, departments.ID)
            )
            -   /* количество клиентов СБОЛ в год удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, departments.ID)
            ) sbol_year,

            /* количество клиентов СБОЛ в месяц */
                /* количество клиентов СБОЛ в месяц добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, departments.ID)
            )
            -   /* количество клиентов СБОЛ в месяц удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog,
                    (SELECT deps.id ID
                     FROM DEPARTMENTS deps
                     WHERE deps.OSB = osb.OSB) departments
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, departments.ID)
            ) sbol_month

            FROM DEPARTMENTS  osb
                 JOIN DEPARTMENTS tb ON osb.PARENT_DEPARTMENT = tb.ID
            WHERE
                osb.ID IN (:ids) AND
                NOT osb.PARENT_DEPARTMENT IS NULL AND
                tb.PARENT_DEPARTMENT IS NULL
            ORDER BY tb.ID, tb.NAME, osb.OSB, tb.TB
        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Количество договоров по ВСП' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getContractVSP">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="osb_id" type="long"/>
        <return-scalar column="vsp_id" type="long"/>
        <return-scalar column="udbo_count" type="long"/>
        <return-scalar column="udbo_year"  type="long"/>
        <return-scalar column="udbo_month" type="long"/>
        <return-scalar column="sbol_count" type="long"/>
        <return-scalar column="sbol_year"  type="long"/>
        <return-scalar column="sbol_month" type="long"/>
        <![CDATA[
            select TB.TB tb_id, TB.NAME tb_name, OSB.OSB OSB_ID, deps.OFFICE vsp_id,
            /* Общее количество договоров УДБО на ДАТУ */
            (
                SELECT count(*)
                FROM USERS users
                WHERE users.STATUS        = 'A' AND
                      users.CREATION_TYPE = 'UDBO' AND
                      users.DEPARTMENT_ID = deps.ID
            )
            +   /* количество клиентов УДБО удалено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, deps.ID)
            )
            -   /* количество клиентов УДБО добавлено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, deps.ID)
            ) udbo_count,

            /* количество клиентов УДБО в год */
                /* количество клиентов УДБО в год добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, deps.ID)
            )
            -  /* количество клиентов УДБО в год удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, deps.ID)
            ) udbo_year,

            /* количество клиентов УДБО в месяц */
                /* количество клиентов УДБО в месяц добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, deps.ID)
            )
            -   /* количество клиентов УДБО в месяц удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, deps.ID)
            ) udbo_month,


            /* Общее количество договоров СБОЛ на ДАТУ */
            (
                SELECT count(*)
                FROM USERS users
                WHERE users.STATUS        = 'A' AND
                      users.CREATION_TYPE = 'SBOL' AND
                      users.DEPARTMENT_ID = deps.ID
            )
            +   /* количество клиентов УДБО удалено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, deps.ID)
            )
            -   /* количество клиентов УДБО добавлено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, deps.ID)
            ) sbol_count,


            /* количество клиентов СБОЛ в год */
                /* количество клиентов СБОЛ в год добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, deps.ID)
            )
            -   /* количество клиентов СБОЛ в год удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, deps.ID)
            ) sbol_year,

            /* количество клиентов СБОЛ в месяц */
                /* количество клиентов СБОЛ в месяц добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, deps.ID)
            )
            -   /* количество клиентов СБОЛ в месяц удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, deps.ID)
            ) sbol_month

            FROM DEPARTMENTS deps
                 LEFT JOIN DEPARTMENTS OSB ON OSB.ID = deps.PARENT_DEPARTMENT
                 LEFT JOIN DEPARTMENTS TB ON TB.ID = OSB.PARENT_DEPARTMENT

            WHERE
                deps.ID IN (:ids) AND
                OSB.PARENT_DEPARTMENT IS NOT NULL AND
                deps.PARENT_DEPARTMENT IS NOT NULL
            GROUP BY deps.ID, TB.TB, TB.NAME, OSB.OSB, deps.OFFICE
        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Количество договоров по ОКР' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getContractOKR">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="osb_id" type="long"/>
        <return-scalar column="vsp_id" type="long"/>
        <return-scalar column="empl_sur_name" type="string"/>
        <return-scalar column="empl_first_name" type="string"/>
        <return-scalar column="empl_patr_name" type="string"/>
        <return-scalar column="udbo_count" type="long"/>
        <return-scalar column="udbo_year"  type="long"/>
        <return-scalar column="udbo_month" type="long"/>
        <return-scalar column="sbol_count" type="long"/>
        <return-scalar column="sbol_year"  type="long"/>
        <return-scalar column="sbol_month" type="long"/>
        <![CDATA[
            select TB.TB tb_id, TB.NAME tb_name, OSB.OSB osb_id, deps.OFFICE vsp_id, empl.SUR_NAME empl_sur_name, empl.FIRST_NAME empl_first_name, empl.PATR_NAME empl_patr_name,
            /* Общее количество договоров УДБО на ДАТУ */
            (
                SELECT count(*)
                FROM USERS users
                WHERE users.STATUS        = 'A' AND
                      users.CREATION_TYPE = 'UDBO' AND
                      users.DEPARTMENT_ID = deps.ID
            )
            +   /* количество клиентов УДБО удалено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            )
            -   /* количество клиентов УДБО добавлено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            ) udbo_count,

            /* количество клиентов УДБО в год */
                /* количество клиентов УДБО в год добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            )
            -  /* количество клиентов УДБО в год удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            ) udbo_year,

            /* количество клиентов УДБО в месяц */
                /* количество клиентов УДБО в месяц добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addUDBOClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            )
            -   /* количество клиентов УДБО в месяц удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeUDBOClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            ) udbo_month,


            /* Общее количество договоров СБОЛ на ДАТУ */
            (
                SELECT count(*)
                FROM USERS users
                WHERE users.STATUS        = 'A' AND
                      users.CREATION_TYPE = 'SBOL' AND
                      users.DEPARTMENT_ID = deps.ID
            )
            +   /* количество клиентов УДБО удалено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            )
            -   /* количество клиентов УДБО добавлено за период после указанной даты */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE >= :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            ) sbol_count,


            /* количество клиентов СБОЛ в год */
                /* количество клиентов СБОЛ в год добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            )
            -   /* количество клиентов СБОЛ в год удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastYearDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            ) sbol_year,

            /* количество клиентов СБОЛ в месяц */
                /* количество клиентов СБОЛ в месяц добавлено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:addSBOLClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            )
            -   /* количество клиентов СБОЛ в месяц удалено */
            (
                SELECT count(userlog.ID)
                FROM USERLOG userlog
                WHERE
                    userlog.START_DATE between :lastMonthDate and :startDate AND
                    userlog.DESCRIPTION_KEY = concat(:removeSBOLClient, deps.ID) AND
                    userlog.APPLICATION = 'PhizIA' AND
                    userlog.LOGIN_ID = empl.LOGIN_ID
            ) sbol_month

            FROM DEPARTMENTS deps
                 LEFT JOIN DEPARTMENTS OSB ON OSB.ID = deps.PARENT_DEPARTMENT
                 LEFT JOIN DEPARTMENTS TB ON TB.ID = OSB.PARENT_DEPARTMENT
                 INNER JOIN EMPLOYEES empl ON  empl.DEPARTMENT_ID = deps.ID

            WHERE
                deps.ID in (:ids) AND
                OSB.ID IS NOT NULL AND
                TB.ID IS NOT NULL
            GROUP BY deps.ID, TB.TB, TB.NAME, OSB.OSB, deps.OFFICE, empl.LOGIN_ID, empl.SUR_NAME, empl.FIRST_NAME, empl.PATR_NAME
        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Количество активных пользователей  СБОЛ  по ТБ' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getActiveUsersTB">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="count_users" type="long"/>
        <return-scalar column="authorization_users" type="long"/>
        <return-scalar column="get_password_users" type="long"/>

        <![CDATA[
            select
                deps.tb tb_id, deps.NAME tb_name,
                (
                    select count(*)

                    from USERS usr
                    where
                        usr.DEPARTMENT_ID in (
                            SELECT depsR.id
                             FROM DEPARTMENTS depsR
                             where  depsR.TB = deps.TB or ((deps.TB= 36 or deps.TB = 76) and ( depsR.TB = 36 or  depsR.TB = 76))   /* заплатка для магадана*/
                    )
                    and usr.CREATION_TYPE = :sbol
                    and usr.agreement_date < :nextDayDate
                    and (usr.PROLONGATION_REJECTION_DATE >= :nextDayDate or usr.PROLONGATION_REJECTION_DATE is NULL)

                ) as count_users,
                (
                    select count(usrlog.id) from USERLOG usrlog, USERS usrs
                    where usrlog.LOGIN_ID = usrs.LOGIN_ID
                        and usrlog.DESCRIPTION_KEY = :auth
                        and usrlog.START_DATE between :startDate and  :nextDayDate
                        and usrlog.APPLICATION=:application
                        and usrs.DEPARTMENT_ID in (
                            SELECT depsR.id
                            FROM DEPARTMENTS depsR
                            where  depsR.TB = deps.TB or ((deps.TB= 36 or deps.TB = 76) and ( depsR.TB = 36 or  depsR.TB = 76))   /* заплатка для магадана*/
                        )
                ) as authorization_users,

                (
                    select count(usrlog.id) from USERLOG usrlog, USERS usrs
                    where usrlog.LOGIN_ID = usrs.LOGIN_ID
                        and usrlog.DESCRIPTION_KEY = :passw
                        and usrlog.START_DATE between :startDate and  :nextDayDate
                        and usrlog.APPLICATION=:application

                        and usrs.DEPARTMENT_ID in (
                            SELECT depsR.id
                            FROM DEPARTMENTS depsR
                            where  depsR.TB = deps.TB or ((deps.TB= 36 or deps.TB = 76) and ( depsR.TB = 36 or  depsR.TB = 76))   /* заплатка для магадана*/
                      )

                ) as get_password_users
                from DEPARTMENTS deps
                where deps.ID in (:ids)   /* id ТБ */  and deps.PARENT_DEPARTMENT is NULL
                group by deps.ID, deps.TB, deps.NAME
        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Количество активных пользователей  СБОЛ  по ВСП' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getActiveUsersVSP">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="osb_id" type="long"/>
        <return-scalar column="vsp_id" type="long"/>
        <return-scalar column="count_users" type="long"/>
        <return-scalar column="authorization_users" type="long"/>
        <return-scalar column="get_password_users" type="long"/>

        <![CDATA[
            select
                TB.tb tb_id, TB.NAME tb_name, OSB.osb osb_id, deps.OFFICE vsp_id,
                (
                    select count(usrs.id) from USERS usrs
                    where usrs.DEPARTMENT_ID = deps.ID
                        and usrs.CREATION_TYPE = :sbol
                        and usrs.agreement_date < :nextDayDate
                        and (usrs.PROLONGATION_REJECTION_DATE >= :nextDayDate or usrs.PROLONGATION_REJECTION_DATE is NULL)
                ) as count_users,
                (
                    select  count(usrlog.id) from USERLOG usrlog, USERS usrs
                    where usrlog.LOGIN_ID = usrs.LOGIN_ID
                        and usrlog.DESCRIPTION_KEY = :auth
                        and usrlog.APPLICATION=:application
                        and  usrlog.START_DATE between :startDate and  :nextDayDate
                        and usrs.DEPARTMENT_ID = deps.ID
                ) as authorization_users,
                (
                    select count(usrlog.id) from USERLOG usrlog, USERS usrs
                    where usrlog.LOGIN_ID = usrs.LOGIN_ID
                        and usrlog.DESCRIPTION_KEY = :passw
                        and usrlog.APPLICATION=:application
                        and usrlog.START_DATE between :startDate and  :nextDayDate
                        and usrs.DEPARTMENT_ID = deps.ID
                ) as get_password_users
            from DEPARTMENTS deps
            left join DEPARTMENTS OSB on OSB.ID = deps.PARENT_DEPARTMENT
            left join DEPARTMENTS TB on TB.ID = OSB.PARENT_DEPARTMENT
            where deps.ID in (:ids)  /* id ВСП */ and OSB.PARENT_DEPARTMENT is not NULL /* ОСП */ and deps.PARENT_DEPARTMENT is not NULL /* ВСП */   and TB.PARENT_DEPARTMENT is  NULL
            group by deps.ID, TB.TB, TB.NAME, OSB.OSB, deps.OFFICE
        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Операции в СБОЛ за период по Сбербанку' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getOperationsSBRF">
        <return-scalar column="description" type="string"/>
        <return-scalar column="currency"      type="string"/>
        <return-scalar column="counts" type="long"/>
        <return-scalar column="amount" type="float"/>

        <![CDATA[

            select operations.description  description, sum(operations.counts) counts, operations.currency currency, sum(operations.amount) amount

            from (

				select decode(usrlog.DESCRIPTION_KEY,
						/* Работа с профилем клиента */
						:viewMail, 'support',
						:viewOutputMail, 'support',
						:viewInputMail, 'support',
						:createResponding, 'support',

						/* Работа с профилем клиента */
                  		:userProfileEdit, 'clientProfil',
                  		:listFavouriteEdit,	'clientProfil',
                  		:mainMenuEdit, 'clientProfil',
                        :setupAccountsViewInMobile,'clientProfil',
                        :setupAccountsViewInSystem,'clientProfil',
                        :setupAccountsViewInES,'clientProfil',
                  		:newPassword, 'clientProfil',
                  		:setupSecurity,	'clientProfil',

						/* информация по кредитам */
						:viewCredit, 'creditInfo',
            			:creditProducts,  'creditInfo',
            			:creditCalculator, 'creditInfo',
            			:createCredit, 'creditInfo',
            			:infoCredit, 'creditInfo',
            			:infoCreditProduct, 'creditInfo',
            			:resultCredit, 'creditInfo',

						 /* чеки */
						:printCheck, 'printCheck',

						/* Предоставление информации о 10 последних операциях по карте */
						:operationInfo,  'cardsReportForLast10Operation',
                        :cardDetail, 'cardsReport',

						/* Просмотр главной страницы*/
            			:titlePage,  'titlePage',

						/* Подтверждение одноразовым паролем */
						:entryPassword, 'confirmation',
            			:setupSecurityActionConfirm, 	'confirmation',
                        :setupAccountsSystemViewConfirmEnter, 	'confirmation',
                        :setupAccountsSystemViewConfirmSystem, 	'confirmation',
                        :setupAccountsSystemViewConfirmES, 	'confirmation',
                        :setupAccountsSystemViewConfirmMobile, 	'confirmation',
            			:editUserSettingsActionConfirm, 'confirmation',
            			:documentConfirm, 'confirmation',
            			:templateConfirm, 'confirmation',


						/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
						:mobileTemplate1, 'mobileTemplateCreate',

                        :mobileTemplate2,  'initTemplates',
						/* Просмотр шаблонов с использованием Мобильного банка */
						:viewSmsTemplate, 'mobileTemplateView',

						/* Вход в систему */
						:auth, 'entryInSystem',

						/* История операций */
						:operationsHistory, 'operationsHistory',

						/* Просмотр новостей */
						:newsList, 'newsView',
						:newsView, 'newsView',

                        :viewPFRStatement, 'infoFromPFRF',

						/* Предоставление информации по мет. счетам */
						:IMAccountInfo, 'metalAccountInfo',
						:IMAccount, 'metalAccountInfo',
						:IMAccountPrint, 'metalAccountInfo',
						:IMAccountSave, 'metalAccountInfo',


						/* Предоставление информации по счету депо */
						:showDepoAccountPositionAction, 'accountDEPO',
			    		:showDepoAccountsListAction, 'accountDEPO',
						:showDepoDebtInfoAction, 'accountDEPO'

				) description,
				count(usrlog.ID) counts,
				null currency,
				null amount

				from userlog usrlog
				where
						usrlog.START_DATE between :startDate and :endDate
						and
						usrlog.APPLICATION = :application
				group by usrlog.DESCRIPTION_KEY

				union all
				
				select decode(usrlog.DESCRIPTION_KEY,
						/* Работа с профилем клиента(данные операции должны учитываться 2 раза) */
                        :setupAccountsViewInMobile,'clientProfil',
                        :setupAccountsViewInSystem,'clientProfil',
                        :setupAccountsViewInES,'clientProfil',
                  		:newPassword, 'clientProfil',
                  		:mobileTemplate1, 'confirmation'
			    ) description,
				count(usrlog.ID) counts,
				null currency,
				null amount
				from userlog usrlog
				where
						usrlog.START_DATE between :startDate and :endDate
						and
						usrlog.APPLICATION = :application
				group by usrlog.DESCRIPTION_KEY

				union all

			    /*  Подтвержденные шаблоны платежей */
				select
          	    'createTemplates' description, count(business_documents.ID) counts,  business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
          	    from BUSINESS_DOCUMENTS business_documents
          	    where business_documents.state_code = :stateCodeSavedTemplate
							and business_documents.CHANGED between :startDate and :endDate
							and business_documents.COUNT_ERROR = 0
				group by business_documents.CURRENCY

				union all

                /*  Все основные платежи (кроме перевода денег)*/
				select
					CASE WHEN KIND = :stopCardKind  THEN 'stopCard'
						 WHEN KIND = :stopAccountKind  THEN 'stopAccount'
						 WHEN KIND = :toBillingOrganization  THEN 'toBillingOrganization'
						 WHEN KIND = :PFRKind  THEN 'infoFromPFRF'
						 WHEN (KIND = :toForeignAccountKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	 and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :jur)) THEN 'toNotContractOrganization'
						 WHEN (KIND = :toForeignAccountKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :ph)) THEN 'toForeignAccount'
						 WHEN (KIND = :taxPayment and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	 and ext_fiels.NAME = :receiver_name   and ext_fiels.VALUE in (SELECT NAME FROM SERVICE_PROVIDERS where PAYMENT_TYPE = :tax))) THEN 'toForeignAccount'
						 WHEN (KIND = :creditKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceCard)) THEN 'creditFromCard'
						 WHEN (KIND = :creditKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceAccount)) THEN 'creditFromAccount'
						 WHEN KIND = :virtualCard  THEN 'virtualCard'
					END description,
					count(business_documents.ID) counts, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
				from BUSINESS_DOCUMENTS business_documents
				where business_documents.kind in (:stopCardKind, :stopAccountKind, :toBillingOrganization, :toForeignAccountKind, :taxPayment, :creditKind, :virtualCard)
					and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
					and business_documents.OPERATION_DATE between :startDate and :endDate
					and business_documents.COUNT_ERROR = 0
				group by business_documents.ID, business_documents.KIND, business_documents.CURRENCY

				union all

				 /* Ввод шаблона или документа */
				select
						CASE WHEN state_code = :stateCodeTemplate or state_code = :stateCodeSavedTemplate THEN 'initTemplates'
								 ELSE 'initPayment'
						END description,
						count(business_documents.ID) counts, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
				from BUSINESS_DOCUMENTS business_documents
                where business_documents.creation_date between :startDate and :endDate
					and business_documents.COUNT_ERROR = 0
				group by business_documents.state_code, business_documents.CURRENCY

				union all

				/* Перевод денег */
				select
					CASE WHEN
						    exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceAccount	)
            			    and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceAccount	)
						 THEN 'fromAccountToAccount'
						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceAccount	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceCard	)
						 THEN 'fromAccountToCard'
						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type  and ext_fiels.VALUE = :resourceCard	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceCard	)
						 THEN 'fromCardToCard'
						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type  and ext_fiels.VALUE = :resourceCard	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceAccount	)
						 THEN 'fromCardToAccount'
					END description,
					count(business_documents.ID) counts, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
				from BUSINESS_DOCUMENTS business_documents
                where (business_documents.kind = :paymentKindR or business_documents.kind = :paymentKindE)
					  and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
						and business_documents.operation_date between :startDate and :endDate
						and business_documents.COUNT_ERROR = 0
				group by business_documents.ID, business_documents.KIND, business_documents.CURRENCY

				union all

                /* Создание заявок */
                select
                    CASE WHEN KIND = :loanProduct THEN 'loanProduct'
                         WHEN KIND = :loanOffer THEN 'loanOffer'
                         WHEN KIND = :loanCardProduct THEN 'loanCardProduct'
                         WHEN KIND = :loanCardOffer THEN 'loanCardOffer'
                         WHEN KIND = :virtualCard THEN 'virtualCard'
                    END description,
                    count(business_documents.ID) counts, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
                from BUSINESS_DOCUMENTS business_documents
                where business_documents.KIND in (:loanProduct, :loanOffer, :loanCardProduct, :loanCardOffer, :virtualCard)
                    and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved)
                    and business_documents.operation_date between :startDate and :endDate
                    and business_documents.COUNT_ERROR = 0
                group by business_documents.ID, business_documents.KIND, business_documents.CURRENCY
            ) operations

 			where not operations.description is NULL
			group by operations.DESCRIPTION, operations.currency

        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Операции в СБОЛ за период по ТБ' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getOperationsTB">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>        
        <return-scalar column="description" type="string"/>
        <return-scalar column="currency" type="string"/>
        <return-scalar column="count_operations" type="long"/>
        <return-scalar column="amount" type="float"/>

        <![CDATA[
        
select tb.tb tb_id, tb.name tb_name,  operations.description description, sum(operations.counts) count_operations, operations.currency currency, sum(operations.amount) amount
from

(
			select decode(usrlog.DESCRIPTION_KEY,
								        	/* Работа с профилем клиента */
											:viewMail, 'support',
											:viewOutputMail, 'support',
											:viewInputMail, 'support',
											:createResponding, 'support',

											/* Работа с профилем клиента */
                   							:userProfileEdit, 'clientProfil',
                    						:listFavouriteEdit,	'clientProfil',
                    						:mainMenuEdit, 'clientProfil',
                                            :setupAccountsViewInMobile,'clientProfil',
                                            :setupAccountsViewInSystem,'clientProfil',
                                            :setupAccountsViewInES,'clientProfil',
                    						:newPassword, 'clientProfil',
                    						:setupSecurity,	'clientProfil',

											/* информация по кредитам */
											:viewCredit, 'creditInfo',
            		 						:creditProducts,  'creditInfo',
            		 						:creditCalculator, 'creditInfo',
            		 						:createCredit, 'creditInfo',
            		 						:infoCredit, 'creditInfo',
            		 						:infoCreditProduct, 'creditInfo',
            		 						:resultCredit, 'creditInfo',

											 /* чеки */
											:printCheck, 'printCheck',

											/* Предоставление информации о 10 последних операциях по карте */
											:operationInfo,  'cardsReportForLast10Operation',
                                            :cardDetail, 'cardsReport',

											/* Просмотр главной страницы*/
            								:titlePage,  'titlePage',

											/* Подтверждение одноразовым паролем */
											:entryPassword, 'confirmation',
            			                    :setupSecurityActionConfirm, 	'confirmation',
                                            :setupAccountsSystemViewConfirmEnter, 	'confirmation',
                                            :setupAccountsSystemViewConfirmSystem, 	'confirmation',
                                            :setupAccountsSystemViewConfirmES, 	'confirmation',
                                            :setupAccountsSystemViewConfirmMobile, 	'confirmation',
            			                    :editUserSettingsActionConfirm, 'confirmation',
            			                    :documentConfirm, 'confirmation',
            			                    :templateConfirm, 'confirmation',

											/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
											:mobileTemplate1, 'mobileTemplateCreate',

                                            :mobileTemplate2,  'initTemplates',
											/* Просмотр шаблонов с использованием Мобильного банка */
											:viewSmsTemplate, 'mobileTemplateView',

											/* Вход в систему */
											:auth, 'entryInSystem',

											/* История операций */
											:operationsHistory, 'operationsHistory',

											/* Просмотр новостей */
											:newsList, 'newsView',
                                            :newsView, 'newsView',

                                            :viewPFRStatement, 'infoFromPFRF',

											/* Предоставление информации по мет. счетам */
						                    :IMAccountInfo, 'metalAccountInfo',
						                    :IMAccount, 'metalAccountInfo',
						                    :IMAccountPrint, 'metalAccountInfo',
						                    :IMAccountSave, 'metalAccountInfo',

											/* Предоставление информации по счету депо */
											:showDepoAccountPositionAction, 'accountDEPO',
			    							:showDepoAccountsListAction, 'accountDEPO',
											:showDepoDebtInfoAction, 'accountDEPO'
				) description,
				count(usrlog.ID) counts,
				usrs.DEPARTMENT_ID	department_id,
				null currency,
				null amount

				from userlog usrlog
				left join USERS usrs on usrlog.LOGIN_ID = usrs.LOGIN_ID
				where
						usrlog.START_DATE between :startDate and :endDate
						and
						usrlog.APPLICATION = :application
				group by usrlog.DESCRIPTION_KEY, usrs.DEPARTMENT_ID

				union all

			    select decode(usrlog.DESCRIPTION_KEY,
                    /* Работа с профилем клиента */
                    :setupAccountsViewInMobile,'clientProfil',
                    :setupAccountsViewInSystem,'clientProfil',
                    :setupAccountsViewInES,'clientProfil',
                    :newPassword, 'clientProfil',

                   /* Создание шаблонов для мобильного банка(подтверждение) */
                    :mobileTemplate1, 'confirmation'
				) description,
				count(usrlog.ID) counts,
				usrs.DEPARTMENT_ID	department_id,
				null currency,
				null amount

				from userlog usrlog
				left join USERS usrs on usrlog.LOGIN_ID = usrs.LOGIN_ID
				where
						usrlog.START_DATE between :startDate and :endDate
						and
						usrlog.APPLICATION = :application
				group by usrlog.DESCRIPTION_KEY, usrs.DEPARTMENT_ID


				union all

				select
          	    'createTemplates' description, count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
          	    from BUSINESS_DOCUMENTS business_documents
          	    where business_documents.state_code = :stateCodeSavedTemplate
							and business_documents.CHANGED between :startDate and :endDate
							and business_documents.COUNT_ERROR = 0
				group by business_documents.DEPARTMENT_ID, business_documents.CURRENCY

				union all

				select
					CASE WHEN KIND = :stopCardKind  THEN 'stopCard'
						 WHEN KIND = :stopAccountKind  THEN 'stopAccount'
						 WHEN KIND = :toBillingOrganization  THEN 'toBillingOrganization'
						 WHEN KIND = :PFRKind  THEN 'infoFromPFRF'
						 WHEN (KIND = :toForeignAccountKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	 and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :jur)) THEN 'toNotContractOrganization'
						 WHEN (KIND = :toForeignAccountKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :ph)) THEN 'toForeignAccount'
						 WHEN (KIND = :taxPayment and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	 and ext_fiels.NAME = :receiver_name   and ext_fiels.VALUE in (SELECT NAME FROM SERVICE_PROVIDERS where PAYMENT_TYPE = :tax))) THEN 'toForeignAccount'
						 WHEN (KIND = :creditKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceCard)) THEN 'creditFromCard'
						 WHEN (KIND = :creditKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceAccount)) THEN 'creditFromAccount'
					     WHEN KIND = :virtualCard  THEN 'virtualCard'
					END description,
					count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
				from BUSINESS_DOCUMENTS business_documents
				where business_documents.kind in (:stopCardKind, :stopAccountKind, :toBillingOrganization, :toForeignAccountKind, :taxPayment, :creditKind, :PFRKind, :virtualCard)
					  and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
						and business_documents.OPERATION_DATE between :startDate and :endDate
						and business_documents.COUNT_ERROR = 0
				group by business_documents.ID, business_documents.KIND, business_documents.DEPARTMENT_ID, business_documents.CURRENCY

				union all

				 /* Ввод шаблона или документа */
				select
					CASE WHEN state_code = :stateCodeTemplate or state_code = :stateCodeSavedTemplate THEN 'initTemplates'
						 ELSE 'initPayment'
					END description,
						count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
				from BUSINESS_DOCUMENTS business_documents
                where business_documents.creation_date between :startDate and :endDate
					and business_documents.COUNT_ERROR = 0
				group by business_documents.state_code, business_documents.CURRENCY, business_documents.DEPARTMENT_ID

				union all

				/* Перевод денег */
				select
					CASE WHEN
						    exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceAccount	)
            			    and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceAccount	)
						 THEN 'fromAccountToAccount'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceAccount	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceCard	)
						 THEN 'fromAccountToCard'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type  and ext_fiels.VALUE = :resourceCard	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceCard	)
						 THEN 'fromCardToCard'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type  and ext_fiels.VALUE = :resourceCard	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceAccount	)
						 THEN 'fromCardToAccount'
					END description,
					count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
				    from BUSINESS_DOCUMENTS business_documents
                    where (business_documents.kind = :paymentKindR or business_documents.kind = :paymentKindE)
					    and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
						and business_documents.operation_date between :startDate and :endDate
						and business_documents.COUNT_ERROR = 0
					group by business_documents.ID, business_documents.KIND, business_documents.DEPARTMENT_ID, business_documents.CURRENCY

                union all

                /* Создание заявок */
                select
                    CASE WHEN KIND = :loanProduct THEN 'loanProduct'
                         WHEN KIND = :loanOffer THEN 'loanOffer'
                         WHEN KIND = :loanCardProduct THEN 'loanCardProduct'
                         WHEN KIND = :loanCardOffer THEN 'loanCardOffer'
                         WHEN KIND = :virtualCard THEN 'virtualCard'
                    END description,
                    count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, business_documents.CURRENCY currency,  sum(business_documents.AMOUNT) amount
                from BUSINESS_DOCUMENTS business_documents
                where business_documents.KIND in (:loanProduct, :loanOffer, :loanCardProduct, :loanCardOffer, :virtualCard)
                    and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved)
                    and business_documents.operation_date between :startDate and :endDate
                    and business_documents.COUNT_ERROR = 0
                group by business_documents.ID, business_documents.KIND, business_documents.DEPARTMENT_ID, business_documents.CURRENCY

)operations, DEPARTMENTS tb

where tb.id in (:ids)
      and operations.department_id in (select id from DEPARTMENTS deps where deps.TB = tb.TB or ((tb.TB= 36 or tb.TB = 76) and (deps.TB = 36 or deps.TB = 76)))      /* заплатка для магадана */
	  and  not  operations.description is NULL

      and tb.PARENT_DEPARTMENT  is NULL

group by  tb.name, tb.tb, operations.description, operations.currency

        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Операции в СБОЛ за период по ВСП' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getOperationsVSP">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="osb_id" type="long"/>
        <return-scalar column="vsp_id" type="long"/>
        
        <return-scalar column="description" type="string"/>
        <return-scalar column="count_operations" type="long"/>



        <![CDATA[
  select vsp.tb tb_id, tb.name tb_name, vsp.osb osb_id, vsp.OFFICE vsp_id, operations.description description, sum(operations.counts) count_operations
from

(
			select decode(usrlog.DESCRIPTION_KEY,
					/* Работа с профилем клиента */
					:viewMail, 'support',
					:viewOutputMail, 'support',
					:viewInputMail, 'support',
					:createResponding, 'support',

					/* Работа с профилем клиента */
                   	:userProfileEdit, 'clientProfil',
                    :listFavouriteEdit,	'clientProfil',
                    :mainMenuEdit, 'clientProfil',
                    :setupAccountsViewInMobile,'clientProfil',
                    :setupAccountsViewInSystem,'clientProfil',
                    :setupAccountsViewInES,'clientProfil',
                    :newPassword, 'clientProfil',
                    :setupSecurity,	'clientProfil',

					/* информация по кредитам */
					:viewCredit, 'creditInfo',
            		 :creditProducts,  'creditInfo',
            		 :creditCalculator, 'creditInfo',
            		 :createCredit, 'creditInfo',
            		 :infoCredit, 'creditInfo',
            		 :infoCreditProduct, 'creditInfo',
            		 :resultCredit, 'creditInfo',

					 /* чеки */
					:printCheck, 'printCheck',

					/* Предоставление информации о 10 последних операциях по карте */
					:operationInfo,  'cardsReportForLast10Operation',
                    :cardDetail, 'cardsReport',

					/* Просмотр главной страницы*/
            		:titlePage,  'titlePage',

					/* Подтверждение одноразовым паролем */
					:entryPassword, 'confirmation',
            		:setupSecurityActionConfirm, 	'confirmation',
            		:setupAccountsSystemViewConfirmEnter, 	'confirmation',
            		:setupAccountsSystemViewConfirmSystem, 	'confirmation',
            		:setupAccountsSystemViewConfirmES, 	'confirmation',
            		:setupAccountsSystemViewConfirmMobile, 	'confirmation',
            		:editUserSettingsActionConfirm, 'confirmation',
            		:documentConfirm, 'confirmation',
            		:templateConfirm, 'confirmation',

					/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
					:mobileTemplate1, 'mobileTemplateCreate',

                    :mobileTemplate2,   'initTemplates',
					/* Просмотр шаблонов с использованием Мобильного банка */
					:viewSmsTemplate, 'mobileTemplateView',

					/* Вход в систему */
					:auth, 'entryInSystem',

					/* История операций */
					:operationsHistory, 'operationsHistory',

					/* Просмотр новостей */
					:newsList, 'newsView',
                    :newsView, 'newsView',

                    :viewPFRStatement, 'infoFromPFRF',

					/* Предоставление информации по мет. счетам */
					:IMAccountInfo, 'metalAccountInfo',
					:IMAccount, 'metalAccountInfo',
					:IMAccountPrint, 'metalAccountInfo',
					:IMAccountSave, 'metalAccountInfo',

					/* Предоставление информации по счету депо */
					:showDepoAccountPositionAction, 'accountDEPO',
			    	:showDepoAccountsListAction, 'accountDEPO',
					:showDepoDebtInfoAction, 'accountDEPO'
				) description,
				count(usrlog.ID) counts,
				usrs.DEPARTMENT_ID	department_id

				from userlog usrlog
				left join USERS usrs on usrlog.LOGIN_ID = usrs.LOGIN_ID  and usrs.DEPARTMENT_ID in (:ids)
				where
						usrlog.START_DATE between :startDate and :endDate
						and
						usrlog.APPLICATION = :application
				group by usrlog.DESCRIPTION_KEY, usrs.DEPARTMENT_ID

				union all

                select decode(usrlog.DESCRIPTION_KEY,
					/* Работа с профилем клиента (операции должны учитываться 2 раза)*/
                    :setupAccountsViewInMobile,'clientProfil',
                    :setupAccountsViewInSystem,'clientProfil',
                    :setupAccountsViewInES,'clientProfil',
                    :newPassword, 'clientProfil',

					/* Создание шаблонов для мобильного банка(подтверждение */
					:mobileTemplate1, 'confirmation'

				) description,
				count(usrlog.ID) counts,
				usrs.DEPARTMENT_ID	department_id

				from userlog usrlog
				left join USERS usrs on usrlog.LOGIN_ID = usrs.LOGIN_ID  and usrs.DEPARTMENT_ID in (:ids)
				where
						usrlog.START_DATE between :startDate and :endDate
						and
						usrlog.APPLICATION = :application
				group by usrlog.DESCRIPTION_KEY, usrs.DEPARTMENT_ID

				union all

				select
          	        'createTemplates' description, count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id
          	    from BUSINESS_DOCUMENTS business_documents
          	    where business_documents.state_code = :stateCodeSavedTemplate
					and business_documents.CHANGED between  :startDate and :endDate
					and business_documents.DEPARTMENT_ID in (:ids)
					and business_documents.COUNT_ERROR = 0
				group by business_documents.DEPARTMENT_ID

				union all

				select
					CASE WHEN KIND = :stopCardKind  THEN 'stopCard'
						 WHEN KIND = :stopAccountKind  THEN 'stopAccount'
						 WHEN KIND = :toBillingOrganization  THEN 'toBillingOrganization'
						 WHEN KIND = :PFRKind  THEN 'infoFromPFRF'
						 WHEN (KIND = :toForeignAccountKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	 and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :jur)) THEN 'toNotContractOrganization'
						 WHEN (KIND = :toForeignAccountKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :ph)) THEN 'toForeignAccount'
						 WHEN (KIND = :taxPayment and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	 and ext_fiels.NAME = :receiver_name   and ext_fiels.VALUE in (SELECT NAME FROM SERVICE_PROVIDERS where PAYMENT_TYPE = :tax))) THEN 'toForeignAccount'
						 WHEN (KIND = :creditKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceCard)) THEN 'creditFromCard'
						 WHEN (KIND = :creditKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceAccount)) THEN 'creditFromAccount'
					     WHEN KIND = :virtualCard  THEN 'virtualCard'
					END description,
					count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id
				from BUSINESS_DOCUMENTS business_documents
				where business_documents.kind in (:stopCardKind, :stopAccountKind, :toBillingOrganization, :toForeignAccountKind, :taxPayment, :creditKind, :virtualCard)
					and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate,  :PFRKind)
					and business_documents.OPERATION_DATE between  :startDate and :endDate
					and business_documents.DEPARTMENT_ID in (:ids)
					and business_documents.COUNT_ERROR = 0
				group by business_documents.ID, business_documents.KIND, business_documents.DEPARTMENT_ID

				union all

				 /* Ввод шаблона или документа */
					select
					    CASE WHEN state_code = :stateCodeTemplate or state_code = :stateCodeSavedTemplate THEN 'initTemplates'
						    ELSE 'initPayment'
					    END description,
						count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id
					from BUSINESS_DOCUMENTS business_documents
                    where business_documents.creation_date between :startDate and :endDate
						and business_documents.DEPARTMENT_ID in (:ids)
						and business_documents.COUNT_ERROR = 0
					group by business_documents.state_code, business_documents.DEPARTMENT_ID

				union all

				/* Перевод денег */
				select
					CASE WHEN
						    exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceAccount	)
            			    and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceAccount	)
						 THEN 'fromAccountToAccount'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceAccount	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceCard	)
						 THEN 'fromAccountToCard'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type  and ext_fiels.VALUE = :resourceCard	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceCard	)
						 THEN 'fromCardToCard'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type  and ext_fiels.VALUE = :resourceCard	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceAccount	)
						 THEN 'fromCardToAccount'
					END description,
							count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id
				from BUSINESS_DOCUMENTS business_documents
                where (business_documents.kind = :paymentKindR or business_documents.kind = :paymentKindE)
					and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
					and business_documents.operation_date between :startDate and :endDate
 				    and business_documents.DEPARTMENT_ID in (:ids)
					and business_documents.COUNT_ERROR = 0
				group by business_documents.ID, business_documents.KIND, business_documents.DEPARTMENT_ID

				union all

				/* Создание заявок */
                select
                    CASE WHEN KIND = :loanProduct THEN 'loanProduct'
                         WHEN KIND = :loanOffer THEN 'loanOffer'
                         WHEN KIND = :loanCardProduct THEN 'loanCardProduct'
                         WHEN KIND = :loanCardOffer THEN 'loanCardOffer'
                         WHEN KIND = :virtualCard THEN 'virtualCard'
                    END description,
                    count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id
                from BUSINESS_DOCUMENTS business_documents
                where business_documents.KIND in (:loanProduct, :loanOffer, :loanCardProduct, :loanCardOffer, :virtualCard)
                    and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved)
                    and business_documents.operation_date between :startDate and :endDate
                    and business_documents.DEPARTMENT_ID in (:ids)
                    and business_documents.COUNT_ERROR = 0
                group by business_documents.ID, business_documents.KIND, business_documents.DEPARTMENT_ID

)operations, DEPARTMENTS vsp


left join DEPARTMENTS tb on vsp.tb = tb.tb and tb.PARENT_DEPARTMENT is null and tb.OSB is NULL and tb.OFFICE is NULL

where vsp.id in (:ids)
      and operations.department_id = vsp.id
	  and  not  operations.description is NULL
      and not vsp.PARENT_DEPARTMENT  is NULL

group by  tb.name, vsp.tb, vsp.osb, vsp.OFFICE, operations.description
]]>
    </sql-query>

    <!-- Запрос для it-отчета 'Отчет по бизнес–параметрам за период': подотчет 'Количество платежных документов в день и Максимальное количество бизнес-операций в секунду по ТБ' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getBusinessParamsTB">
        <return-scalar column="tb_id"                    type="long"/>
        <return-scalar column="tb_name"                  type="string"/>
        <return-scalar column="countPayDayAvg"           type="float"/>
        <return-scalar column="countPayDayMax"           type="long"/>
        <return-scalar column="countOperationsSecondMax" type="long"/>

        <![CDATA[
            select tb.tb tb_id, tb.name tb_name, (

                SELECT count(bDocs.id)
                FROM BUSINESS_DOCUMENTS bDocs
                where (not bDocs.AMOUNT is NULL or not bDocs.DESTINATION_AMOUNT is NULL) and  bDocs.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
                and bDocs.OPERATION_DATE between :startDate and :endDate
                and bDocs.DEPARTMENT_ID in (
                      SELECT depsR.id
                      FROM DEPARTMENTS depsR
                      where depsR.TB = tb.TB or ((tb.TB in (36, 76))and (depsR.TB in (36, 76))) /* заплатка для магадана*/  
                )

            )  / ( trunc(:endDate) - trunc(:startDate))   as countPayDayAvg,        /* ср. значение = общее количество документов делим на число дней */
            (
                SELECT max(count(bDocs.id))
                FROM BUSINESS_DOCUMENTS bDocs
                where (not bDocs.AMOUNT is NULL or not bDocs.DESTINATION_AMOUNT is NULL)  and  bDocs.state_code not in(:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
                and bDocs.OPERATION_DATE between :startDate  and :endDate
                and bDocs.DEPARTMENT_ID in (
                      SELECT depsR.id
                      FROM DEPARTMENTS depsR
                      where depsR.TB = tb.TB or ((tb.TB in (36, 76))and (depsR.TB in (36, 76))) /* заплатка для магадана*/
                )
                group by  to_char(bDocs.OPERATION_DATE, 'dd.MM.yyyy')
            ) as countPayDayMax,
            (

                select max(sum(operations.counts)) counts
                from
                (
                  select count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, to_char(business_documents.OPERATION_DATE, 'dd.mm.yyyy hh24:mi:ss') operation_date
                	from BUSINESS_DOCUMENTS business_documents
                	where
                	business_documents.OPERATION_DATE between :startDate and  :endDate
                	and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
                	and business_documents.COUNT_ERROR = 0
		        	and
                	((
                		(business_documents.KIND = :paymentKindE or business_documents.KIND = :paymentKindR)
                		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and (ext_fiels.VALUE = :resourceAccount or ext_fiels.VALUE = :resourceCard))
                		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and (ext_fiels.VALUE = :resourceAccount or ext_fiels.VALUE = :resourceCard))
                	)
                	or
                	(
                	    business_documents.KIND = :toForeignAccountKind
                		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :ph)

                	)
                	or
                	(
                		business_documents.KIND = :toForeignAccountKind
                 		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :jur)

                	)
                	or
                    (
                    		business_documents.KIND = :taxPayment
                    		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :receiver_name   and ext_fiels.VALUE in (SELECT NAME FROM SERVICE_PROVIDERS where PAYMENT_TYPE = :tax))

                    )
                	or
                	(
                        business_documents.KIND in (:toBillingOrganization, :stopCardKind, :stopAccountKind, :PFRKind, :loanProduct, :loanOffer, :loanCardProduct, :loanCardOffer, :virtualCard)
                	)
                	or
                   (
                    	business_documents.KIND = :creditKind
                    	and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceAccount)
                    )
                    or
                    (
                    	business_documents.KIND = :creditKind
                    	and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type  and ext_fiels.VALUE = :resourceCard)
                    ))

		        			group by business_documents.DEPARTMENT_ID, to_char(business_documents.OPERATION_DATE, 'dd.mm.yyyy hh24:mi:ss')

                	UNION  ALL

		        			/*  введенные шаблоны и платежи */
                	select count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, to_char(business_documents.creation_date, 'dd.mm.yyyy hh24:mi:ss') operation_date
                	from BUSINESS_DOCUMENTS business_documents
                	where
                	business_documents.creation_date between :startDate and  :endDate
		        			and business_documents.COUNT_ERROR = 0
		        			group by 	business_documents.DEPARTMENT_ID, to_char(business_documents.creation_date, 'dd.mm.yyyy hh24:mi:ss')

		        	UNION  ALL

		        			/* подтвержденные шаблоны */
       	            select count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id,  to_char(business_documents.CHANGED, 'dd.mm.yyyy hh24:mi:ss') operation_date
                	from BUSINESS_DOCUMENTS business_documents
                	where
                		business_documents.state_code = :stateCodeSavedTemplate
		        				and business_documents.CHANGED between :startDate and  :endDate
		        				and business_documents.COUNT_ERROR = 0
		        		group by 	business_documents.DEPARTMENT_ID, to_char(business_documents.CHANGED, 'dd.mm.yyyy hh24:mi:ss')

                	UNION  ALL

                	select count(usrlog.ID) counts, users.DEPARTMENT_ID department_id, to_char(usrlog.start_date, 'dd.mm.yyyy hh24:mi:ss') operation_date
                	from USERLOG usrlog
		        			left join USERS users on users.LOGIN_ID = usrlog.LOGIN_ID
                	where
                	usrlog.START_DATE between :startDate and  :endDate
                	and
                	    usrlog.DESCRIPTION_KEY in (
		        		/* Работа с профилем клиента */
		        			:viewMail,
		        			:viewOutputMail,
		        			:viewInputMail,
		        			:createResponding,

		        			/* Работа с профилем клиента */
                           	:userProfileEdit,
                            :listFavouriteEdit,
                            :mainMenuEdit,
                            :setupAccountsViewInMobile,
                            :setupAccountsViewInSystem,
                            :setupAccountsViewInES,
                            :newPassword,
                            :setupSecurity,

		        			/* информация по кредитам */
		        			:viewCredit,
                    		 :creditProducts,
                    		 :creditCalculator,
                    		 :createCredit,
                    		 :infoCredit,
                    		 :infoCreditProduct,
                    		 :resultCredit,

		        			 /* чеки */
		        			:printCheck,

		        			/* Предоставление информации о 10 последних операциях по карте */
		        			:operationInfo,
		        			:cardDetail,

		        			/* Просмотр главной страницы*/
                    		:titlePage,

		        			/* Подтверждение одноразовым паролем */
		        			:entryPassword,
            			    :setupSecurityActionConfirm, 	'confirmation',
            			    :setupAccountsSystemViewConfirmEnter,
            		        :setupAccountsSystemViewConfirmSystem,
                            :setupAccountsSystemViewConfirmES,
                            :setupAccountsSystemViewConfirmMobile,
            			    :editUserSettingsActionConfirm, 'confirmation',
            			    :documentConfirm, 'confirmation',
            			    :templateConfirm, 'confirmation',

		        			/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
		        			:mobileTemplate1,

                    		:mobileTemplate2,

		        			/* Просмотр шаблонов с использованием Мобильного банка */
		        			:viewSmsTemplate,

		        			/* Вход в систему */
		        			:auth,

		        			/* История операций */
		        			:operationsHistory,

		        			/* Просмотр новостей */
		        			:newsList,
		        			:newsView,

                            /*просмотр выписки из ПФР*/
                            :viewPFRStatement,
                            
		        			/* Предоставление информации по мет. счетам */
						    :IMAccountInfo,
						    :IMAccount,
						    :IMAccountPrint,
						    :IMAccountSave,

		        			/* Предоставление информации по счету депо */
		        			:showDepoAccountPositionAction,
		        	    	:showDepoAccountsListAction,
		        			:showDepoDebtInfoAction
                	    )


                	and usrlog.APPLICATION = :application

		        	group by users.department_id, to_char(usrlog.start_date, 'dd.mm.yyyy hh24:mi:ss')

        ) operations


        where
        operations.department_id in (
            SELECT depsR.id
            FROM DEPARTMENTS depsR
			where depsR.TB = tb.TB or ((tb.TB in (36, 76))and (depsR.TB in (36, 76))) /* заплатка для магадана*/
        )
        group by operations.operation_date



            ) as   countOperationsSecondMax
            from DEPARTMENTS  tb
            where tb.id in (:ids) and tb.PARENT_DEPARTMENT is NULL
        ]]>
    </sql-query>

    <!-- Запрос для it-отчета 'Отчет по бизнес–параметрам за период': подотчет 'Количество одновременно работающих клиентов в день' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getBusinessParamsSBRF">
        <return-scalar column="avgUsers" type="float"/>
        <return-scalar column="maxUsers" type="long"/>

        <![CDATA[
            select
			    sum(avg(counts))/(trunc(:endDate) - trunc(:startDate)) avgUsers,
			    max(max(sessions_count.counts)) maxUsers
            FROM
		    (
				select
				    usrs.start_date start_date,
					SUBSTR (
   	                    replace(
   	                    	REPLACE(
   	                    		usrs.description, :description
   	                    	),
   	                    	:beforeIP
   	                    ),
   	                    0,
   	                    INSTR (
   	                    	replace(
   	                    		REPLACE(
   	                    			usrs.description, :description
   	                    		),
   	                    		:beforeIP
   	                    	),
   	                    	' '
   	                    ) - 1    /* учет пробела между количеством и адресом*/
                    )  counts,
					SUBSTR (
 	                    replace(
 	                    	REPLACE(
 	                    		usrs.description, :description
 	                    	),
 	                    	:beforeIP
 	                    ),
 	                    INSTR (
 	                    	replace(
 	                    		REPLACE(
 	                    			usrs.description, :description
 	                    		),
 	                    		:beforeIP
 	                    	),
 	                    	' '
 	                    ) + 1
                    ) ip_address
				from USERLOG usrs
            	where
            	    usrs.DESCRIPTION like :description || '%'                       /* 'Текущее кол-во сессий в приложении%'    */
            	    and usrs.start_date between :startDate and :endDate
            	    and usrs.APPLICATION = :application
			) sessions_count
            group by to_char(sessions_count.start_date, 'dd.mm.yyyy'), sessions_count.ip_address
        ]]>
    </sql-query>

    <!-- Запрос для отчета 'Отчет о качестве выполнения операций за период' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getQualityOperatinsPeriodTB">
        <return-scalar column="tb_id"   type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="counts" type="long"/>
        <return-scalar column="errors"  type="long"/>

        <![CDATA[

        select tb.tb tb_id, tb.NAME tb_name, sum(operations.counts) counts, sum(operations.count_error) errors
        from DEPARTMENTS tb,
        (
          select count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, sum(business_documents.COUNT_ERROR) count_error
        	from BUSINESS_DOCUMENTS business_documents
        	where
        	business_documents.OPERATION_DATE between :startDate and :endDate
        	and  business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
        	and
        	((
        		(business_documents.KIND = :paymentKindE or business_documents.KIND = :paymentKindR)
        		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and  (ext_fiels.VALUE = :resourceAccount or ext_fiels.VALUE = :resourceCard))
        		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type   and  (ext_fiels.VALUE = :resourceAccount or ext_fiels.VALUE = :resourceCard))
        	)
        	or
        	(
        	    business_documents.KIND = :toForeignAccountKind
        		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :ph)

        	)
        	or
        	(
        		business_documents.KIND = :toForeignAccountKind
        		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :jur)

        	)
        	or
            (
            		business_documents.KIND = :taxPayment
            		and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :receiver_name   and ext_fiels.VALUE in (SELECT NAME FROM SERVICE_PROVIDERS where PAYMENT_TYPE = :tax))

            )
        	or
        	(
                business_documents.KIND in (:toBillingOrganization, :stopCardKind, :stopAccountKind, :PFRKind, :loanProduct, :loanOffer, :loanCardProduct, :loanCardOffer, :virtualCard)
        	)
        	or
           (
            	business_documents.KIND = :creditKind
            	and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceAccount)
            )
            or
            (
            	business_documents.KIND = :creditKind
            	and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type    and ext_fiels.VALUE = :resourceCard)
            ))

			group by business_documents.DEPARTMENT_ID

        	UNION  ALL

			/*  введенные шаблоны и платежи */
        	select count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, sum(business_documents.COUNT_ERROR) count_error
        	from BUSINESS_DOCUMENTS business_documents
        	where
        	    business_documents.creation_date between :startDate and  :endDate
			group by 	business_documents.DEPARTMENT_ID

			UNION  ALL

			/* подтвержденные шаблоны */
       	    select count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, sum(business_documents.COUNT_ERROR) count_error
        	from BUSINESS_DOCUMENTS business_documents
        	where
        		business_documents.state_code = :stateCodeSavedTemplate
				and business_documents.CHANGED between :startDate and :endDate
			group by business_documents.DEPARTMENT_ID

        	UNION  ALL

        	select sum(decode(usrlog.DESCRIPTION_KEY, :operationInfo, 2, :operationInfoSystemError, 2, 1)) counts, users.DEPARTMENT_ID department_id, sum(decode(usrlog.SUCCESS, 'E', decode(usrlog.DESCRIPTION_KEY, :operationInfoSystemError, 2, 1), 0)) count_error
        	from USERLOG usrlog
			left join USERS users on users.LOGIN_ID = usrlog.LOGIN_ID
        	where
        	usrlog.START_DATE between :startDate and :endDate
        	and usrlog.DESCRIPTION_KEY in (
				/* Обращение в техподдержку */
					:viewMail,
					:viewOutputMail,
					:viewInputMail,
					:createResponding,

					/* Работа с профилем клиента */
                   	:userProfileEdit,
                    :listFavouriteEdit,
                    :mainMenuEdit,
                    :setupAccountsViewInMobile,
                    :setupAccountsViewInSystem,
                    :setupAccountsViewInES,
                    :newPassword,
                    :setupSecurity,

					/* информация по кредитам */
					:viewCredit,
            		 :creditProducts,
            		 :creditCalculator,
            		 :createCredit,
            		 :infoCredit,
            		 :infoCreditProduct,
            		 :resultCredit,

					 /* чеки */
					:printCheck,

					/* Предоставление информации о 10 последних операциях по карте */
					:operationInfo,
					:cardDetail,

					/* Просмотр главной страницы*/
            		:titlePage,

					/* Подтверждение одноразовым паролем */
					:entryPassword,
            		:setupSecurityActionConfirm,
            		:setupAccountsSystemViewConfirmEnter,
            		:setupAccountsSystemViewConfirmSystem,
            		:setupAccountsSystemViewConfirmES,
            		:setupAccountsSystemViewConfirmMobile,
            		:editUserSettingsActionConfirm,
            		:documentConfirm,
            		:templateConfirm,

					/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
					:mobileTemplate1,

            		 :mobileTemplate2,

					/* Просмотр шаблонов с использованием Мобильного банка */
					:viewSmsTemplate,

					/* Вход в систему */
					:auth,

					/* История операций */
					:operationsHistory,

					/* Просмотр новостей */
					:newsList,
                    :newsView,

                    :viewPFRStatement,

					/* Предоставление информации по мет. счетам */
					:IMAccountInfo,
					:IMAccount,
					:IMAccountPrint,
					:IMAccountSave,

					/* Предоставление информации по счету депо */
					:showDepoAccountPositionAction,
			    	:showDepoAccountsListAction,
					:showDepoDebtInfoAction,


                    /* ошибки */
 				    /* Работа с профилем клиента */
					:viewMailSystemError,
					:viewOutputMailSystemError,
					:viewInputMailSystemError,
					:createRespondingSystemError,

					/* Работа с профилем клиента */
                   	:userProfileEditSystemError,
                    :listFavouriteEditSystemError,
                    :mainMenuEditSystemError,
                    :setupAccountsViewInMobileSystemError,
                    :setupAccountsViewInSystemSystemError,
                    :setupAccountsViewInESSystemError,

                    :newPasswordSystemError,
                    :setupSecuritySystemError,

					/* информация по кредитам */
					:viewCreditSystemError,
            		 :creditProductsSystemError,
            		 :creditCalculatorSystemError,
            		 :createCreditSystemError,
            		 :infoCreditSystemError,
            		 :infoCreditProductSystemError,
            		 :resultCreditSystemError,

					 /* чеки */
					:printCheckSystemError,

					/* Предоставление информации о 10 последних операциях по карте */
					:operationInfoSystemError,
                    :cardDetailSystemError,

					/* Просмотр главной страницы*/
            		:titlePageSystemError,

					/* Подтверждение одноразовым паролем */
					:entryPasswordSystemError,
            		:setupSecurityActionConfirmSystemError,
            		:setupAccountsSystemViewConfirmEnterSystemError,
            		:setupAccountsSystemViewConfirmSystemSystemError,
            		:setupAccountsSystemViewConfirmESSystemError,
            		:setupAccountsSystemViewConfirmMobileSystemError,
            		:editUserSettingsActionConfirmSystemError,
            		:documentConfirmSystemError,
            		:templateConfirmSystemError,

					/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
					:mobileTemplate1SystemError,

            		 :mobileTemplate2SystemError,

					/* Просмотр шаблонов с использованием Мобильного банка */
					:viewSmsTemplateSystemError,

					/* Вход в систему */
					:authSystemError,

					/* История операций */
					:operationsHistorySystemError,

					/* Просмотр новостей */
					:newsListSystemError,
					:newsViewSystemError,

					:viewPFRStatementSystemError,

					/* Предоставление информации по мет. счетам */
					:IMAccountInfoSystemError,
					:IMAccountSystemError,
					:IMAccountPrintSystemError,
					:IMAccountSaveSystemError,

					/* Предоставление информации по счету депо */
					:showDepoAccountPositionActionSystemError,
			    	:showDepoAccountsListActionSystemError,
					:showDepoDebtInfoActionSystemError
        	)
        	and usrlog.APPLICATION = :application

			group by users.department_id

			union all
        	select sum(decode(usrlog.DESCRIPTION_KEY, :operationInfo, 2, :operationInfoSystemError, 2, 1)) counts, users.DEPARTMENT_ID department_id, sum(decode(usrlog.SUCCESS, 'E', decode(usrlog.DESCRIPTION_KEY, :operationInfoSystemError, 2, 1), 0)) count_error
        	from USERLOG usrlog
			left join USERS users on users.LOGIN_ID = usrlog.LOGIN_ID
        	where
        	usrlog.START_DATE between :startDate and :endDate
        	and usrlog.DESCRIPTION_KEY in (
                /* Работа с профилем клиента */
                :setupAccountsViewInMobile,
                :setupAccountsViewInSystem,
                :setupAccountsViewInES,
                :newPassword,
                /* Создание шаблонов для мобильного банка(шаблон подтвержден) */
                :mobileTemplate1,

                /* ошибки */

                /* Работа с профилем клиента */
                :setupAccountsViewInMobileSystemError,
                :setupAccountsViewInSystemSystemError,
                :setupAccountsViewInESSystemError,
                :newPasswordSystemError,

                /* Создание шаблонов для мобильного банка(шаблон подтвержден) */
                :mobileTemplate1SystemError
        	)
        	and usrlog.APPLICATION = :application

			group by users.department_id

        ) operations


        where tb.id in (:ids) and tb.PARENT_DEPARTMENT is NULL
        and operations.department_id in (
            SELECT depsR.id
            FROM DEPARTMENTS depsR
			where depsR.TB = tb.TB or ((tb.TB in (36, 76)) and (depsR.TB in (36, 76)))    /* заплатка для магадана*/
        )
        group by tb.id, tb.tb, tb.name


        ]]>
    </sql-query>

     <!-- Запрос для отчета 'Отчет о качестве выполнения операций на дату (ежедневный)' -->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getQualityOperatinsDateTB">
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
        <return-scalar column="description" type="string"/>
        <return-scalar column="operation_date" type="string"/>
        <return-scalar column="count_operations" type="long"/>
        <return-scalar column="count_errors" type="long"/>

         <![CDATA[
select tb.tb tb_id, tb.name tb_name, operations.description description,operations.admission_date operation_date, sum(operations.counts) count_operations, sum(operations.count_error) count_errors

from (
			select decode(usrlog.DESCRIPTION_KEY,
					/* Обращение в техподдержку */
					:viewMail, 'support',
					:viewOutputMail, 'support',
					:viewInputMail, 'support',
					:createResponding, 'support',

					/* Работа с профилем клиента */
                   	:userProfileEdit, 'clientProfil',
                    :listFavouriteEdit,	'clientProfil',
                    :mainMenuEdit, 'clientProfil',
                    :setupAccountsViewInMobile,'clientProfil',
                    :setupAccountsViewInSystem,'clientProfil',
                    :setupAccountsViewInES,'clientProfil',
                    :newPassword, 'clientProfil',
                    :setupSecurity,	'clientProfil',

					/* информация по кредитам */
					:viewCredit, 'creditInfo',
            		 :creditProducts,  'creditInfo',
            		 :creditCalculator, 'creditInfo',
            		 :createCredit, 'creditInfo',
            		 :infoCredit, 'creditInfo',
            		 :infoCreditProduct, 'creditInfo',
            		 :resultCredit, 'creditInfo',

					 /* чеки */
					:printCheck, 'printCheck',

					/* Предоставление информации о 10 последних операциях по карте */
					:operationInfo,  'cardsReportForLast10Operation',
                    :cardDetail, 'cardsReport',

					/* Просмотр главной страницы*/
            		:titlePage,  'titlePage',

					/* Подтверждение одноразовым паролем */
					:entryPassword, 'confirmation',
            		:setupSecurityActionConfirm, 	'confirmation',
            		:setupAccountsSystemViewConfirmEnter, 	'confirmation',
            		:setupAccountsSystemViewConfirmSystem, 	'confirmation',
            		:setupAccountsSystemViewConfirmES, 	'confirmation',
            		:setupAccountsSystemViewConfirmMobile, 	'confirmation',
            		:editUserSettingsActionConfirm, 'confirmation',
            		:documentConfirm, 'confirmation',
            		:templateConfirm, 'confirmation',

					/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
					:mobileTemplate1, 'mobileTemplateCreate',

            		:mobileTemplate2, 'initTemplates',

					/* Просмотр шаблонов с использованием Мобильного банка */
					:viewSmsTemplate, 'mobileTemplateView',

					/* Вход в систему */
					:auth, 'entryInSystem',

					/* История операций */
					:operationsHistory, 'operationsHistory',

					/* Просмотр новостей */
					:newsList, 'newsView',
					:newsView, 'newsView',

					:viewPFRStatement, 'infoFromPFRF',

					/* Предоставление информации по мет. счетам */
					:IMAccountInfo, 'metalAccountInfo',
					:IMAccount, 'metalAccountInfo',
					:IMAccountPrint, 'metalAccountInfo',
					:IMAccountSave, 'metalAccountInfo',

					/* Предоставление информации по счету депо */
					:showDepoAccountPositionAction, 'accountDEPO',
			    	:showDepoAccountsListAction, 'accountDEPO',
					:showDepoDebtInfoAction, 'accountDEPO',
					/*--------------------------------------------------------------------------------
					ОШИБКИ
					---------------------------------------------------------------------------------*/
               
					/* Работа с профилем клиента */
					:viewMailSystemError, 'support',
					:viewOutputMailSystemError, 'support',
					:viewInputMailSystemError, 'support',
					:createRespondingSystemError, 'support',

					/* Работа с профилем клиента */
                   	:userProfileEditSystemError, 'clientProfil',                           
                    :listFavouriteEditSystemError,	'clientProfil',
                    :mainMenuEditSystemError, 'clientProfil',
                    :setupAccountsViewInMobileSystemError,'clientProfil',
                    :setupAccountsViewInSystemSystemError,'clientProfil',
                    :setupAccountsViewInESSystemError,'clientProfil',
                    :newPasswordSystemError, 'clientProfil',
                    :setupSecuritySystemError,	'clientProfil',

					/* информация по кредитам */
					 :viewCreditSystemError, 'creditInfo',
            		 :creditProductsSystemError,  'creditInfo',
            		 :creditCalculatorSystemError, 'creditInfo',
            		 :createCreditSystemError, 'creditInfo',
            		 :infoCreditSystemError, 'creditInfo',
            		 :infoCreditProductSystemError, 'creditInfo',
            		 :resultCreditSystemError, 'creditInfo',

					 /* чеки */
					:printCheckSystemError, 'printCheck',

					/* Предоставление информации о 10 последних операциях по карте */
					:operationInfoSystemError,  'cardsReportForLast10Operation',
					:cardDetailSystemError,  'cardsReport',

					/* Просмотр главной страницы*/
            		:titlePageSystemError,  'titlePage',

					/* Подтверждение одноразовым паролем */
					:entryPasswordSystemError, 'confirmation',
            		:setupSecurityActionConfirmSystemError, 	'confirmation',
            		:setupAccountsSystemViewConfirmEnterSystemError, 	'confirmation',
            		:setupAccountsSystemViewConfirmSystemSystemError, 	'confirmation',
            		:setupAccountsSystemViewConfirmESSystemError, 	'confirmation',
            		:setupAccountsSystemViewConfirmMobileSystemError, 	'confirmation',
            		:editUserSettingsActionConfirmSystemError, 'confirmation',
            		:documentConfirmSystemError, 'confirmation',
            		:templateConfirmSystemError, 'confirmation',

					/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
					:mobileTemplate1SystemError, 'mobileTemplateCreate',

                    :mobileTemplate2SystemError,	'count_error',
					/* Просмотр шаблонов с использованием Мобильного банка */
					:viewSmsTemplateSystemError, 'mobileTemplateView',

					/* Вход в систему */
					:authSystemError, 'entryInSystem',

					/* История операций */
					:operationsHistorySystemError, 'operationsHistory',

					/* Просмотр новостей */
					:newsListSystemError, 'newsView',
					:newsViewSystemError, 'newsView',

					:viewPFRStatementSystemError, 'infoFromPFRF',

					/* Предоставление информации по мет. счетам */
					:IMAccountInfoSystemError, 'metalAccountInfo',
					:IMAccountSystemError, 'metalAccountInfo',
					:IMAccountPrintSystemError, 'metalAccountInfo',
					:IMAccountSaveSystemError, 'metalAccountInfo',					

					/* Предоставление информации по счету депо */
					:showDepoAccountPositionActionSystemError, 'accountDEPO',
			    	:showDepoAccountsListActionSystemError, 'accountDEPO',
					:showDepoDebtInfoActionSystemError, 'accountDEPO'
				) description,
				to_char(usrlog.start_date, 'dd.mm.yyyy') admission_date,
				count(usrlog.ID) counts,
				usrs.DEPARTMENT_ID	department_id,
				decode(usrlog.SUCCESS, 'E',count(usrlog.SUCCESS), 0) count_error

				from userlog usrlog
				left join USERS usrs on  usrs.LOGIN_ID  = usrlog.LOGIN_ID
				where
						usrlog.START_DATE between :startDate and :endDate
						and
						usrlog.APPLICATION = :application
				group by 	to_char(usrlog.start_date, 'dd.mm.yyyy'), usrlog.DESCRIPTION_KEY, usrs.DEPARTMENT_ID, usrlog.SUCCESS

            union all
            
			select decode(usrlog.DESCRIPTION_KEY,
					/* Работа с профилем клиента */
                    :setupAccountsViewInMobile,'clientProfil',
                    :setupAccountsViewInSystem,'clientProfil',
                    :setupAccountsViewInES,'clientProfil',
                    :newPassword, 'clientProfil',

					:mobileTemplate1, 'confirmation',
					/*--------------------------------------------------------------------------------
					ОШИБКИ
					---------------------------------------------------------------------------------*/
                    :mainMenuEditSystemError, 'clientProfil',
                    :setupAccountsViewInMobileSystemError,'clientProfil',
                    :setupAccountsViewInSystemSystemError,'clientProfil',
                    :setupAccountsViewInESSystemError,'clientProfil',
                    :newPasswordSystemError, 'clientProfil',

					/* Создание шаблонов для мобильного банка(шаблон подтвержден) */
					:mobileTemplate1SystemError, 'confirmation'
				) description,
				to_char(usrlog.start_date, 'dd.mm.yyyy') admission_date,
				count(usrlog.ID) counts,
				usrs.DEPARTMENT_ID	department_id,
				decode(usrlog.SUCCESS, 'E',count(usrlog.SUCCESS), 0) count_error

				from userlog usrlog
				left join USERS usrs on  usrs.LOGIN_ID  = usrlog.LOGIN_ID
				where
						usrlog.START_DATE between :startDate and :endDate
						and
						usrlog.APPLICATION = :application
				group by 	to_char(usrlog.start_date, 'dd.mm.yyyy'), usrlog.DESCRIPTION_KEY, usrs.DEPARTMENT_ID, usrlog.SUCCESS

				/* Платежные документы */

				union all

				/* Подтверждение шаблона*/
				select
          	    'createTemplates' description, to_char(business_documents.CHANGED, 'dd.mm.yyyy') admission_date, count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, sum(business_documents.COUNT_ERROR) count_error
          	    from BUSINESS_DOCUMENTS business_documents
          	    where business_documents.state_code = :stateCodeSavedTemplate
							and business_documents.CHANGED between :startDate and :endDate
				group by business_documents.DEPARTMENT_ID, to_char(business_documents.CHANGED, 'dd.mm.yyyy')

                union all
                select
                     CASE WHEN KIND = :paymentKindR THEN 'cancelStandingOrder'
                        WHEN KIND = :toForeignAccountKind THEN 'startStandingOrder'
                        WHEN KIND = :creditKind   THEN 'startStandingOrder'
                        WHEN KIND = :paymentKindE   THEN 'startStandingOrder'
                    END description,
                    to_char(business_documents.OPERATION_DATE, 'dd.mm.yyyy') admission_date,
                    count(business_documents.ID) counts,
                    business_documents.DEPARTMENT_ID department_id,
                    sum(business_documents.COUNT_ERROR) count_error
                    FROM BUSINESS_DOCUMENTS business_documents
                    WHERE
                        business_documents.IS_LONG_OFFER = '1' and
                        business_documents.KIND in (:paymentKindR, :creditKind, :toForeignAccountKind, :paymentKindE)
                        and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
                        and business_documents.OPERATION_DATE between :startDate and :endDate
                    group by  business_documents.ID, business_documents.KIND,  to_char(business_documents.OPERATION_DATE, 'dd.mm.yyyy'), business_documents.DEPARTMENT_ID
				union all

				select
					CASE WHEN KIND = :stopCardKind  THEN 'stopCard'
						 WHEN KIND = :stopAccountKind  THEN 'stopAccount'
						 WHEN KIND = :PFRKind  THEN 'infoFromPFRF'
						 WHEN KIND = :toBillingOrganization  THEN 'toBillingOrganization'
						 WHEN (KIND = :toForeignAccountKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	 and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :jur)) THEN 'toNotContractOrganization'
						 WHEN (KIND = :toForeignAccountKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :receiver_type   and ext_fiels.VALUE = :ph)) THEN 'toForeignAccount'
						 WHEN (KIND = :taxPayment and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	 and ext_fiels.NAME = :receiver_name   and ext_fiels.VALUE in (SELECT NAME FROM SERVICE_PROVIDERS where PAYMENT_TYPE = :tax))) THEN 'toForeignAccount'
						 WHEN (KIND = :creditKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceCard)) THEN 'creditFromCard'
						 WHEN (KIND = :creditKind and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type   and ext_fiels.VALUE = :resourceAccount)) THEN 'creditFromAccount'
					     WHEN KIND = :virtualCard  THEN 'virtualCard'
					END description,
					to_char(business_documents.OPERATION_DATE, 'dd.mm.yyyy'),
					count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, sum(business_documents.COUNT_ERROR) count_error
				from BUSINESS_DOCUMENTS business_documents
				where business_documents.IS_LONG_OFFER = '0'
				    and business_documents.kind in (:stopCardKind, :stopAccountKind, :toBillingOrganization, :toForeignAccountKind, :taxPayment, :creditKind, :PFRKind, :virtualCard)
					and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
					and business_documents.OPERATION_DATE between :startDate and :endDate
				group by business_documents.ID, business_documents.KIND, to_char(business_documents.OPERATION_DATE, 'dd.mm.yyyy'), business_documents.DEPARTMENT_ID

				union all

				 /* Ввод шаблона или документа */
				select
				    CASE WHEN state_code = :stateCodeTemplate or state_code = :stateCodeSavedTemplate THEN 'initTemplates'
					     ELSE 'initPayment'
					END description,
					to_char(business_documents.creation_date, 'dd.mm.yyyy'),
					count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, sum(business_documents.COUNT_ERROR) count_error
				from BUSINESS_DOCUMENTS business_documents
                where business_documents.creation_date between :startDate and :endDate
				group by business_documents.state_code, business_documents.DEPARTMENT_ID, to_char(business_documents.creation_date, 'dd.mm.yyyy')

				union all

				/* Перевод денег */
				select
					CASE WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceAccount	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID		and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceAccount	)
						 THEN 'fromAccountToAccount'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceAccount	)
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID		and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceCard	)
						 THEN 'fromAccountToCard'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceCard )
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID		and ext_fiels.NAME = :to_resource_type   and ext_fiels.VALUE = :resourceCard )
						 THEN 'fromCardToCard'

						 WHEN
							exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID	and ext_fiels.NAME = :from_resource_type and ext_fiels.VALUE = :resourceCard )
            				and exists (select ext_fiels.ID from DOCUMENT_EXTENDED_FIELDS ext_fiels  where   ext_fiels.PAYMENT_ID	= business_documents.ID			and ext_fiels.NAME = :to_resource_type    and ext_fiels.VALUE = :resourceAccount )
						 THEN 'fromCardToAccount'
					END description,
					to_char(business_documents.operation_date, 'dd.mm.yyyy'),
					count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, sum(business_documents.COUNT_ERROR) count_error
				from BUSINESS_DOCUMENTS business_documents
                where (business_documents.kind = :paymentKindR or business_documents.kind = :paymentKindE)
                    and business_documents.IS_LONG_OFFER = '0'
					and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved, :stateCodeSavedTemplate, :stateCodeTemplate)
					and business_documents.operation_date between :startDate and :endDate
				group by business_documents.ID, business_documents.KIND, to_char(business_documents.operation_date, 'dd.mm.yyyy'), business_documents.DEPARTMENT_ID

				union all

				/* Создание заявок */
                select
                    CASE WHEN KIND = :loanProduct THEN 'loanProduct'
                         WHEN KIND = :loanOffer THEN 'loanOffer'
                         WHEN KIND = :loanCardProduct THEN 'loanCardProduct'
                         WHEN KIND = :loanCardOffer THEN 'loanCardOffer'
                         WHEN KIND = :virtualCard THEN 'virtualCard'
                    END description,
                    to_char(business_documents.operation_date, 'dd.mm.yyyy'),
                    count(business_documents.ID) counts, business_documents.DEPARTMENT_ID department_id, sum(business_documents.COUNT_ERROR) count_error
                from BUSINESS_DOCUMENTS business_documents
                where business_documents.KIND in (:loanProduct, :loanOffer, :loanCardProduct, :loanCardOffer, :virtualCard)
                    and business_documents.state_code not in (:stateCodeInitial, :stateCodeSaved)
                    and business_documents.operation_date between :startDate and :endDate
                group by business_documents.ID, business_documents.KIND, to_char(business_documents.operation_date, 'dd.mm.yyyy'), business_documents.DEPARTMENT_ID


)operations,
DEPARTMENTS tb

where tb.id in (:ids)  and tb.PARENT_DEPARTMENT is NULL
    and operations.department_id in (
        SELECT depsR.id
        FROM DEPARTMENTS depsR
		where depsR.TB = tb.TB or ((tb.TB= 36 or tb.TB = 76) and (depsR.TB = 36 or depsR.TB = 76))   /* заплатка для магадана */
    )
		and not operations.description is NULL

group by  tb.id, tb.tb, tb.name, operations.description, operations.admission_date
        ]]>
    </sql-query>


    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getProactiveMonitoring">
        <return-scalar column="description" type="string"/>
        <return-scalar column="count_operations" type="long"/>
        <return-scalar column="count_errors" type="long"/>
        <return-scalar column="small_time" type="long"/>
        <return-scalar column="average_time" type="long"/>
        <return-scalar column="long_time" type="long"/>
        <return-scalar column="tb_id" type="long"/>
        <return-scalar column="tb_name" type="string"/>
         <![CDATA[
            SELECT
                tb.tb tb_id,
                tb.name tb_name,
                operations.description description,
                sum(operations.counts) count_operations,
                sum(operations.count_error) count_errors,
                sum(operations.small_time) small_time,
                sum(operations.average_time) average_time,
                sum(operations.long_time) long_time
            FROM
                (SELECT decode(usrlog.DESCRIPTION_KEY,
                        /* Вход в систему  */
                        :login, 'loginPage',

                        :internetSecurity, 'internetSecurity',
                        :clientAutentication, 'clientAutentication',
                        :loginDepartments, 'loginDepartments',
                        :useOfert, 'useOfert',

                        /* информационно-управляющие  */
                        :cardGraphicAbstract, 'graphicAbstract',
                        :accountGraphicAbstract, 'graphicAbstract',

                        :cardAmountDetail , 'cardAmount',
                        :cardAmountMainPage , 'cardAmount',

                        :accAmountDetail , 'accAmount',
                        :accAmountMainPage , 'accAmount',

                        :loansDetail , 'loans',
                        :loansDetailMainPage , 'loans',

                        :depoAccAmount, 'depoAccAmount',
                        :depoAccAmountDetail , 'depoAccAmount',
                        :depoAccAmountDetailMainPage , 'depoAccAmount',

                        :IMAccount, 'IMAccount',
                        :IMAccountDetail , 'IMAccount',
                        :IMAccountMainPage , 'IMAccount',

                        :printCard, 'printCard',
                        :printAccount, 'printAccount',

                        :autoPayment, 'autoPayment',
                        :longOffer, 'longOffer',

                        :confirmDocument, 'confirmOperation',
                        :confirmLogin, 'confirmOperation',
                        :confirmUserSettings, 'confirmOperation',
                        :confirmSetupSecurity, 'confirmOperation',
                        :confirmIndividualLimit, 'confirmOperation',
                        :confirmProductsSystemView, 'confirmOperation',
                        :confirmUserNotifications, 'confirmOperation',
                        :confirmUserNotificationsMail, 'confirmOperation',
                        :confirmTemplate, 'confirmOperation',
                        :confirmSmsTemplate, 'confirmOperation',

                        :saveSmsTemplate, 'saveSmsTemplate',
                        :preConfirmSmsTemplate, 'preConfirmSmsTemplate',
                        :viewSmsTemplate, 'viewSmsTemplate',
                        :removeSmsTemplate, 'removeSmsTemplate',

                        :choiceLoanProduct, 'choiceLoanProduct',
                        :choiceLoanCardProduct, 'choiceLoanCardProduct',
                        :choiceLoanOffer, 'choiceLoanOffer',
                        :choiceLoanCardOffer, 'choiceLoanCardOffer',
                        :choiceServiceProvider, 'choiceServiceProvider',

                        :saveMail, 'saveMail',

                        :fnsPaymentSave, 'FNSPaymentSave'

                    ) description,
                    count(usrlog.DESCRIPTION_KEY) counts,
                    usrs.DEPARTMENT_ID	department_id,
                    decode(usrlog.SUCCESS, 'E',count(usrlog.SUCCESS), 0) count_error,
                    decode(times.ex_time, 'fast',count(times.ex_time), 0) small_time,
                    decode(times.ex_time, 'average',count(times.ex_time), 0) average_time,
                    decode(times.ex_time, 'slow',count(times.ex_time), 0) long_time
                FROM userlog usrlog LEFT JOIN
                        (SELECT ID,
                            CASE
                                WHEN EXECUTION_TIME<:minTime  THEN 'fast'
                                WHEN EXECUTION_TIME>=:minTime AND  EXECUTION_TIME<=:maxTime THEN 'average'
                                WHEN EXECUTION_TIME>:maxTime  THEN 'slow'
                            END ex_time
                        FROM userlog) times  ON usrlog.id = times.id
                LEFT JOIN USERS usrs on  usrs.LOGIN_ID  = usrlog.LOGIN_ID
                WHERE usrlog.START_DATE between :startDate and :endDate
						and  usrlog.APPLICATION = :application
                GROUP BY usrlog.DESCRIPTION_KEY, usrs.DEPARTMENT_ID, usrlog.SUCCESS, times.ex_time

                union all

                SELECT decode(usrlog.DESCRIPTION_KEY,
                            :confirmLogin, 'confirmLogin',
                            :confirmSmsTemplate, 'confirmSmsTemplate',

                            :showLongOffer, 'showLongOffer',
                            :saveLongOfferName, 'saveLongOfferName'

                        ) description,
                        count(usrlog.DESCRIPTION_KEY) counts,
                        usrs.DEPARTMENT_ID	department_id,
                        decode(usrlog.SUCCESS, 'E',count(usrlog.SUCCESS), 0) count_error,
                        decode(times.ex_time, 'fast',count(times.ex_time), 0) small_time,
                        decode(times.ex_time, 'average',count(times.ex_time), 0) average_time,
                        decode(times.ex_time, 'slow',count(times.ex_time), 0) long_time
                    FROM userlog usrlog LEFT JOIN
                            (SELECT ID,
                                CASE
                                    WHEN EXECUTION_TIME<:minTime  THEN 'fast'
                                    WHEN EXECUTION_TIME>=:minTime AND  EXECUTION_TIME<=:maxTime THEN 'average'
                                    WHEN EXECUTION_TIME>:maxTime  THEN 'slow'
                                END ex_time
                            FROM userlog) times  ON usrlog.id = times.id
                LEFT JOIN USERS usrs on  usrs.LOGIN_ID  = usrlog.LOGIN_ID
                WHERE usrlog.START_DATE between :startDate and :endDate
                            and  usrlog.APPLICATION = :application
                GROUP BY usrlog.DESCRIPTION_KEY, usrs.DEPARTMENT_ID, usrlog.SUCCESS, times.ex_time

                union all

                SELECT
                    desc_key.descr description,
                    count(desc_key.descr) counts,
                    usrs.DEPARTMENT_ID	department_id,
                    decode(usrlog.SUCCESS, 'E',count(usrlog.SUCCESS), 0) count_error,
                    decode(times.ex_time, 'fast',count(times.ex_time), 0) small_time,
                    decode(times.ex_time, 'average',count(times.ex_time), 0) average_time,
                    decode(times.ex_time, 'slow',count(times.ex_time), 0) long_time
                    FROM  (SELECT ID,
                              CASE
                                  WHEN  description_key = :accountOperation AND parameters like '%sel=c:%'   THEN 'cardOperation'
                                  WHEN  description_key = :accountOperation AND parameters like '%sel=a:%'   THEN 'accountOperation'
                                  WHEN  description_key = :saveDocument and parameters   like :createAutoPayment THEN 'autoPaymentSave'
                                  WHEN  description_key = :confirmSMS and parameters   like :createAutoPayment THEN  'autoPaymentChangeToSMS'
                                  WHEN  description_key = :confirmDocument and parameters   like :createAutoPayment THEN  'autoPaymentConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :createAutoPayment THEN 'autoPaymentView'

                                  WHEN  description_key = :saveDocument and parameters   like :createLongOffer THEN 'longOfferSave'
                                  WHEN  description_key = :confirmSMS and parameters   like :createLongOffer THEN  'longOfferPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :createLongOffer THEN  'longOfferConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :createLongOffer THEN 'longOfferView'

                                  WHEN  description_key = :saveDocument and parameters    like :refuseLongOfferClaim THEN  'refuseLongOfferClaimSave'
                                  WHEN  description_key = :confirmSMS and parameters      like :refuseLongOfferClaim THEN  'refuseLongOfferClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters like :refuseLongOfferClaim THEN  'refuseLongOfferClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters    like :refuseLongOfferClaim THEN  'refuseLongOfferClaimView'

                                  WHEN  description_key = :saveDocument and parameters    like :refuseAutoPayment THEN  'refuseAutoPaymentSave'
                                  WHEN  description_key = :confirmSMS and parameters      like :refuseAutoPayment THEN  'refuseAutoPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters like :refuseAutoPayment THEN  'refuseAutoPaymentConfirm'
                                  WHEN  description_key = :viewDocument and parameters    like :refuseAutoPayment THEN  'refuseAutoPaymentView'

                                  WHEN  description_key = :saveDocument and parameters    like :editAutoPayment THEN  'editAutoPaymentSave'
                                  WHEN  description_key = :confirmSMS and parameters      like :editAutoPayment THEN  'editAutoPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters like :editAutoPayment THEN  'editAutoPaymentConfirm'
                                  WHEN  description_key = :viewDocument and parameters    like :editAutoPayment THEN  'editAutoPaymentView'

                                  WHEN  description_key = :saveDocument and parameters   like :lossPassbookApplication THEN 'lossPassbookApplicationSave'
                                  WHEN  description_key = :confirmSMS and parameters   like :lossPassbookApplication THEN  'lossPassbookApplicationPreConfirm'
                                  WHEN  description_key = :confirmCard and parameters   like :lossPassbookApplication THEN  'lossPassbookApplicationPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :lossPassbookApplication THEN  'lossPassbookApplicationConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :lossPassbookApplication THEN 'lossPassbookApplicationView'

                                  WHEN  description_key = :saveDocument    and parameters   like :rurPaymentExtAcc  and parameters   like :rurPayment THEN  'rurPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :rurPaymentExtAcc  and parameters   like :rurPayment THEN  'rurPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :rurPaymentExtAcc  and parameters   like :rurPayment THEN  'rurPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :rurPaymentExtAcc and parameters    like :rurPayment THEN  'rurPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :rurPaymentExtAcc and parameters    like :rurPayment THEN  'rurPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentView'

                                  WHEN  description_key = :confirmSMS      and parameters   like :jurPayment  and parameters   like :fnsPaymentParam THEN  'FNSPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :jurPayment  and parameters   like :fnsPaymentParam THEN  'FNSPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :jurPayment  and parameters   like :fnsPaymentParam THEN  'FNSPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :jurPayment  and parameters   like :fnsPaymentParam THEN  'FNSPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :internalTransferToCard  and parameters   like :internalTransfer THEN  'internalTransferToCardSave'
                                  WHEN  description_key = :confirm         and parameters   like :internalTransferToCard  and parameters   like :internalTransfer THEN  'internalTransferToCardPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :internalTransferToCard  and parameters   like :internalTransfer THEN  'internalTransferToCardConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :internalTransferToCard  and parameters   like :internalTransfer THEN  'internalTransferToCardView'

                                  WHEN  description_key = :editDocument    and parameters   like :accountOpeningPayment  THEN  'choiceAccount'
                                  WHEN  description_key = :saveDocument    and parameters   like :accountOpeningPayment  THEN  'accountOpeningPaymentSave'
                                  WHEN  description_key = :confirm         and parameters   like :accountOpeningPayment  THEN  'accountOpeningPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :accountOpeningPayment  THEN  'accountOpeningPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :accountOpeningPayment  THEN  'accountOpeningPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :LoanPayment  THEN  'loanPaymentSave'
                                  WHEN  description_key = :confirm         and parameters   like :LoanPayment  THEN  'loanPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :LoanPayment  THEN  'loanPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :LoanPayment  THEN  'loanPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :internalTransferToAccount  and parameters   like :internalTransfer THEN  'internalTransferToAccountSave'
                                  WHEN  description_key = :confirm         and parameters   like :internalTransferToAccount  and parameters   like :internalTransfer THEN  'internalTransferToAccountPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :internalTransferToAccount  and parameters   like :internalTransfer THEN  'internalTransferToAccountConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :internalTransferToAccount  and parameters   like :internalTransfer THEN  'internalTransferToAccountView'

                                  WHEN  description_key = :saveDocument    and parameters   like :accountClosingPayment THEN 'accountClosingPaymentSave'
                                  WHEN  description_key = :confirm         and parameters   like :accountClosingPayment THEN  'accountClosingPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :accountClosingPayment THEN  'accountClosingPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :accountClosingPayment THEN 'accountClosingPaymentView'

                                  WHEN  description_key = :saveTemplate       and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'saveTransferTemplate'
                                  WHEN  description_key = :confirmTemplateSMS and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'confirmTransferTemplateSMS'
                                  WHEN  description_key = :confirmTemplate    and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'confirmTransferTemplate'
                                  WHEN  description_key = :viewTemplate       and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'viewTransferTemplate'
                                  WHEN  description_key = :removeTemplate     and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'removeTransferTemplate'

                                  WHEN  description_key = :saveTemplate       and parameters   like :jurPayment THEN 'savePaymentTemplate'
                                  WHEN  description_key = :confirmTemplateSMS and parameters   like :jurPayment THEN 'confirmPaymentTemplateSMS'
                                  WHEN  description_key = :confirmTemplate    and parameters   like :jurPayment THEN 'confirmPaymentTemplate'
                                  WHEN  description_key = :viewTemplate       and parameters   like :jurPayment THEN 'viewPaymentTemplate'
                                  WHEN  description_key = :removeTemplate     and parameters   like :jurPayment THEN 'removePaymentTemplate'

                                  WHEN  description_key = :saveDocument and parameters   like :loanProductClaim THEN 'loanProductClaimSave'
                                  WHEN  description_key = :confirm and parameters   like :loanProductClaim THEN  'loanProductClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :loanProductClaim THEN  'loanProductClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :loanProductClaim THEN 'loanProductClaimView'

                                  WHEN  description_key = :saveDocument and parameters   like :loanCardProductClaim THEN 'loanCardProductClaimSave'
                                  WHEN  description_key = :confirm and parameters   like :loanCardProductClaim THEN  'loanCardProductClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :loanCardProductClaim THEN  'loanCardProductClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :loanCardProductClaim THEN 'loanCardProductClaimView'

                                  WHEN  description_key = :saveDocument and parameters   like :loanOfferClaim THEN 'loanOfferClaimSave'
                                  WHEN  description_key = :confirm and parameters   like :loanOfferClaim THEN  'loanOfferClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :loanOfferClaim THEN  'loanOfferClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :loanOfferClaim THEN 'loanOfferClaimView'

                                  WHEN  description_key = :saveDocument and parameters   like :loanCardOfferClaim THEN 'loanCardOfferClaimSave'
                                  WHEN  description_key = :confirm and parameters   like :loanCardOfferClaim THEN  'loanCardOfferClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :loanCardOfferClaim THEN  'loanCardOfferClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :loanCardOfferClaim THEN 'loanCardOfferClaimView'

                                  WHEN  description_key = :viewMail and parameters   like :sentMailDirection THEN 'sentMailView'
                                  WHEN  description_key = :viewMail and parameters   like :receivedMailDirection THEN 'receivedMailView'
                              END descr
                            FROM userlog
                        ) desc_key LEFT JOIN userlog usrlog on usrlog.id = desc_key.id
                    LEFT JOIN
                        (SELECT ID,
                            CASE
                                WHEN EXECUTION_TIME<:minTime  THEN 'fast'
                                WHEN EXECUTION_TIME>=:minTime AND  EXECUTION_TIME<=:maxTime THEN 'average'
                                WHEN EXECUTION_TIME>:maxTime  THEN 'slow'
                            END ex_time
                        FROM userlog) times  ON usrlog.id = times.id
                    left join USERS usrs on  usrs.LOGIN_ID  = usrlog.LOGIN_ID
                    WHERE usrlog.START_DATE between :startDate and :endDate
						and  usrlog.APPLICATION = :application
                GROUP BY desc_key.descr, usrs.DEPARTMENT_ID, usrlog.SUCCESS, times.ex_time

                ) operations,
                DEPARTMENTS tb

            WHERE  tb.id in (:ids)  AND tb.PARENT_DEPARTMENT is NULL
                AND (operations.department_id is null or operations.department_id  IN (
                    SELECT depsR.id
                    FROM DEPARTMENTS depsR
                    WHERE depsR.TB = tb.TB or ((tb.TB= 36 or tb.TB = 76) and (depsR.TB = 36 or depsR.TB = 76))   /* заплатка для магадана */
                 )) 
                 AND NOT operations.description IS NULL
            GROUP BY  tb.id, tb.tb, tb.name, operations.description
        ]]>
    </sql-query>

    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getProactiveMonitoringSBRF">
        <return-scalar column="description" type="string"/>
        <return-scalar column="count_operations" type="long"/>
        <return-scalar column="count_errors" type="long"/>
        <return-scalar column="small_time" type="long"/>
        <return-scalar column="average_time" type="long"/>
        <return-scalar column="long_time" type="long"/>

         <![CDATA[
            SELECT
                operations.description description,
                sum(operations.counts) count_operations,
                sum(operations.count_error) count_errors,
                sum(operations.small_time) small_time,
                sum(operations.average_time) average_time,
                sum(operations.long_time) long_time
            FROM
                (SELECT decode(usrlog.DESCRIPTION_KEY,
                        /* Вход в систему  */
                        :login, 'loginPage',

                        :internetSecurity, 'internetSecurity',
                        :clientAutentication, 'clientAutentication',
                        :loginDepartments, 'loginDepartments',
                        :useOfert, 'useOfert',

                        /* информационно-управляющие  */
                        :cardGraphicAbstract, 'graphicAbstract',
                        :accountGraphicAbstract, 'graphicAbstract',

                        :cardAmountDetail , 'cardAmount',
                        :cardAmountMainPage , 'cardAmount',

                        :accAmountDetail , 'accAmount',
                        :accAmountMainPage , 'accAmount',

                        :loansDetail , 'loans',
                        :loansDetailMainPage , 'loans',

                        :depoAccAmount, 'depoAccAmount',
                        :depoAccAmountDetail , 'depoAccAmount',
                        :depoAccAmountDetailMainPage , 'depoAccAmount',

                        :IMAccount, 'IMAccount',
                        :IMAccountDetail , 'IMAccount',
                        :IMAccountMainPage , 'IMAccount',

                        :printCard, 'printCard',
                        :printAccount, 'printAccount',

                        :autoPayment, 'autoPayment',
                        :longOffer, 'longOffer',

                        :confirmDocument, 'confirmOperation',
                        :confirmLogin, 'confirmOperation',
                        :confirmUserSettings, 'confirmOperation',
                        :confirmSetupSecurity, 'confirmOperation',
                        :confirmIndividualLimit, 'confirmOperation',
                        :confirmProductsSystemView, 'confirmOperation',
                        :confirmUserNotifications, 'confirmOperation',
                        :confirmUserNotificationsMail, 'confirmOperation',
                        :confirmTemplate, 'confirmOperation',
                        :confirmSmsTemplate, 'confirmOperation',

                        :saveSmsTemplate, 'saveSmsTemplate',
                        :preConfirmSmsTemplate, 'preConfirmSmsTemplate',
                        :viewSmsTemplate, 'viewSmsTemplate',
                        :removeSmsTemplate, 'removeSmsTemplate',

                        :choiceLoanProduct, 'choiceLoanProduct',
                        :choiceLoanCardProduct, 'choiceLoanCardProduct',
                        :choiceLoanOffer, 'choiceLoanOffer',
                        :choiceLoanCardOffer, 'choiceLoanCardOffer',
                        :choiceServiceProvider, 'choiceServiceProvider',

                        :saveMail, 'saveMail',

                        :fnsPaymentSave, 'FNSPaymentSave'                  

                    ) description,
                    count(usrlog.DESCRIPTION_KEY) counts,
                    decode(usrlog.SUCCESS, 'E',count(usrlog.SUCCESS), 0) count_error,
                    decode(times.ex_time, 'fast',count(times.ex_time), 0) small_time,
                    decode(times.ex_time, 'average',count(times.ex_time), 0) average_time,
                    decode(times.ex_time, 'slow',count(times.ex_time), 0) long_time
                FROM userlog usrlog LEFT JOIN
                        (SELECT ID,
                            CASE
                                WHEN EXECUTION_TIME<:minTime  THEN 'fast'
                                WHEN EXECUTION_TIME>=:minTime AND  EXECUTION_TIME<=:maxTime THEN 'average'
                                WHEN EXECUTION_TIME>:maxTime  THEN 'slow'
                            END ex_time
                        FROM userlog) times  ON usrlog.id = times.id
                WHERE usrlog.START_DATE between :startDate and :endDate
						and  usrlog.APPLICATION = :application
                GROUP BY usrlog.DESCRIPTION_KEY, usrlog.SUCCESS, times.ex_time

                union all

                SELECT decode(usrlog.DESCRIPTION_KEY,
                            :confirmLogin, 'confirmLogin',
                            :confirmSmsTemplate, 'confirmSmsTemplate',

                            :showLongOffer, 'showLongOffer',
                            :saveLongOfferName, 'saveLongOfferName'

                        ) description,
                        count(usrlog.DESCRIPTION_KEY) counts,
                        decode(usrlog.SUCCESS, 'E',count(usrlog.SUCCESS), 0) count_error,
                        decode(times.ex_time, 'fast',count(times.ex_time), 0) small_time,
                        decode(times.ex_time, 'average',count(times.ex_time), 0) average_time,
                        decode(times.ex_time, 'slow',count(times.ex_time), 0) long_time
                    FROM userlog usrlog LEFT JOIN
                            (SELECT ID,
                                CASE
                                    WHEN EXECUTION_TIME<:minTime  THEN 'fast'
                                    WHEN EXECUTION_TIME>=:minTime AND  EXECUTION_TIME<=:maxTime THEN 'average'
                                    WHEN EXECUTION_TIME>:maxTime  THEN 'slow'
                                END ex_time
                            FROM userlog) times  ON usrlog.id = times.id
                WHERE usrlog.START_DATE between :startDate and :endDate
                            and  usrlog.APPLICATION = :application
                GROUP BY usrlog.DESCRIPTION_KEY, usrlog.SUCCESS, times.ex_time

                union all

                SELECT
                    desc_key.descr description,
                    count(desc_key.descr) counts,
                    decode(usrlog.SUCCESS, 'E',count(usrlog.SUCCESS), 0) count_error,
                    decode(times.ex_time, 'fast',count(times.ex_time), 0) small_time,
                    decode(times.ex_time, 'average',count(times.ex_time), 0) average_time,
                    decode(times.ex_time, 'slow',count(times.ex_time), 0) long_time
                    FROM  (SELECT ID,
                              CASE
                                  WHEN  description_key = :accountOperation AND parameters like '%sel=c:%'   THEN 'cardOperation'
                                  WHEN  description_key = :accountOperation AND parameters like '%sel=a:%'   THEN 'accountOperation'
                                  WHEN  description_key = :saveDocument and parameters   like :createAutoPayment THEN 'autoPaymentSave'
                                  WHEN  description_key = :confirmSMS and parameters   like :createAutoPayment THEN  'autoPaymentChangeToSMS'
                                  WHEN  description_key = :confirmDocument and parameters   like :createAutoPayment THEN  'autoPaymentConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :createAutoPayment THEN 'autoPaymentView'

                                  WHEN  description_key = :saveDocument and parameters   like :createLongOffer THEN 'longOfferSave'
                                  WHEN  description_key = :confirmSMS and parameters   like :createLongOffer THEN  'longOfferPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :createLongOffer THEN  'longOfferConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :createLongOffer THEN 'longOfferView'

                                  WHEN  description_key = :saveDocument and parameters    like :refuseLongOfferClaim THEN  'refuseLongOfferClaimSave'
                                  WHEN  description_key = :confirmSMS and parameters      like :refuseLongOfferClaim THEN  'refuseLongOfferClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters like :refuseLongOfferClaim THEN  'refuseLongOfferClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters    like :refuseLongOfferClaim THEN  'refuseLongOfferClaimView'

                                  WHEN  description_key = :saveDocument and parameters    like :refuseAutoPayment THEN  'refuseAutoPaymentSave'
                                  WHEN  description_key = :confirmSMS and parameters      like :refuseAutoPayment THEN  'refuseAutoPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters like :refuseAutoPayment THEN  'refuseAutoPaymentConfirm'
                                  WHEN  description_key = :viewDocument and parameters    like :refuseAutoPayment THEN  'refuseAutoPaymentView'

                                  WHEN  description_key = :saveDocument and parameters    like :editAutoPayment THEN  'editAutoPaymentSave'
                                  WHEN  description_key = :confirmSMS and parameters      like :editAutoPayment THEN  'editAutoPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters like :editAutoPayment THEN  'editAutoPaymentConfirm'
                                  WHEN  description_key = :viewDocument and parameters    like :editAutoPayment THEN  'editAutoPaymentView'

                                  WHEN  description_key = :saveDocument and parameters   like :lossPassbookApplication THEN 'lossPassbookApplicationSave'
                                  WHEN  description_key = :confirmSMS and parameters   like :lossPassbookApplication THEN  'lossPassbookApplicationPreConfirm'
                                  WHEN  description_key = :confirmCard and parameters   like :lossPassbookApplication THEN  'lossPassbookApplicationPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :lossPassbookApplication THEN  'lossPassbookApplicationConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :lossPassbookApplication THEN 'lossPassbookApplicationView'

                                  WHEN  description_key = :saveDocument    and parameters   like :rurPaymentExtAcc  and parameters   like :rurPayment THEN  'rurPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :rurPaymentExtAcc  and parameters   like :rurPayment THEN  'rurPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :rurPaymentExtAcc  and parameters   like :rurPayment THEN  'rurPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :rurPaymentExtAcc and parameters    like :rurPayment THEN  'rurPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :rurPaymentExtAcc and parameters    like :rurPayment THEN  'rurPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :taxPaymentParam  and parameters   like :rurPayment THEN  'taxPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :depoPaymentParam  and parameters   like :rurPayment THEN  'depoPaymentView'

                                  WHEN  description_key = :confirmSMS      and parameters   like :jurPayment  and parameters   like :fnsPaymentParam THEN  'FNSPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :jurPayment  and parameters   like :fnsPaymentParam THEN  'FNSPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :jurPayment  and parameters   like :fnsPaymentParam THEN  'FNSPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :jurPayment  and parameters   like :fnsPaymentParam THEN  'FNSPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :jurPayment  and parameters   like :isBillingPayment THEN  'billingPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentSave'
                                  WHEN  description_key = :confirmSMS      and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentPreConfirm'
                                  WHEN  description_key = :confirmCard     and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :rurPayment  and parameters   like :isJurPayment THEN  'notBillingPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :internalTransferToCard  and parameters   like :internalTransfer THEN  'internalTransferToCardSave'
                                  WHEN  description_key = :confirm         and parameters   like :internalTransferToCard  and parameters   like :internalTransfer THEN  'internalTransferToCardPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :internalTransferToCard  and parameters   like :internalTransfer THEN  'internalTransferToCardConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :internalTransferToCard  and parameters   like :internalTransfer THEN  'internalTransferToCardView'

                                  WHEN  description_key = :editDocument    and parameters   like :accountOpeningPayment  THEN  'choiceAccount'
                                  WHEN  description_key = :saveDocument    and parameters   like :accountOpeningPayment  THEN  'accountOpeningPaymentSave'
                                  WHEN  description_key = :confirm         and parameters   like :accountOpeningPayment  THEN  'accountOpeningPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :accountOpeningPayment  THEN  'accountOpeningPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :accountOpeningPayment  THEN  'accountOpeningPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :LoanPayment  THEN  'loanPaymentSave'
                                  WHEN  description_key = :confirm         and parameters   like :LoanPayment  THEN  'loanPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :LoanPayment  THEN  'loanPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :LoanPayment  THEN  'loanPaymentView'

                                  WHEN  description_key = :saveDocument    and parameters   like :internalTransferToAccount  and parameters   like :internalTransfer THEN  'internalTransferToAccountSave'
                                  WHEN  description_key = :confirm         and parameters   like :internalTransferToAccount  and parameters   like :internalTransfer THEN  'internalTransferToAccountPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :internalTransferToAccount  and parameters   like :internalTransfer THEN  'internalTransferToAccountConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :internalTransferToAccount  and parameters   like :internalTransfer THEN  'internalTransferToAccountView'

                                  WHEN  description_key = :saveDocument    and parameters   like :accountClosingPayment THEN 'accountClosingPaymentSave'
                                  WHEN  description_key = :confirm         and parameters   like :accountClosingPayment THEN  'accountClosingPaymentPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :accountClosingPayment THEN  'accountClosingPaymentConfirm'
                                  WHEN  description_key = :viewDocument    and parameters   like :accountClosingPayment THEN 'accountClosingPaymentView'

                                  WHEN  description_key = :saveTemplate       and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'saveTransferTemplate'
                                  WHEN  description_key = :confirmTemplateSMS and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'confirmTransferTemplateSMS'
                                  WHEN  description_key = :confirmTemplate    and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'confirmTransferTemplate'
                                  WHEN  description_key = :viewTemplate       and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'viewTransferTemplate'
                                  WHEN  description_key = :removeTemplate     and (parameters   like :rurPayment or parameters like :internalTransfer) THEN 'removeTransferTemplate'

                                  WHEN  description_key = :saveTemplate       and parameters   like :jurPayment THEN 'savePaymentTemplate'
                                  WHEN  description_key = :confirmTemplateSMS and parameters   like :jurPayment THEN 'confirmPaymentTemplateSMS'
                                  WHEN  description_key = :confirmTemplate    and parameters   like :jurPayment THEN 'confirmPaymentTemplate'
                                  WHEN  description_key = :viewTemplate       and parameters   like :jurPayment THEN 'viewPaymentTemplate'
                                  WHEN  description_key = :removeTemplate     and parameters   like :jurPayment THEN 'removePaymentTemplate'

                                  WHEN  description_key = :saveDocument and parameters   like :loanProductClaim THEN 'loanProductClaimSave'
                                  WHEN  description_key = :confirm and parameters   like :loanProductClaim THEN  'loanProductClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :loanProductClaim THEN  'loanProductClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :loanProductClaim THEN 'loanProductClaimView'

                                  WHEN  description_key = :saveDocument and parameters   like :loanCardProductClaim THEN 'loanCardProductClaimSave'
                                  WHEN  description_key = :confirm and parameters   like :loanCardProductClaim THEN  'loanCardProductClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :loanCardProductClaim THEN  'loanCardProductClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :loanCardProductClaim THEN 'loanCardProductClaimView'

                                  WHEN  description_key = :saveDocument and parameters   like :loanOfferClaim THEN 'loanOfferClaimSave'
                                  WHEN  description_key = :confirm and parameters   like :loanOfferClaim THEN  'loanOfferClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :loanOfferClaim THEN  'loanOfferClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :loanOfferClaim THEN 'loanOfferClaimView'

                                  WHEN  description_key = :saveDocument and parameters   like :loanCardOfferClaim THEN 'loanCardOfferClaimSave'
                                  WHEN  description_key = :confirm and parameters   like :loanCardOfferClaim THEN  'loanCardOfferClaimPreConfirm'
                                  WHEN  description_key = :confirmDocument and parameters   like :loanCardOfferClaim THEN  'loanCardOfferClaimConfirm'
                                  WHEN  description_key = :viewDocument and parameters   like :loanCardOfferClaim THEN 'loanCardOfferClaimView'

                                  WHEN  description_key = :viewMail and parameters   like :sentMailDirection THEN 'sentMailView'
                                  WHEN  description_key = :viewMail and parameters   like :receivedMailDirection THEN 'receivedMailView'
                              END descr
                            FROM userlog
                        ) desc_key LEFT JOIN userlog usrlog on usrlog.id = desc_key.id
                    LEFT JOIN
                        (SELECT ID,
                            CASE
                                WHEN EXECUTION_TIME<:minTime  THEN 'fast'
                                WHEN EXECUTION_TIME>=:minTime AND  EXECUTION_TIME<=:maxTime THEN 'average'
                                WHEN EXECUTION_TIME>:maxTime  THEN 'slow'
                            END ex_time
                        FROM userlog) times  ON usrlog.id = times.id
                    WHERE usrlog.START_DATE between :startDate and :endDate
						and  usrlog.APPLICATION = :application
                GROUP BY desc_key.descr, usrlog.SUCCESS, times.ex_time

                ) operations
            WHERE NOT operations.description IS NULL
            GROUP BY  operations.description
        ]]>
    </sql-query>

    <query name="com.rssl.phizic.business.ext.sbrf.reports.findByState">
        select report from com.rssl.phizic.business.ext.sbrf.reports.ReportAbstract report
        where report.state = :state
    </query>
                                                       
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getMinMaxStartDate">
    <return-scalar column="minmax" type="calendar"/>
    <![CDATA[
        select dates.dates minmax
        from
        (
	        select min(start_date) dates from userlog
	        union all
	        select max(start_date) dates from userlog
        ) dates
     ]]>
    </sql-query>

    <!--запрос на получение времени простоя за период по типам неработоспособности из таблиц MONITORING_SERVER_WORK_TIME и MONITORING_SERVER_IDLE_TIME (полная неработосп./ не работал джоб)-->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getFullAndJobIdleTime">
    <return-scalar column="dStart"  type="calendar"/>
    <return-scalar column="dFinish" type="calendar"/>
    <return-scalar column="type"    type="string"/>
    <![CDATA[
        WITH IDLETIMES AS
        (
            SELECT workTime.SERVER_ID serverId, :startDate startDate, workTime.START_DATE endDate, 'fullIdle' type
            FROM MONITORING_SERVER_WORK_TIME workTime
            WHERE workTime.START_DATE BETWEEN :startDate AND :endDate

            UNION ALL

            SELECT workTime.SERVER_ID serverId, :startDate startDate, :endDate endDate, 'fullIdle' type
            FROM MONITORING_SERVER_WORK_TIME workTime
            WHERE workTime.END_DATE < :startDate

            UNION ALL

            SELECT  idleTime.SERVER_ID serverId,
                    CASE
                        WHEN idleTime.START_DATE BETWEEN :startDate AND :endDate  THEN idleTime.START_DATE
                        WHEN :startDate BETWEEN idleTime.START_DATE AND idleTime.END_DATE THEN :startDate
                    END startDate,

                    CASE
                        WHEN idleTime.END_DATE BETWEEN :startDate AND :endDate THEN idleTime.END_DATE
                        WHEN :endDate BETWEEN idleTime.START_DATE AND idleTime.END_DATE THEN :endDate
                    END endDate,
                    idleTime.TYPE type
            FROM MONITORING_SERVER_IDLE_TIME idleTime
            WHERE ( idleTime.START_DATE BETWEEN :startDate AND :endDate OR :startDate BETWEEN idleTime.START_DATE AND idleTime.END_DATE )

            UNION ALL

            SELECT workTime.SERVER_ID serverId, workTime.END_DATE startDate, :endDate endDate, 'fullIdle' type
            FROM MONITORING_SERVER_WORK_TIME workTime
            WHERE workTime.END_DATE BETWEEN :startDate AND :endDate

            UNION ALL

            SELECT workTime.SERVER_ID serverId, :startDate startDate, :endDate endDate, 'fullIdle' type
            FROM MONITORING_SERVER_WORK_TIME workTime
            WHERE workTime.START_DATE > :endDate
         )

         , POINTS As
         (
            SELECT startDate date_, type FROM IDLETIMES
            UNION
            SELECT endDate, Type FROM IDLETIMES
            ORDER BY date_
         )

         SELECT dStart, dFinish, type
         FROM
            (
             SELECT count(*) As count_, periods.Type As Type, periods.dStart As dStart, periods.dFinish As dFinish
             FROM
                (SELECT  points1.Type Type,
                         points1.date_ dStart,
                         (SELECT Min(points2.date_)
                          FROM
                             POINTS points2
                          WHERE
                             points2.date_>points1.date_ AND points2.Type=points1.Type) dFinish
                 FROM
                    POINTS points1
                ) periods
                INNER JOIN IDLETIMES idleTimes
                ON periods.dFinish <= idleTimes.endDate AND periods.dStart >= idleTimes.startDate and periods.Type=idleTimes.Type
                GROUP BY periods.Type, periods.dStart, periods.dFinish
                ORDER BY dStart, dFinish
            )
         WHERE count_= (select count(*) from (select distinct serverId from IDLETIMES))
     ]]>
    </sql-query>

    <!--запрос на получение времени простоя системы по данным из USERLOG за период по типам неработоспособности (полная неработосп./ частичная неработосп.)-->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getIdlesByUserOperations">
    <return-scalar column="dStart"  type="calendar"/>
    <return-scalar column="dFinish" type="calendar"/>
    <return-scalar column="type"    type="string"/>
    <![CDATA[
        WITH operationsInPeriod As
        (
             SELECT description_key, success, start_date
             FROM USERLOG
             WHERE application='PhizIC' and start_date between :currentStartDate and :currentEndDate
        )

        , operatInPeriodWithEndPoints As
        (
             SELECT * from operationsInPeriod

             /* добавляем строки последних предшествующих периоду (currentStartDate-currentEndDate) операций*/
             union

             SELECT description_key, success, :currentStartDate
             FROM
               (SELECT description_key, success, row_number() OVER (PARTITION BY description_key ORDER BY MAX(start_date) DESC) As rownumb
                FROM USERLOG
                WHERE
                    start_date > :startDate AND start_date < :currentStartDate
                    AND application='PhizIC'
                    AND description_key NOT IN  ( SELECT description_key FROM  operationsInPeriod WHERE start_date = :currentStartDate)
                GROUP BY description_key, success
               )
             WHERE rownumb=1

             /* добавляем строки первых после периода (currentStartDate-currentEndDate) операций*/
             union


             SELECT description_key, success, :currentEndDate
             FROM
               (SELECT description_key, success, row_number() over (PARTITION BY description_key ORDER BY MIN(start_date) ASC) As rownumb
                FROM USERLOG
                WHERE
                    start_date > :currentEndDate AND start_date < :endDate
                    AND application='PhizIC'
                    AND description_key NOT IN ( SELECT description_key FROM  operationsInPeriod WHERE start_date = :currentEndDate )
                GROUP BY description_key, success
               )
             WHERE rownumb=1
        )

        /*список периодов неработоспособности операций*/
        ,operationIdlePeriods As
        (
             SELECT description_key, min(time_lag) As dt_beg, max(time_lead) As dt_end
             FROM (
                   SELECT description_key, success,
                          lag(start_date, 1, CASE WHEN success='E' THEN :currentStartDate ELSE start_date END) OVER  (PARTITION BY description_key ORDER BY start_date) As time_lag,
                          lead(start_date, 1, CASE WHEN success='E' THEN :currentEndDate ELSE start_date END)  OVER (PARTITION BY description_key ORDER BY start_date) As time_lead,
                          row_number() over(PARTITION BY description_key, success ORDER BY start_date) - row_number() over(PARTITION BY description_key ORDER BY start_date) As tmp_id
                   FROM operatInPeriodWithEndPoints
                  )
             WHERE success = 'E'
             GROUP BY description_key, success, tmp_id
        )

        /*получение периодов частичного простоя системы*/
        SELECT dt_beg As dStart, dt_end As dFinish, 'partIdle' as type
        FROM
            ( SELECT dt_beg, row_number() OVER (ORDER BY dt_beg) As tmp_id
              FROM ( SELECT distinct dt_beg
                    FROM operationIdlePeriods s1
                    WHERE not exists ( SELECT null FROM operationIdlePeriods s2 WHERE s2.dt_beg < s1.dt_beg  AND s2.dt_end >= s1.dt_beg)
                  )
            ) startDates,

            ( SELECT dt_end, row_number() over(ORDER BY dt_end) As tmp_id
              FROM ( SELECT distinct dt_end
                     FROM operationIdlePeriods s1
                     WHERE not exists ( SELECT null FROM operationIdlePeriods s2 WHERE s2.dt_end > s1.dt_end AND s2.dt_beg <= s1.dt_end)
                   )
            ) endDates
        WHERE startDates.tmp_id = endDates.tmp_id
     ]]>
    </sql-query>

    <!--запрос на получение времени простоя системы по данным из SYSTEM_IDLE_ADDIT_REPORT-->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.getSystemIdleTime">
    <return-scalar column="dStart"  type="calendar"/>
    <return-scalar column="dFinish" type="calendar"/>
    <return-scalar column="type"    type="string"/>
    <![CDATA[
        WITH sysIdleAdditReportData As
        (
            SELECT * FROM SYSTEM_IDLE_ADDIT_REPORT
            WHERE report_id=:reportId
        )

        , periodsByTypes As
        (
            SELECT start_date, end_date, type1 As type
            FROM
                    (  SELECT tmp1.*, row_number() OVER (PARTITION BY type1 ORDER BY start_date) As tmp_id
                       FROM
                           ( SELECT distinct start_date, type As type1
                             FROM sysIdleAdditReportData s1
                             WHERE not exists ( SELECT null
                                                FROM sysIdleAdditReportData s2
                                                WHERE s2.start_date < s1.start_date AND s2.end_Date >= s1.start_date AND s2.type=s1.type
                                              )
                           ) tmp1
                    ) startDates,

                    (  SELECT tmp2.*, row_number() OVER (PARTITION BY type2 ORDER BY end_date) As tmp_id
                       FROM
                            (   SELECT distinct end_date, type As type2
                                FROM sysIdleAdditReportData s1
                                WHERE not exists ( SELECT null
                                                   FROM sysIdleAdditReportData s2
                                                   WHERE s2.end_date > s1.end_date AND s2.start_Date <= s1.end_date AND s2.type=s1.type
                                                 )
                            ) tmp2
                    ) endDates
            WHERE startDates.tmp_id = endDates.tmp_id AND startDates.type1 = endDates.type2 AND :startDate  is not null
        )

        , minPeriods As
        (
            SELECT dt, lead(dt) over (ORDER BY dt) As dt2
            FROM  ( SELECT start_date As dt FROM periodsByTypes
                    UNION
                    SELECT end_date FROM periodsByTypes
                  )
        )


        /*список периодов частичной неработоспособности*/
        SELECT s2.dt + INTERVAL '1' SECOND As dStart, s2.dt2 - INTERVAL '1' SECOND As dFinish, s1.type
        FROM minPeriods s2
        INNER JOIN periodsByTypes s1
                ON s2.dt >= s1.start_date
               AND s2.dt < s1.end_date
               AND s1.type='partIdle'
               AND not exists (SELECT null FROM periodsByTypes WHERE s2.dt >= start_date AND s2.dt<end_date AND type!='partIdle')

        UNION

        /*список периодов полной неработоспособности*/
        SELECT start_date As dStart, end_date As dFinish, type
        FROM periodsByTypes
        WHERE type='fullIdle'

        UNION

        /*список периодов неработоспособности джобов*/
        SELECT s2.dt As dStart, s2.dt2 As dFinish, s1.type
        FROM minPeriods s2
        INNER JOIN periodsByTypes s1
                ON s2.dt >= s1.start_date
               AND s2.dt < s1.end_date
               AND s1.type='jobIdle'
               AND not exists (SELECT null FROM periodsByTypes WHERE s2.dt >= start_date AND s2.dt<end_date AND type='fullIdle')
     ]]>
    </sql-query>


    <!--Запрос на получение данных для отчета о количестве сотрудников iOS на заданную дату-->
    <sql-query name="com.rssl.phizic.business.ext.sbrf.reports.CountIOSReport">
        <return-scalar column="department_id" type="long"/> <!--идентификатор департамента к которому относиться запись в USERLOG -->
        <return-scalar column="totalCount" type="long"/> <!--количество клиентов, для которых сделаны записи для данного департамента за всё время -->
        <return-scalar column="lastCount" type="long"/>  <!--количество клиентов, для которых сделаны записи для данного департамента за заданный промежуток -->
        <![CDATA[
            SELECT
                DEPARTMENT_ID   AS department_id,
                COUNT(LOGIN_ID) AS totalCount,
                COUNT(
                CASE
                    WHEN lastEnterDate > trunc(:startDate - :lastDayCount)
                    THEN 1
                    ELSE NULL
                END)  AS lastCount
            FROM
                (
                    SELECT
                        DEPARTMENT_ID,
                        LOGIN_ID,
                        MAX(START_DATE) AS lastEnterDate
                    FROM
                        USERLOG
                    WHERE
                        application IN (:applications)
                        AND
                        DESCRIPTION_KEY = :descriptionKey
                        AND
                        START_DATE < :startDate
                    GROUP BY
                        DEPARTMENT_ID,
                        LOGIN_ID
                )
            GROUP BY
                DEPARTMENT_ID
        ]]>
    </sql-query>
</hibernate-mapping>