// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.auth.csa.back.integration.ipas.generated;

import com.sun.xml.rpc.client.BasicService;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.*;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class IPASWS_SerializerRegistry implements SerializerConstants {
    public IPASWS_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping12 = registry.getTypeMapping(SOAP12Constants.NS_SOAP_ENCODING);
        TypeMapping mapping = registry.getTypeMapping(SOAPConstants.NS_SOAP_ENCODING);
        TypeMapping mapping2 = registry.getTypeMapping("");
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyAttRsType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.VerifyAttRsType_LiteralSerializer(type, "", ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.VerifyAttRsType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRsType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRsType_LiteralSerializer(type, "", ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRsType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "CommonRqType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.CommonRqType_InterfaceSOAPSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.CommonRqType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "GeneratePasswordRsType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.GeneratePasswordRsType_LiteralSerializer(type, "", ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.GeneratePasswordRsType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifySPRqType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.VerifySPRqType_LiteralSerializer(type, "", ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.VerifySPRqType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRqType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRqType_LiteralSerializer(type, "", ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRqType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "UserInfoType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.UserInfoType_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.UserInfoType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "CommonRsType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.CommonRsType_InterfaceSOAPSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.CommonRsType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifySIDRqType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.VerifySIDRqType_InterfaceSOAPSerializer(type, "", ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.VerifySIDRqType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyPasswordRqType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType_LiteralSerializer(type, "", ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType.class, type, serializer);
        }
        {
            QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyRsType");
            CombinedSerializer serializer = new com.rssl.auth.csa.back.integration.ipas.generated.VerifyRsType_LiteralSerializer(type, "", ENCODE_TYPE);
            registerSerializer(mapping2,com.rssl.auth.csa.back.integration.ipas.generated.VerifyRsType.class, type, serializer);
        }
        return registry;
    }
    
    private static void registerSerializer(TypeMapping mapping, java.lang.Class javaType, javax.xml.namespace.QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
