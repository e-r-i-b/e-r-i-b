// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.auth.csa.back.integration.ipas.generated;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class IPASWSSoap_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements com.rssl.auth.csa.back.integration.ipas.generated.IPASWSSoap {
    
    
    
    /*
     *  public constructor
     */
    public IPASWSSoap_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://localhost:12501/iPAS/WS");
    }
    
    
    /*
     *  implementation of verifyPassword
     */
    public com.rssl.auth.csa.back.integration.ipas.generated.VerifyRsType verifyPassword(java.lang.String STAN, java.lang.String userId, java.lang.String password)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(VerifyPassword_OPCODE);
            
            com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType _myVerifyPasswordRqType = new com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType();
            _myVerifyPasswordRqType.setSTAN(STAN);
            _myVerifyPasswordRqType.setUserId(userId);
            _myVerifyPasswordRqType.setPassword(password);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_VerifyPassword_VerifyPasswordRq_QNAME);
            _bodyBlock.setValue(_myVerifyPasswordRqType);
            _bodyBlock.setSerializer(ns1_myVerifyPasswordRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.openwaygroup.com/iPAS/WS/VerifyPassword");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.auth.csa.back.integration.ipas.generated.VerifyRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.auth.csa.back.integration.ipas.generated.VerifyRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.auth.csa.back.integration.ipas.generated.VerifyRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of prepareOTP
     */
    public com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRsType prepareOTP(java.lang.String STAN, java.lang.String userId)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(PrepareOTP_OPCODE);
            
            com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRqType _myPrepareOTPRqType = new com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRqType();
            _myPrepareOTPRqType.setSTAN(STAN);
            _myPrepareOTPRqType.setUserId(userId);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_PrepareOTP_PrepareOTPRq_QNAME);
            _bodyBlock.setValue(_myPrepareOTPRqType);
            _bodyBlock.setSerializer(ns1_myPrepareOTPRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.openwaygroup.com/iPAS/WS/PrepareOTP");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of generatePassword
     */
    public com.rssl.auth.csa.back.integration.ipas.generated.GeneratePasswordRsType generatePassword(java.lang.String STAN, java.lang.String userId, java.lang.String password)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(GeneratePassword_OPCODE);
            
            com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType _myVerifyPasswordRqType = new com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType();
            _myVerifyPasswordRqType.setSTAN(STAN);
            _myVerifyPasswordRqType.setUserId(userId);
            _myVerifyPasswordRqType.setPassword(password);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_GeneratePassword_GeneratePasswordRq_QNAME);
            _bodyBlock.setValue(_myVerifyPasswordRqType);
            _bodyBlock.setSerializer(ns1_myVerifyPasswordRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.openwaygroup.com/iPAS/WS/GeneratePassword");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.auth.csa.back.integration.ipas.generated.GeneratePasswordRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.auth.csa.back.integration.ipas.generated.GeneratePasswordRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.auth.csa.back.integration.ipas.generated.GeneratePasswordRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of verifyOTP
     */
    public com.rssl.auth.csa.back.integration.ipas.generated.VerifyAttRsType verifyOTP(java.lang.String STAN, java.lang.String SID, java.lang.String password)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(VerifyOTP_OPCODE);
            
            com.rssl.auth.csa.back.integration.ipas.generated.VerifySPRqType _myVerifySPRqType = new com.rssl.auth.csa.back.integration.ipas.generated.VerifySPRqType();
            _myVerifySPRqType.setSTAN(STAN);
            _myVerifySPRqType.setSID(SID);
            _myVerifySPRqType.setPassword(password);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_VerifyOTP_VerifyOTPRq_QNAME);
            _bodyBlock.setValue(_myVerifySPRqType);
            _bodyBlock.setSerializer(ns1_myVerifySPRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://www.openwaygroup.com/iPAS/WS/VerifyOTP");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.auth.csa.back.integration.ipas.generated.VerifyAttRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.auth.csa.back.integration.ipas.generated.VerifyAttRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.auth.csa.back.integration.ipas.generated.VerifyAttRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case VerifyPassword_OPCODE:
                _deserialize_VerifyPassword(bodyReader, deserializationContext, state);
                break;
            case PrepareOTP_OPCODE:
                _deserialize_PrepareOTP(bodyReader, deserializationContext, state);
                break;
            case GeneratePassword_OPCODE:
                _deserialize_GeneratePassword(bodyReader, deserializationContext, state);
                break;
            case VerifyOTP_OPCODE:
                _deserialize_VerifyOTP(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the VerifyPassword operation.
     */
    private void _deserialize_VerifyPassword(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myVerifyRsTypeObj =
            ns1_myVerifyRsType_LiteralSerializer.deserialize(ns1_VerifyPassword_VerifyPasswordRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_VerifyPassword_VerifyPasswordRs_QNAME);
        bodyBlock.setValue(myVerifyRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the PrepareOTP operation.
     */
    private void _deserialize_PrepareOTP(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myPrepareOTPRsTypeObj =
            ns1_myPrepareOTPRsType_LiteralSerializer.deserialize(ns1_PrepareOTP_PrepareOTPRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_PrepareOTP_PrepareOTPRs_QNAME);
        bodyBlock.setValue(myPrepareOTPRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the GeneratePassword operation.
     */
    private void _deserialize_GeneratePassword(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myGeneratePasswordRsTypeObj =
            ns1_myGeneratePasswordRsType_LiteralSerializer.deserialize(ns1_GeneratePassword_GeneratePasswordRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_GeneratePassword_GeneratePasswordRs_QNAME);
        bodyBlock.setValue(myGeneratePasswordRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the VerifyOTP operation.
     */
    private void _deserialize_VerifyOTP(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myVerifyAttRsTypeObj =
            ns1_myVerifyAttRsType_LiteralSerializer.deserialize(ns1_VerifyOTP_VerifyOTPRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_VerifyOTP_VerifyOTPRs_QNAME);
        bodyBlock.setValue(myVerifyAttRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected java.lang.String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public java.lang.String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public java.lang.String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(java.lang.String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myPrepareOTPRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRsType.class, ns1_PrepareOTPRsType_TYPE_QNAME);
        ns1_myVerifyAttRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.VerifyAttRsType.class, ns1_VerifyAttRsType_TYPE_QNAME);
        ns1_myGeneratePasswordRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.GeneratePasswordRsType.class, ns1_GeneratePasswordRsType_TYPE_QNAME);
        ns1_myVerifySPRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.VerifySPRqType.class, ns1_VerifySPRqType_TYPE_QNAME);
        ns1_myPrepareOTPRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRqType.class, ns1_PrepareOTPRqType_TYPE_QNAME);
        ns1_myVerifyPasswordRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType.class, ns1_VerifyPasswordRqType_TYPE_QNAME);
        ns1_myVerifyRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.VerifyRsType.class, ns1_VerifyRsType_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName _portName = new QName("http://www.openwaygroup.com/iPAS/WS", "iPASWSSoap");
    private static final int VerifyPassword_OPCODE = 0;
    private static final int PrepareOTP_OPCODE = 1;
    private static final int GeneratePassword_OPCODE = 2;
    private static final int VerifyOTP_OPCODE = 3;
    private static final javax.xml.namespace.QName ns1_VerifyPassword_VerifyPasswordRq_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyPasswordRq");
    private static final javax.xml.namespace.QName ns1_VerifyPasswordRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyPasswordRqType");
    private CombinedSerializer ns1_myVerifyPasswordRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifyPassword_VerifyPasswordRs_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyPasswordRs");
    private static final javax.xml.namespace.QName ns1_VerifyRsType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyRsType");
    private CombinedSerializer ns1_myVerifyRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_PrepareOTP_PrepareOTPRq_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRq");
    private static final javax.xml.namespace.QName ns1_PrepareOTPRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRqType");
    private CombinedSerializer ns1_myPrepareOTPRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_PrepareOTP_PrepareOTPRs_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRs");
    private static final javax.xml.namespace.QName ns1_PrepareOTPRsType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRsType");
    private CombinedSerializer ns1_myPrepareOTPRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_GeneratePassword_GeneratePasswordRq_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "GeneratePasswordRq");
    private static final javax.xml.namespace.QName ns1_GeneratePassword_GeneratePasswordRs_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "GeneratePasswordRs");
    private static final javax.xml.namespace.QName ns1_GeneratePasswordRsType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "GeneratePasswordRsType");
    private CombinedSerializer ns1_myGeneratePasswordRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifyOTP_VerifyOTPRq_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyOTPRq");
    private static final javax.xml.namespace.QName ns1_VerifySPRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifySPRqType");
    private CombinedSerializer ns1_myVerifySPRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifyOTP_VerifyOTPRs_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyOTPRs");
    private static final javax.xml.namespace.QName ns1_VerifyAttRsType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyAttRsType");
    private CombinedSerializer ns1_myVerifyAttRsType_LiteralSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "http://www.openwaygroup.com/iPAS/WS"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
