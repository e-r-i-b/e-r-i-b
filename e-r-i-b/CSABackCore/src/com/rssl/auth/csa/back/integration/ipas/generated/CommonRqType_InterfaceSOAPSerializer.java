// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.auth.csa.back.integration.ipas.generated;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;

public class CommonRqType_InterfaceSOAPSerializer extends InterfaceSerializerBase implements Initializable {
    private static final javax.xml.namespace.QName ns1_PrepareOTPRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRqType");
    private CombinedSerializer ns1_myPrepareOTPRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifyPasswordRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyPasswordRqType");
    private CombinedSerializer ns1_myVerifyPasswordRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifySPRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifySPRqType");
    private CombinedSerializer ns1_myVerifySPRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifySIDRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifySIDRqType");
    private CombinedSerializer ns1_myVerifySIDRqType_InterfaceSOAPSerializer;
    private CombinedSerializer ns1_myCommonRqType_LiteralSerializer;
    
    public CommonRqType_InterfaceSOAPSerializer(QName type, String encodingStyle, boolean encodeType) {
        super(type, encodeType, true, encodingStyle);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myPrepareOTPRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRqType.class, ns1_PrepareOTPRqType_TYPE_QNAME);
        ns1_myPrepareOTPRqType_LiteralSerializer = ns1_myPrepareOTPRqType_LiteralSerializer.getInnermostSerializer();
        ns1_myVerifyPasswordRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType.class, ns1_VerifyPasswordRqType_TYPE_QNAME);
        ns1_myVerifyPasswordRqType_LiteralSerializer = ns1_myVerifyPasswordRqType_LiteralSerializer.getInnermostSerializer();
        ns1_myVerifySPRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.VerifySPRqType.class, ns1_VerifySPRqType_TYPE_QNAME);
        ns1_myVerifySPRqType_LiteralSerializer = ns1_myVerifySPRqType_LiteralSerializer.getInnermostSerializer();
        ns1_myVerifySIDRqType_InterfaceSOAPSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.auth.csa.back.integration.ipas.generated.VerifySIDRqType.class, ns1_VerifySIDRqType_TYPE_QNAME);
        ns1_myVerifySIDRqType_InterfaceSOAPSerializer = ns1_myVerifySIDRqType_InterfaceSOAPSerializer.getInnermostSerializer();
        QName type = new QName("http://www.openwaygroup.com/iPAS/WS", "CommonRqType");
        CombinedSerializer interfaceSerializer = new com.rssl.auth.csa.back.integration.ipas.generated.CommonRqType_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
        ns1_myCommonRqType_LiteralSerializer = interfaceSerializer.getInnermostSerializer();
        if (ns1_myCommonRqType_LiteralSerializer instanceof Initializable) {
            ((Initializable)ns1_myCommonRqType_LiteralSerializer).initialize(registry);
        }
    }
    
    public java.lang.Object doDeserialize(javax.xml.namespace.QName name, XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        javax.xml.namespace.QName elementType = getType(reader);
        if (elementType != null && elementType.equals(ns1_myPrepareOTPRqType_LiteralSerializer.getXmlType())) {
            return ns1_myPrepareOTPRqType_LiteralSerializer.deserialize(name, reader, context);
        } else if (elementType != null && elementType.equals(ns1_myVerifyPasswordRqType_LiteralSerializer.getXmlType())) {
            return ns1_myVerifyPasswordRqType_LiteralSerializer.deserialize(name, reader, context);
        } else if (elementType != null && elementType.equals(ns1_myVerifySPRqType_LiteralSerializer.getXmlType())) {
            return ns1_myVerifySPRqType_LiteralSerializer.deserialize(name, reader, context);
        } else if (elementType != null && elementType.equals(ns1_myVerifySIDRqType_InterfaceSOAPSerializer.getXmlType())) {
            return ns1_myVerifySIDRqType_InterfaceSOAPSerializer.deserialize(name, reader, context);
        } else if (elementType == null || elementType.equals(ns1_myCommonRqType_LiteralSerializer.getXmlType())) {
            Object obj = ns1_myCommonRqType_LiteralSerializer.deserialize(name, reader, context);
            return obj;
        }
        throw new DeserializationException("soap.unexpectedElementType", new Object[] {"", elementType.toString()});
    }
    
    public void doSerializeInstance(java.lang.Object obj, javax.xml.namespace.QName name, SerializerCallback callback,
        XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.rssl.auth.csa.back.integration.ipas.generated.CommonRqType instance = (com.rssl.auth.csa.back.integration.ipas.generated.CommonRqType)obj;
        
        if (obj instanceof com.rssl.auth.csa.back.integration.ipas.generated.PrepareOTPRqType) {
            ns1_myPrepareOTPRqType_LiteralSerializer.serialize(obj, name, callback, writer, context);
        } else if (obj instanceof com.rssl.auth.csa.back.integration.ipas.generated.VerifyPasswordRqType) {
            ns1_myVerifyPasswordRqType_LiteralSerializer.serialize(obj, name, callback, writer, context);
        } else if (obj instanceof com.rssl.auth.csa.back.integration.ipas.generated.VerifySPRqType) {
            ns1_myVerifySPRqType_LiteralSerializer.serialize(obj, name, callback, writer, context);
        } else if (obj instanceof com.rssl.auth.csa.back.integration.ipas.generated.VerifySIDRqType) {
            ns1_myVerifySIDRqType_InterfaceSOAPSerializer.serialize(obj, name, callback, writer, context);
        } else {
            ns1_myCommonRqType_LiteralSerializer.serialize(obj, name, callback, writer, context);
        }
    }
}
