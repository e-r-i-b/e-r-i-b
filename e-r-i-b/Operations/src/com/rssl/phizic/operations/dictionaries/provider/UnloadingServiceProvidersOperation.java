package com.rssl.phizic.operations.dictionaries.provider;import com.rssl.phizic.business.BusinessException;import com.rssl.phizic.business.departments.DepartmentService;import com.rssl.phizic.business.dictionaries.offices.common.CodeImpl;import com.rssl.phizic.business.dictionaries.offices.extended.ExtendedCodeImpl;import com.rssl.phizic.business.dictionaries.payment.services.PaymentService;import com.rssl.phizic.business.dictionaries.payment.services.PaymentServiceService;import com.rssl.phizic.business.dictionaries.providers.AccountType;import com.rssl.phizic.business.dictionaries.providers.BillingProviderService;import com.rssl.phizic.business.dictionaries.providers.BillingServiceProvider;import com.rssl.phizic.business.dictionaries.providers.ServiceProviderState;import com.rssl.phizic.business.dictionaries.regions.Region;import com.rssl.phizic.business.dictionaries.synchronization.MultiBlockModeDictionaryHelper;import com.rssl.phizic.business.fields.FieldDescription;import com.rssl.phizic.common.types.RequisiteType;import com.rssl.phizic.context.MultiNodeEmployeeData;import com.rssl.phizic.dataaccess.common.counters.CounterException;import com.rssl.phizic.dataaccess.common.counters.CounterService;import com.rssl.phizic.dataaccess.common.counters.Counters;import com.rssl.phizic.dataaccess.hibernate.HibernateAction;import com.rssl.phizic.dataaccess.hibernate.HibernateExecutor;import com.rssl.phizic.gate.GateInfoService;import com.rssl.phizic.gate.GateSingleton;import com.rssl.phizic.gate.dictionaries.officies.Code;import com.rssl.phizic.gate.longoffer.autopayment.AlwaysAutoPayScheme;import com.rssl.phizic.gate.longoffer.autopayment.InvoiceAutoPayScheme;import com.rssl.phizic.gate.longoffer.autopayment.ThresholdAutoPayScheme;import com.rssl.phizic.gate.payments.systems.recipients.FieldDataType;import com.rssl.phizic.gate.payments.systems.recipients.FieldValidationRule;import com.rssl.phizic.logging.Constants;import com.rssl.phizic.logging.system.Log;import com.rssl.phizic.logging.system.PhizICLogFactory;import com.rssl.phizic.operations.OperationBase;import com.rssl.phizic.utils.DateHelper;import com.rssl.phizic.utils.StringHelper;import com.rssl.phizic.utils.xml.XmlHelper;import org.apache.commons.collections.CollectionUtils;import org.hibernate.Filter;import org.hibernate.Session;import org.hibernate.criterion.*;import org.w3c.dom.Document;import org.w3c.dom.Element;import java.util.*;import static com.rssl.phizic.common.types.documents.ServiceProvidersConstants.*;/** * @author khudyakov * @ created 27.07.2010 * @ $Author$ * @ $Revision$ */public class UnloadingServiceProvidersOperation extends OperationBase{	private static final DepartmentService departmentService = new DepartmentService();	private static final CounterService counterService = new CounterService();	private static final PaymentServiceService paymentServiceService = new PaymentServiceService();	private static final Log log = PhizICLogFactory.getLog(Constants.LOG_MODULE_CORE);	private static final String UNLOADING_DATA  = "%1$td.%1$tm.%1$tY";	private static final String DATA_POSTFIX    = ".xml";	private static final String NAME_DALIMITER  = "_";	private static final String DATA_DALIMITER  = "|";	private static final String ROOT    = "/";	private static final String FALSE_VALUE_OR_ZERO = "0";	private static final String TRUE_VALUE_OR_ONE = "1";	private static final String TWO = "2";	private static final GateInfoService gateInfoService = GateSingleton.getFactory().service(GateInfoService.class);	private List<BillingServiceProvider> source;    //выгружаемые поставщики	@Override	protected String getInstanceName()	{		return MultiBlockModeDictionaryHelper.getDBInstanceName();	}	/**	 * Инициализания	 *	 * @param providers   - список идент-в поставщиков услуг	 * @param services    - список идент-в предоставляемых услуг	 * @param departments - список идент-в департаментов	 * @param fromDate    - начальная дата	 * @param toDate      - конечная дата	 * @param useNotActiveProviders - использовать ли для выгрузки поставщиков со статусом обслуживание приостановлено	 */	public void initialize(final Long[] providers, final Long[] services, final Long[] departments, final Date fromDate, final Date toDate, final boolean useNotActiveProviders)			throws BusinessException	{		try		{			source = HibernateExecutor.getInstance(getInstanceName()).execute(new HibernateAction<List<BillingServiceProvider>>()			{				public List<BillingServiceProvider> run(Session session) throws Exception				{					MultiNodeEmployeeData employeeData = MultiBlockModeDictionaryHelper.getEmployeeData();					if(!employeeData.isAllTbAccess())					{						Filter filter = session.enableFilter("provider_filter_by_department");						filter.setParameter("employeeLoginId", employeeData.getLoginId());					}					DetachedCriteria detachedCriteria = DetachedCriteria.forClass(BillingServiceProvider.class)							.add(Expression.in("state", useNotActiveProviders ? new Enum[]{ServiceProviderState.ACTIVE, ServiceProviderState.NOT_ACTIVE, ServiceProviderState.MIGRATION} : new Enum[]{ServiceProviderState.ACTIVE, ServiceProviderState.MIGRATION}))							.add(Expression.between("creationDate", DateHelper.toCalendar(fromDate), DateHelper.toCalendar(toDate)));					if (providers.length != 0)						detachedCriteria.add(Expression.in("id", providers));					if (services.length  != 0)					{						DetachedCriteria subCriteria = DetachedCriteria.forClass(BillingProviderService.class)								.add(Restrictions.in("paymentService.id", services))								.setProjection(Projections.property("serviceProvider.id"));						detachedCriteria.add(Subqueries.propertyIn("id", subCriteria));					}					if (departments.length  != 0)						detachedCriteria.add(Expression.in("departmentId", departments));					//noinspection unchecked					return (List<BillingServiceProvider>) detachedCriteria.getExecutableCriteria(session).list();				}			});		}		catch (Exception e)		{			throw new BusinessException(e);		}	}	/**	 * @return список выгружаемых поставщиков	 */	public String getUnloadedData() throws BusinessException	{		if (source.isEmpty())			return null;		Collections.sort(source, new BillingServiceProviderComparator());		try		{			Document document = XmlHelper.getDocumentBuilder().newDocument();			Element  recipientListElement = document.createElement(RECIPIENT_LIST_FIELD);			recipientListElement.setAttribute("version",   "3.0");			recipientListElement.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");			document.appendChild(recipientListElement);			Element  partialLoadReplicationElement = document.createElement(PARTIAL_LOAD_REPLICATION_FIELD);			recipientListElement.appendChild(partialLoadReplicationElement);			Element updateLoadReplicationElement = document.createElement(UPDATE_REPLICATION_FIELD);			partialLoadReplicationElement.appendChild(updateLoadReplicationElement);			String nextBillingCode = null;			Element billingElement = null;			for (BillingServiceProvider provider : source)			{				String currentBillingCode = provider.getBilling().getCode();				if (!currentBillingCode.equals(nextBillingCode))				{					nextBillingCode = currentBillingCode;					billingElement  = document.createElement(BILLING_FIELD);					XmlHelper.appendSimpleElement(billingElement, PROVIDER_CODE_BS_FIELD, nextBillingCode);					updateLoadReplicationElement.appendChild(billingElement);					Element defaultValuesElement = document.createElement(DEFAULT_VALUES_FIELD);					billingElement.appendChild(defaultValuesElement);				}				Element recipientElement = document.createElement(PROVIDER_FIELD);				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_CODE_FIELD,    provider.getCode());				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_CODE_RECIPIENT_SBOL_FIELD, provider.getCodeRecipientSBOL());				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_STATE_FIELD,   String.valueOf(provider.getState().getValue()));				List<PaymentService> paymentServices = paymentServiceService.getServicesForProvider(provider.getId());				if (CollectionUtils.isNotEmpty(paymentServices))				{					Element paymentServicesElement = document.createElement(PROVIDER_GRP_SERVICES_FIELD);					for (PaymentService paymentService : paymentServices)						XmlHelper.appendSimpleElement(paymentServicesElement, PROVIDER_GRP_SERVICE_CODE_FIELD, paymentService.getSynchKey().toString());					recipientElement.appendChild(paymentServicesElement);				}				appendNullSaveString(recipientElement, PROVIDER_NAME_SERVICE_FIELD, provider.getNameService());				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_CODE_SERVICE_FIELD,   provider.getCodeService());				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_NAME_FIELD,    provider.getName());				appendNullSaveString(recipientElement, PROVIDER_ALIAS_FIELD,    provider.getAlias());				appendNullSaveString(recipientElement, PROVIDER_LEGAL_NAME_FIELD,   provider.getLegalName());				appendNullSaveString(recipientElement, PROVIDER_NAME_ON_BILL_FIELD, provider.getNameOnBill());				XmlHelper.appendSimpleElement(recipientElement,  PROVIDER_IS_PROPS_ONLINE_FIELD, booleanToString(provider.isPropsOnline()));				XmlHelper.appendSimpleElement(recipientElement,  PROVIDER_IS_BANK_DETAILS_FIELD, booleanToString(provider.isBankDetails()));				XmlHelper.appendSimpleElement(recipientElement,  PROVIDER_PLANING_FOR_DEACTIVATE, booleanToString(provider.getPlaningForDeactivate()));				if (provider.isBankDetails())				{					Element bankDetailsElement = document.createElement(PROVIDER_BANK_DETAILS);					appendNullSaveString(bankDetailsElement, PROVIDER_INN_FIELD,  provider.getINN());					appendNullSaveString(bankDetailsElement, PROVIDER_KPP_FIELD,  provider.getKPP());					appendNullSaveString(bankDetailsElement, PROVIDER_ACCOUNT_FIELD,  provider.getAccount());					appendNullSaveString(bankDetailsElement, PROVIDER_BIC_FIELD,  provider.getBIC());					appendNullSaveString(bankDetailsElement, PROVIDER_BANK_NAME_FIELD,  provider.getBankName());					appendNullSaveString(bankDetailsElement, PROVIDER_BANK_COR_ACCOUNT_FIELD,  provider.getCorrAccount());					recipientElement.appendChild(bankDetailsElement);				}				appendNullSaveString(recipientElement, VISIBLE_PAYMENTS_FOR_INTERNET_BANK, booleanToString(provider.isVisiblePaymentsForInternetBank()));				appendNullSaveString(recipientElement, VISIBLE_PAYMENTS_FOR_MAPI, booleanToString(provider.isVisiblePaymentsForMApi()));				appendNullSaveString(recipientElement, VISIBLE_PAYMENTS_FOR_ATM_API, booleanToString(provider.isVisiblePaymentsForAtmApi()));				appendNullSaveString(recipientElement, AVAILABLE_PAYMENTS_FOR_INTERNET_BANK, booleanToString(provider.isAvailablePaymentsForInternetBank()));				appendNullSaveString(recipientElement, AVAILABLE_PAYMENTS_FOR_MAPI, booleanToString(provider.isAvailablePaymentsForMApi()));				appendNullSaveString(recipientElement, AVAILABLE_PAYMENTS_FOR_ATM_API, booleanToString(provider.isAvailablePaymentsForAtmApi()));				appendNullSaveString(recipientElement, AVAILABLE_PAYMENTS_FOR_ERMB, booleanToString(provider.isAvailablePaymentsForErmb()));				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_PHONE_TO_CLIENT_FIELD, provider.getPhoneNumber());				if (provider.getSubType() != null)					XmlHelper.appendSimpleElement(recipientElement, SUB_TYPE_FIELD, provider.getSubType().toString());				XmlHelper.appendSimpleElement(recipientElement, COMMENT_FIELD,  provider.getDescription());				//если у поставщика услуг нет региона, то при репликации данные значения не должны взяться из полей по умолчанию,				//для этого оставляем пустой тег <Regions/>				Element regionsElement = document.createElement(REGIONS_FIELD);				if (provider.getRegions() != null)				{					for (Region region : provider.getRegions())					{						Element regionElement  = document.createElement(REGION_FIELD);						XmlHelper.appendSimpleElement(regionElement,    PROVIDER_CODE_REGION_FIELD, region.getSynchKey().toString());						regionsElement.appendChild(regionElement);					}				}				recipientElement.appendChild(regionsElement);				Element paymentRecipientElement  = document.createElement(PROVIDER_PAYMENT_RECIPIENT_FIELD);				XmlHelper.appendSimpleElement(paymentRecipientElement, PROVIDER_PAYMENT_CODE_OFFICE_FIELD, getDepartmentCode(departmentService.findById(provider.getDepartmentId(), getInstanceName()).getCode()));				XmlHelper.appendSimpleElement(paymentRecipientElement, PROVIDER_PAYMENT_ACCOUNT_FIELD, provider.getTransitAccount());				recipientElement.appendChild(paymentRecipientElement);				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_CODE_OFFICE_NSI_FIELD, provider.getNSICode());				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_ACCOUNT_TYPE_FIELD,    (provider.getAccountType() == AccountType.ALL) ? TWO : (provider.getAccountType() == AccountType.DEPOSIT) ? FALSE_VALUE_OR_ZERO : TRUE_VALUE_OR_ONE);				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_IS_FEDERAL_FIELD,  booleanToString(provider.isFederal()));				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_IS_DEBT_FIELD, booleanToString(provider.isDeptAvailable()));				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_IS_POPULAR_FIELD,  booleanToString(provider.isPopular()));				try				{					//если биллинговая система не умеет расчитывать комиссию					if (!gateInfoService.isPaymentCommissionAvailable(provider.getBilling()))					{						Element commissionElement = document.createElement(PROVIDER_COMMISSION_FIELD);						XmlHelper.appendSimpleElement(commissionElement, PROVIDER_MIN_COMMISSION_FIELD,  String.valueOf(provider.getMinComissionAmount()));						XmlHelper.appendSimpleElement(commissionElement, PROVIDER_MAX_COMMISSION_FIELD,  String.valueOf(provider.getMaxComissionAmount()));						XmlHelper.appendSimpleElement(commissionElement, PROVIDER_PERCENT_FIELD,  String.valueOf(provider.getComissionRate()));						recipientElement.appendChild(commissionElement);					}				}				catch (Exception e)				{					//недоступность шлюза не должна рушить репликацию.					log.error(e.getMessage(), e);				}				if (provider.isGround())				{					Element groundElement = document.createElement(PROVIDER_GROUND_FIELD);					XmlHelper.appendSimpleElement(groundElement, PROVIDER_IS_GROUND_FIELD,  booleanToString(provider.isGround()));					XmlHelper.appendSimpleElement(groundElement, PROVIDER_SEPARATOR1_FIELD,  provider.getAttrDelimiter());					XmlHelper.appendSimpleElement(groundElement, PROVIDER_SEPARATOR2_FIELD,  provider.getAttrValuesDelimiter());					recipientElement.appendChild(groundElement);				}				Element mobileBankElement = document.createElement(PROVIDER_MOBILE_BANK_FIELD);				XmlHelper.appendSimpleElement(mobileBankElement, PROVIDER_IS_MOBILE_BANK_FIELD, booleanToString(provider.isMobilebank()));				if (StringHelper.isNotEmpty(provider.getMobilebankCode()))					XmlHelper.appendSimpleElement(mobileBankElement, PROVIDER_MOBILE_BANK_CODE_FIELD,   provider.getMobilebankCode());				recipientElement.appendChild(mobileBankElement);				if (provider.getVersionAPI() != null)					XmlHelper.appendSimpleElement(recipientElement, PROVIDER_VERSION_API_FIELD, provider.getVersionAPI().toString());				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_IS_TEMPLATE_SUPPORTED, booleanToString(provider.isTemplateSupported()));				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_IS_BAR_SUPPORTED, booleanToString(provider.isBarSupported()));				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_IS_OFFLINE_AVAILABLE_FIELD, booleanToString(provider.isOfflineAvailable()));				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_IS_EDIT_PAYMENT_SUPPORTED, booleanToString(provider.isEditPaymentSupported()));				XmlHelper.appendSimpleElement(recipientElement, PROVIDER_IS_CREDIT_CARD_ACCESSIBLE, booleanToString(provider.isCreditCardSupported()));				if (provider.isAutoPaymentSupported() || provider.isAutoPaymentSupportedInApi() || provider.isAutoPaymentSupportedInATM() || provider.isAutoPaymentSupportedInERMB())				{					Element autoPaymentElement = document.createElement(PROVIDER_AUTO_PAYMENT_FIELD);					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_IS_AUTO_PAYMENT_FIELD,   booleanToString(provider.isAutoPaymentSupported()));					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_IS_AUTO_PAYMENT_IN_API,   booleanToString(provider.isAutoPaymentSupportedInApi()));					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_IS_AUTO_PAYMENT_IN_ATM,   booleanToString(provider.isAutoPaymentSupportedInATM()));					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_IS_AUTO_PAYMENT_IN_ERMB,   booleanToString(provider.isAutoPaymentSupportedInERMB()));					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_AUTO_PAYMENT_VISIBLE,          booleanToString(provider.isAutoPaymentVisible()));					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_AUTO_PAYMENT_VISIBLE_IN_API,   booleanToString(provider.isAutoPaymentVisibleInApi()));					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_AUTO_PAYMENT_VISIBLE_IN_ATM,   booleanToString(provider.isAutoPaymentVisibleInATM()));					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_AUTO_PAYMENT_VISIBLE_IN_ERMB,  booleanToString(provider.isAutoPaymentVisibleInERMB()));					XmlHelper.appendSimpleElement(autoPaymentElement, PROVIDER_IS_BANKOMAT_FIELD,   booleanToString(provider.isBankomatSupported()));					AlwaysAutoPayScheme alwaysAutoPayScheme = provider.getAlwaysAutoPayScheme();					if (alwaysAutoPayScheme != null)					{						Element autoPaymentAlwaysSchemElement = document.createElement(PROVIDER_AUTO_PAYMENT_ALWAYS_SCHEM_FIELD);						appendNullSaveString(autoPaymentAlwaysSchemElement, PROVIDER_AUTO_PAYMENT_ALWAYS_SCHEM_MIN_SUM_FIELD, StringHelper.getNullIfNull(alwaysAutoPayScheme.getMinSumAlways()));						appendNullSaveString(autoPaymentAlwaysSchemElement, PROVIDER_AUTO_PAYMENT_ALWAYS_SCHEM_MAX_SUM_FIELD, StringHelper.getNullIfNull(alwaysAutoPayScheme.getMaxSumAlways()));						appendNullSaveString(autoPaymentAlwaysSchemElement, PROVIDER_AUTO_PAYMENT_ALWAYS_SCHEM_CLIENT_HINT_FIELD, alwaysAutoPayScheme.getClientHint());						autoPaymentElement.appendChild(autoPaymentAlwaysSchemElement);					}					ThresholdAutoPayScheme thresholdAutoPayScheme = provider.getThresholdAutoPayScheme();					if (thresholdAutoPayScheme != null)					{						Element thresholdAutoPaySchemeElement = document.createElement(PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_FIELD);						appendNullSaveString(thresholdAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_MIN_SUM_FIELD, StringHelper.getNullIfNull(thresholdAutoPayScheme.getMinSumThreshold()));						appendNullSaveString(thresholdAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_MAX_SUM_FIELD, StringHelper.getNullIfNull(thresholdAutoPayScheme.getMaxSumThreshold()));						//у древних поставщиков может быть isInterval пустым						if (thresholdAutoPayScheme.isInterval() != null && thresholdAutoPayScheme.isInterval())						{							appendNullSaveString(thresholdAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_MIN_VALUE_FIELD, StringHelper.getNullIfNull(thresholdAutoPayScheme.getMinValueThreshold()));							appendNullSaveString(thresholdAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_MAX_VALUE_FIELD, StringHelper.getNullIfNull(thresholdAutoPayScheme.getMaxValueThreshold()));						}						else						{						    String limitValues = thresholdAutoPayScheme.getDiscreteValues();							if (limitValues != null)							{								Element thresholdLimitListElement = document.createElement(PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_LIMIT_LIST_FIELD);								String[] arrayLimitValues = limitValues.split("\\|");								for (String item : arrayLimitValues)									appendNullSaveString(thresholdLimitListElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_LIMIT_FIELD, item);								thresholdAutoPaySchemeElement.appendChild(thresholdLimitListElement);							}						}						if(thresholdAutoPayScheme.isAccessTotalMaxSum())						{							appendNullSaveString(thresholdAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_IS_ACCESS_TOTAL_AMOUNT_LIMIT_FIELD, booleanToString(Boolean.TRUE));							appendNullSaveString(thresholdAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_TOTAL_AMOUNT_LIMIT_FIELD, StringHelper.getNullIfNull(thresholdAutoPayScheme.getTotalMaxSum()));							appendNullSaveString(thresholdAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_TOTAL_AMOUNT_PERIOD_FIELD, StringHelper.getNullIfNull(thresholdAutoPayScheme.getPeriodMaxSum()));						}						appendNullSaveString(thresholdAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_THRESHOLD_SCHEM_CLIENT_HINT_FIELD, thresholdAutoPayScheme.getClientHint());						autoPaymentElement.appendChild(thresholdAutoPaySchemeElement);					}					InvoiceAutoPayScheme invoiceAutoPayScheme = provider.getInvoiceAutoPayScheme();					if (invoiceAutoPayScheme != null)					{						Element invoiceAutoPaySchemeElement = document.createElement(PROVIDER_AUTO_PAYMENT_INVOICE_SCHEM_FIELD);						appendNullSaveString(invoiceAutoPaySchemeElement, PROVIDER_AUTO_PAYMENT_INVOICE_SCHEM_CLIENT_HINT_FIELD, invoiceAutoPayScheme.getClientHint());						autoPaymentElement.appendChild(invoiceAutoPaySchemeElement);					}					recipientElement.appendChild(autoPaymentElement);				}				if (provider.getGroupRisk() != null)					appendNullSaveString(recipientElement, PROVIDER_GENERAL_GROUP_RISK_FIELD, provider.getGroupRisk().getName());				//дополнительные поля				List<FieldDescription> fieldDescriptions = provider.getFieldDescriptions();				if (CollectionUtils.isNotEmpty(fieldDescriptions))				{					Element attributesElement = document.createElement(ATTRIBUTES_FIELD);					for (FieldDescription field : fieldDescriptions)					{						Element attributeElement = document.createElement(ATTRIBUTE_FIELD);						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_NAME_BS_FIELD,    field.getExternalId());						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_NAME_VISIBLE_FIELD,   field.getName());						XmlHelper.appendSimpleElement(attributeElement, COMMENT_FIELD,  field.getHint());						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_DESCRIPTION_FIELD,    field.getDescription());						XmlHelper.appendSimpleElement(attributeElement, TYPE_FIELD, field.getType().toString());						Element attributeLengthElement = document.createElement(ATTRIBUTES_LENGTH_FIELD);						if (field.getMaxLength() != null)							XmlHelper.appendSimpleElement(attributeLengthElement, ATTRIBUTE_MAX_LENGTH_FIELD,   String.valueOf(field.getMaxLength()));						if (field.getMinLength() != null)							XmlHelper.appendSimpleElement(attributeLengthElement, ATTRIBUTE_MIN_LENGTH_FIELD,   String.valueOf(field.getMinLength()));						attributeElement.appendChild(attributeLengthElement);						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_IS_REQUIRED_FIELD, booleanToString(field.isRequired()));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_IS_EDITABLE_FIELD, booleanToString(field.isEditable()));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_IS_VISIBLE_FIELD,  booleanToString(field.isVisible()));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_IS_SUM_FIELD, booleanToString(field.isMainSum()));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_IS_KEY_FIELD, booleanToString(field.isKey()));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_DEFAULT_VALUE_FIELD, field.getDefaultValue());						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_VALUES_FIELD, field.getValuesAsString(DATA_DALIMITER));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_IS_FOR_BILL_FIELD,    booleanToString(field.isRequiredForBill()));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_INCLUDE_IN_SMS_FIELD, booleanToString(field.isRequiredForConformation()));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_SAVE_IN_TEMPLATE_FIELD,   booleanToString(field.isSaveInTemplate()));						XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_HIDE_IN_CONFIRMATION_FIELD,   booleanToString(field.isHideInConfirmation()));						if (field.getBusinessSubType() != null)							XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_BUSINESS_SUB_TYPE_FIELD,   field.getBusinessSubType().toString());						List<RequisiteType> requisiteTypes = field.getRequisiteTypes();						if (CollectionUtils.isNotEmpty(requisiteTypes))						{							Element requisiteTypesElement = document.createElement(ATTRIBUTE_REQUISITE_TYPES);							for (RequisiteType requisiteType : requisiteTypes)							{								XmlHelper.appendSimpleElement(requisiteTypesElement, ATTRIBUTE_REQUISITE_TYPE, requisiteType.getDescription());							}							attributeElement.appendChild(requisiteTypesElement);						}						if(FieldDataType.string == field.getType())							XmlHelper.appendSimpleElement(attributeElement, ATTRIBUTE_MASK_FIELD,   field.getMask());												if (FieldDataType.number == field.getType() && field.getNumberPrecision() != null)							appendNullSaveString(attributeElement, ATTRIBUTE_NUMBER_PRECISION_FIELD, field.getNumberPrecision().toString());						List<String> menu = field.getListValues();						if (CollectionUtils.isNotEmpty(menu))						{							Element menuElement = document.createElement(ATTRIBUTE_MENU_FIELD);							for (String item : menu)							{								XmlHelper.appendSimpleElement(menuElement, ATTRIBUTE_MENU_ITEM_FIELD, item);							}							attributeElement.appendChild(menuElement);						}						//валидаторы дополнительных полей						List<FieldValidationRule> fieldValidationRules = field.getFieldValidationRules();						if (CollectionUtils.isNotEmpty(fieldValidationRules))						{							Element validationRulesElement = document.createElement(VALIDATORS_FIELD);							for (FieldValidationRule validationRule : fieldValidationRules)							{								Element validationRuleElement = document.createElement(VALIDATOR_FIELD);								XmlHelper.appendSimpleElement(validationRuleElement, TYPE_FIELD, validationRule.getFieldValidationRuleType().toString());								XmlHelper.appendSimpleElement(validationRuleElement, VALIDATOR_MESSAGE_FIELD,   validationRule.getErrorMessage());								XmlHelper.appendSimpleElement(validationRuleElement, VALIDATOR_PARAMETER_FIELD, validationRule.getParameters() != null ? (String) validationRule.getParameters().get("REGEXP") : "");								validationRulesElement.appendChild(validationRuleElement);							}							attributeElement.appendChild(validationRulesElement);						}						attributesElement.appendChild(attributeElement);					}					recipientElement.appendChild(attributesElement);				}				billingElement.appendChild(recipientElement);			}			return XmlHelper.convertDomToText(document);		}		catch (Exception e)		{			throw new BusinessException(e);		}	}	private String getDepartmentCode(Code code)	{		StringBuffer depCode = new StringBuffer();		Map<String, String>  fields = code.getFields();		if (code instanceof CodeImpl)			depCode.append(StringHelper.getEmptyIfNull(fields.get("id")));		if (code instanceof ExtendedCodeImpl)		{			if (fields.size() > 0)				depCode.append(StringHelper.getEmptyIfNull(fields.get("region")));			if (fields.size() > 1)				depCode.append(DATA_DALIMITER).append(StringHelper.getEmptyIfNull(fields.get("branch")));			if (fields.size() > 2)				depCode.append(DATA_DALIMITER).append(StringHelper.getEmptyIfNull(fields.get("office")));		}		return StringHelper.getEmptyIfNull(depCode);	}	/**	 * @return - название файла выгрузки	 */	public String getFileName() throws BusinessException	{		try		{   StringBuffer result = new StringBuffer();			result.append(counterService.getNext(Counters.UNLOADING_NUMBER));			result.append(NAME_DALIMITER);			result.append(String.format(UNLOADING_DATA, Calendar.getInstance()));			result.append(DATA_POSTFIX);			return result.toString();		}		catch (CounterException e)		{			throw new BusinessException(e);		}	}	/**	 * по Т.З. тип Boolean в выгрузке имеет формат String(1),	 * toString() возвращает true, либо false	 * @param value - Boolean значение	 * @return - 0, 1	 */	private String booleanToString(Boolean value)	{		if (Boolean.TRUE == value)			return TRUE_VALUE_OR_ONE;		return FALSE_VALUE_OR_ZERO;	}	protected void appendNullSaveString(Element root, String tagName, String value)	{		if (value != null)		{			XmlHelper.appendSimpleElement(root, tagName, value);		}	}	private class BillingServiceProviderComparator implements Comparator<BillingServiceProvider>	{		public int compare(BillingServiceProvider o1, BillingServiceProvider o2)		{			return o1.getBilling().getCode().compareTo(o2.getBilling().getCode());		}	}}