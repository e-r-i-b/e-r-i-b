package com.rssl.phizic.operations.loanOffer.unloadOfferValue;import com.rssl.phizic.business.BusinessException;import com.rssl.phizic.business.NotFoundException;import com.rssl.phizic.business.dictionaries.departments.DepartmentsRecoding;import com.rssl.phizic.business.dictionaries.departments.DepartmentsRecordingService;import com.rssl.phizic.business.documents.AbstractPaymentDocument;import com.rssl.phizic.business.documents.GateExecutableDocument;import com.rssl.phizic.business.documents.payments.*;import com.rssl.phizic.business.ext.sbrf.dictionaries.offices.TBTimeZoneDictionary;import com.rssl.phizic.business.extendedattributes.ExtendedAttribute;import com.rssl.phizic.business.loanCardOffer.LoanCardOfferType;import com.rssl.phizic.common.types.transmiters.Pair;import com.rssl.phizic.dataaccess.common.counters.CounterException;import com.rssl.phizic.dataaccess.common.counters.CounterService;import com.rssl.phizic.dataaccess.common.counters.Counters;import com.rssl.phizic.dataaccess.hibernate.HibernateAction;import com.rssl.phizic.dataaccess.hibernate.HibernateExecutor;import com.rssl.phizic.operations.loanOffer.ClaimUnloadExceptoin;import com.rssl.phizic.operations.loanOffer.Constants;import com.rssl.phizic.operations.loanOffer.ProductKind;import com.rssl.phizic.operations.loanOffer.SpoobkDocumentHelper;import com.rssl.phizic.operations.tasks.UnloadPereodicalTaskOperationBase;import com.rssl.phizic.person.PersonDocument;import com.rssl.phizic.person.PersonDocumentType;import com.rssl.phizic.utils.DateHelper;import com.rssl.phizic.utils.StringHelper;import com.rssl.phizic.utils.files.FileHelper;import org.apache.commons.lang.StringUtils;import org.hibernate.Query;import java.io.*;import java.util.*;/** * User: Moshenko * Date: 17.06.2011 * Time: 11:30:46 * Операция выгрузка заявок на кредиты и кредитные карты */public abstract class UnloadOfferClaimOperationBase extends UnloadPereodicalTaskOperationBase{	private static final CounterService counterService = new CounterService();	private static final DepartmentsRecordingService recordingService = new DepartmentsRecordingService();	/**	 * получить имя выгружаемого файли  в формате type_DDMMV	 * @param kind строка идентифицирующая тип продукта (PR,PK,KK,KR)	 * @return	 * @throws BusinessException	 */	public String getFileName(String kind) throws  BusinessException	{		String ddmm = DateHelper.formatToDateToString(Calendar.getInstance());		String unloadProductNumber = "";		try		{			unloadProductNumber  = counterService.getNext(Counters.UNLOAD_PRODUCT_NUMBER).toString();		}		catch (CounterException e)		{			throw new  BusinessException(e);		};			 return kind +"_"+ddmm+unloadProductNumber;	}	/**	 * получаем лист с сформированными строками для выгрузки в файл	 * !ИСПОЛЬЗУЕТСЯ ТОЛЬКО В РУЧНОЙ ВЫГРУЗКЕ!	 * @param partList список выгружаемых сыщьностей 	 * @return спсок для выгрузки и ид документов по который сформирован список	 * @throws BusinessException	 */	public Pair<ArrayList<String>, Set<Long>> getUnloadedDataList(List<? extends GateExecutableDocument> partList) throws BusinessException	{		ArrayList<String>  entries = new ArrayList<String>();  // суда складываем набор строк бедующего файла	    getResult().setTotalResultCount(getResult().getTotalResultCount()+partList.size());		Set<Long> documentIds = new HashSet<Long>();		if (partList != null && !partList.isEmpty())		{			for (GateExecutableDocument loan: partList)			{				String str = "";				try				{					str = getUnloadedDataString(loan);					documentIds.add(loan.getId());				}				catch(ClaimUnloadExceptoin ex)				{					addReportError(ex.getMessage());				}				if (!StringHelper.isEmpty(str))				{					/*для ручной выгрузки символ переноси строки отрезаем*/					entries.add(str.split("[\\n]")[0]);					getResult().successRecordProcessed();				}			}						if (!this.isAuto)				entries.add(getFileName());			return new Pair(entries,documentIds);		}		return new Pair(new ArrayList<String>(),documentIds); 	}	/**	 * Формируем выгружаемую строку из безнес сущьности	 * @param document входной документ	 * @return результирующую строку	 * @throws ClaimUnloadExceptoin	 */	public String getUnloadedDataString(GateExecutableDocument document) throws ClaimUnloadExceptoin	{		if (document != null)		{			List<Value> values = new ArrayList<Value>();			boolean isLoanOffer = false;			boolean isLoanProduct = false;			boolean isShortClaim = false;			boolean isCardOffer = false;			boolean isCardProduct = false;			if (document  instanceof LoanOfferClaim)				isLoanOffer = true;			else if (document instanceof LoanProductClaim)				isLoanProduct = true;			else if (document instanceof ShortLoanClaim)				isShortClaim = true;			else if (document instanceof LoanCardOfferClaim ||					(document instanceof LoanCardClaim && ((LoanCardClaim)document).getPreapproved()))				isCardOffer = true;			else if (document instanceof LoanCardProductClaim ||					(document instanceof LoanCardClaim && !((LoanCardClaim)document).getPreapproved()))				isCardProduct = true;			if (isLoanOffer || isLoanProduct || isShortClaim)			{				values.add(new AttributeValue(document, Constants.TB));				values.add(new UIDValue(document));				values.add(new DateValue(document));				values.add(new AttributeValue(document, Constants.SUR_NAME));				values.add(new AttributeValue(document, Constants.FIRST_NAME));				values.add(new AttributeValue(document, Constants.PATR_NAME, false, 1));				values.add(new SimpleValue("", "", false, 1));// TODO разница с МСК				if (isShortClaim)				{					ShortLoanClaim shortLoan = (ShortLoanClaim) document;					values.add(new AttributeValue(document, Constants.PHONE_NUMBER));					values.add(new AttributeValue(document, Constants.JOB_LOCATION,false,1));					values.add(new AttributeValue(document, Constants.INCOME_PER_MONTH,false,1));					values.add(new AttributeValue(document, Constants.PRODUCT_TYPE_NAME,false,1));					values.add(new AttributeValue(document, Constants.PRODUCT_NAME,false,1));					values.add(new AttributeValue(document, Constants.LOAN_CURR));					values.add(new AttributeValue(document, Constants.LOAN_AMOUNT));					values.add(new AttributeValue(document, Constants.PERIOD));					values.add(new AttributeValue(document, Constants.PROC_ENABLED,false,1));				}				else if (isLoanOffer || isLoanProduct)				{					values.add(new AttributeValue(document, Constants.MOBILE_PHONE));					values.add(new AttributeValue(document, Constants.HIRER,false,1));					values.add(new AttributeValue(document, Constants.AV_INCOME_PER_MONTH,false,1));					if (isLoanOffer)					{						values.add(new AttributeValue(document, Constants.CREDIT_TYPE,false,1));						values.add(new SimpleValue("", "", false, 1)); //вид кредита					}					else if (isLoanProduct)					{						values.add(new AttributeValue(document, Constants.CREDIT_KIND,false,1));						values.add(new AttributeValue(document, Constants.CREDIT_TYPE,false,1));					}					values.add(new CurrencyValue((AbstractPaymentDocument)document));					values.add(new AmountValue((AbstractPaymentDocument)document,true));					values.add(new AttributeValue(document, Constants.DURATION));					values.add(new SimpleValue("", "", false, 1)); //Согласия клиента на обработку персональных данных				}			}			else if (isCardOffer)			{				values.add(new SimpleValue(Constants.LOAN_CARD_TYPE, Constants.FORM_TYPE));				values.add(new IdValue(document));				values.add(new DateValue(document));				rewriteVspAttributesToSpoobk(document);				values.add(new AttributeValue(document, Constants.TB));				values.add(new AttributeValue(document, Constants.OSB));				//выгружаем 0 если поле vsp пустое				ExtendedAttribute vsp = document.getAttribute(Constants.VSP);				Value vspValue;				if (vsp != null && !StringHelper.isEmpty(vsp.getStringValue()))					vspValue = new AttributeValue(document, Constants.VSP, false, 1);				else					vspValue = new SimpleValue("0", "");				values.add(vspValue);				values.add(new AttributeValue(document, Constants.TB));				values.add(new AttributeValue(document, Constants.OSB));				values.add(vspValue);				values.add(new AttributeValue(document, Constants.ID_WAY, false, 1));				values.add(new AttributeValue(document, Constants.SUR_NAME));				values.add(new AttributeValue(document, Constants.FIRST_NAME));				values.add(new AttributeValue(document, Constants.PATR_NAME, false, 1));				values.add(new SimpleValue(getDocumntSpoobkCod(document), ""));				if (document instanceof LoanCardOfferClaim)					values.add(new AttributeValue(document, Constants.PASSPORT_NUMBER,false,1));				else				{					LoanCardClaim loanCardClaim = (LoanCardClaim) document;					if (StringHelper.isNotEmpty(loanCardClaim.getOwnerIdCardSeries()))					{						values.add(new SimpleValue(loanCardClaim.getOwnerIdCardSeries() + " ", Constants.OWNER_ID_CARD_SERIES, true, 0));						values.add(new SimpleValue(loanCardClaim.getOwnerIdCardNumber() , Constants.OWNER_ID_CARD_NUMBER, true, 1));					}					else						values.add(new SimpleValue(loanCardClaim.getOwnerIdCardNumber(), Constants.OWNER_ID_CARD_NUMBER));				}				values.add(new AttributeValue(document, Constants.CARD_TYPE_CODE,false,1));				//Поле номер карты должно быть пустым при выгрузке акцепта на карту, т.к. карты еще не существует.				if (LoanCardOfferType.newCard.getValue().equals(document.getAttribute(Constants.OFFER_TYPE).getStringValue()))					values.add(new AttributeValue(document, Constants.OFFER_TYPE, false, 2));				else				{					values.add(new AttributeValue(document, Constants.OFFER_TYPE, false, 1));					values.add(new AttributeValue(document, Constants.CARD_NUMBER));				}				values.add(new AttributeValue(document, Constants.MOBILE_PHONE,false, 1));				values.add(new AttributeValue(document, Constants.HOME_PHONE, false, 1));				values.add(new AttributeValue(document, Constants.WORK_PHONE, false, 1));				values.add(new AttributeValue(document, Constants.ADD_PHONE_1, false, 1));				values.add(new AttributeValue(document, Constants.ADD_PHONE_2, false, 1));				values.add(new AttributeValue(document, Constants.EMAIL, false, 1));				if (LoanCardOfferType.changeLimit.getValue().equals(document.getAttribute(Constants.OFFER_TYPE).getStringValue()))    // для предложения на изменение лимита не нужно выодвить вид карты					values.add(new SimpleValue("", "", false, 1));				else					values.add(new AttributeValue(document, Constants.CREDIT_CARD));				addCardAmount(document, values);				values.add(new AttributeValue(document, Constants.INTEREST_RATE, false, 1));				values.add(new AttributeValue(document, Constants.FIRST_YEAR_SERVICE, false, 1));				values.add(new AttributeValue(document, Constants.FREE_TIME, false, 1));				values.add(new SimpleValue("", "", false, 0));//резервное поле без запятой в конце			}			else if (isCardProduct)			{				values.add(new UIDValue(document));				values.add(new DateTimeValue(document));				values.add(new AttributeValue(document, Constants.SUR_NAME));				values.add(new AttributeValue(document, Constants.FIRST_NAME));				values.add(new AttributeValue(document, Constants.PATR_NAME, false, 1));				values.add(new SimpleValue("", "", false, 1));   	//город пустое				ExtendedAttribute tb = document.getAttribute(Constants.TB);				if (tb != null)					values.add(new SimpleValue(TBTimeZoneDictionary.getTbTimeZone(tb.getStringValue()), Constants.TIME_ZONE, false, 1));   //разница с московским временем				else					values.add(new SimpleValue("", Constants.TIME_ZONE, false, 1));				values.add(new AttributeValue(document, Constants.MOBILE_PHONE,false, 1));				values.add(new AttributeValue(document, Constants.HOME_PHONE, false, 1));				values.add(new AttributeValue(document, Constants.WORK_PHONE, false, 1));				values.add(new AttributeValue(document, Constants.CREDIT_CARD));				addCardAmount(document, values);				values.add(new AttributeValue(document, Constants.FREE_TIME, false, 1));			}			StringBuilder sb = appendValueToData(values, document);			sb.append(Constants.DELIMITER);			if (sb.length() != 0)				return	sb.toString();			}			return new String();		}	protected String additionalFileUpdate(Pair<FileOutputStream, File> filePair)	{		InputStream inputStream = null;		InputStreamReader inputReader = null;		BufferedReader in = null;		File file = filePair.getSecond();		String name = file.getName() + Constants.CSV;		FileOutputStream fileOutputStream = null;		OutputStreamWriter outputStreamWriter = null;		BufferedWriter out = null;		try		{			String fullName = FileHelper.getCurrentFilePath(this.unloadDir,name);			fileOutputStream = new FileOutputStream(fullName);			outputStreamWriter = new OutputStreamWriter(fileOutputStream,getEncoding());			out = new BufferedWriter(outputStreamWriter);			inputStream = new FileInputStream(file);			inputReader = new InputStreamReader(inputStream, getEncoding());			in = new BufferedReader(inputReader);			String str;			 while ((str = in.readLine()) != null)			{				out.write(str);				out.write("\n");			}			out.flush();		}		catch (IOException e)		{			addReportError(Constants.CSV_PROCESS_ERROR,e);			return null;		}		finally		{			close(new Pair(out,null));			close(new Pair(fileOutputStream,null));			close(new Pair(outputStreamWriter,null));			close(new Pair(in,null));			close(new Pair(inputReader,null));			close(new Pair(inputStream,null));		}		return name;	}	protected  void finalFileAction(Pair<FileOutputStream,File> tempFilePair)	{		close(tempFilePair);	}	/**	 * Получить заявки указанного типа за указа м	 * @param dateFrom	 * @param dateTo	 * @param kind	 * @param nexPosition конечная  позиция выбора записей (null чтоб выбрать все)	 * @return	 * @throws BusinessException	 */	public List<? extends GateExecutableDocument> getLoan(final Calendar dateFrom, final Calendar dateTo, final ProductKind kind,final Integer nexPosition) throws BusinessException	{		String prefix = null;		switch (kind)		{			case LOAN_OFFER:				prefix = "loanOfferPaymentList";				break;			case LOAN_CARD_OFFER:				prefix = "loanCardOfferPaymentList";				break;			case LOAN_CARD_CLAIM:			case PREAPPROVED_LOAN_CARD_CLAIM:				prefix = "loanCardClaimPaymentList";				break;			case LOAN_PRODUCT:				prefix = "loanProductPaymentList";				break;			case LOAN_CARD_PRODUCT:				prefix = "loanCardProductPaymentList";				break;		}		try		{			final String nameQuery = "com.rssl.phizic.operations.loanOffer.unloadOfferValue.UnloadOfferClaimOperationBase." + prefix;			//транзакция используется в связи с запросом: BUG032930: Ошибка при выгрузки заявок на кредиты            //проблема возникновения ошибок при выполнении селектов через HQL, без использования транзакций решается в запросе BUG032949: Ошибка в работе Hibernate			return HibernateExecutor.getInstance().execute(new HibernateAction<List<? extends GateExecutableDocument>>()			{				public List<? extends GateExecutableDocument> run(org.hibernate.Session session) throws Exception				{					Query query = session.getNamedQuery(nameQuery);					query.setParameter("fromDate", dateFrom);					query.setParameter("toDate", dateTo);					if (kind == ProductKind.PREAPPROVED_LOAN_CARD_CLAIM)					{						query.setParameter("preaproved", "1");					}					if (kind == ProductKind.LOAN_CARD_CLAIM){						query.setParameter("preaproved", "0");					}					//если  позиции не указанны то возвращаем все					if (nexPosition!=null)					{						query.setMaxResults(nexPosition);					}					return query.list();				}			}			);		}		catch (Exception e)		{			throw new BusinessException(e);		}	}	private void addCardAmount(GateExecutableDocument document, List<Value> values)	{		if (!(document instanceof LoanCardClaim))		{			values.add(new CurrencyValue((AbstractPaymentDocument)document));			values.add(new AmountValue((AbstractPaymentDocument)document,true));		}		else		{			values.add(new SimpleValue(((LoanCardClaim) document).getDestinationAmount().getCurrency().getCode(), "Валюта"));			values.add(new SimpleValue(((LoanCardClaim) document).getDestinationAmount().getDecimal().intValue(), "Сумма"));		}	}	private StringBuilder appendValueToData(List<Value> values, GateExecutableDocument claim) throws ClaimUnloadExceptoin	{		StringBuilder sb = new StringBuilder(values.size());		for (Value value : values)		{			if (value.isMandatory() && value.isEmpty())			{				String errText  = "Заявка с Id = " + claim.getId() + " не выгружена, так как значение поля " +					value.getMessage() + " пустое";				throw new ClaimUnloadExceptoin(errText);			}			if (!value.isEmpty())				sb.append(value.getValue());			for (int j = 0; j < value.getCommaCount(); j++)				sb.append(Constants.COMMA_DELIMITER);		}		return sb;	}	protected String additionalResultStringUpdate(String str)	{		return str;	}	private String getDocumntSpoobkCod(GateExecutableDocument document) throws ClaimUnloadExceptoin	{		Set<PersonDocument> clientDocuments = Collections.emptySet();		try		{			clientDocuments = document.getOwner().getPerson().getPersonDocuments();		}		catch (BusinessException e)		{			throw new ClaimUnloadExceptoin(e);		}		String docNumber;		if (document instanceof  LoanCardClaim)		{			LoanCardClaim loanCardClaim = (LoanCardClaim) document;			docNumber = loanCardClaim.getOwnerIdCardNumber();		}		else		{			ExtendedAttribute passportNumber = document.getAttribute("passport-number");			if(passportNumber == null || StringHelper.isEmpty(passportNumber.getStringValue()))				throw new ClaimUnloadExceptoin("В заявке отсутствует атрибут passport-number клиента.");			String docSerAndNumber = passportNumber.getStringValue();			String[] docNumberAndNumberArr = StringUtils.split(docSerAndNumber);			docNumber = docNumberAndNumberArr[docNumberAndNumberArr.length-1];		}		if (StringUtils.isEmpty(docNumber))			throw new ClaimUnloadExceptoin("В заявке отсутствует номер документа");		PersonDocumentType docType = null;		for (PersonDocument doc : clientDocuments)		{			if (StringHelper.equalsIgnoreCaseStrip(doc.getDocumentNumber(), docNumber))			{				docType = doc.getDocumentType();				break;			}		}		String code = null;		try		{			code = SpoobkDocumentHelper.getSpoobkDocumentNumber(docType);		}		catch (NotFoundException e)		{			throw new ClaimUnloadExceptoin(e);		}		return code;	}	/**	 *	 * Заменяет тб, осб и всп офиса получения карты на соответствующие им в кодификации СПООБК2.	 *	 * @param  document	 * @throws ClaimUnloadExceptoin	 */	private void rewriteVspAttributesToSpoobk(GateExecutableDocument document) throws ClaimUnloadExceptoin	{		String tb     = document.getAttribute("tb").getStringValue();		String osb    = document.getAttribute("osb").getStringValue();		String office = document.getAttribute("vsp").getStringValue();		try		{			DepartmentsRecoding recording = recordingService.getDepartmentsRecodingByEribCodes(tb, osb, office);			if (recording == null)			{				return;			}			document.setAttributeValue("string", "tb",  recording.getTbSpoobk2());			document.setAttributeValue("string", "osb", recording.getOsbSpoobk2());			document.setAttributeValue("string", "vsp", recording.getOfficeSpoobk2());		}		catch (Exception e)		{			throw new ClaimUnloadExceptoin(e.getMessage(), e);		}	}}