// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod;

import com.rssl.phizic.config.ConfigFactory;
import com.rssl.phizic.gate.config.cod.CodGateConfig;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.StreamingSenderState;
import com.sun.xml.rpc.client.http.HttpClientTransport;
import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPDeserializationState;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPNamespaceConstants;
import com.sun.xml.rpc.streaming.XMLReader;

import java.rmi.RemoteException;
import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.handler.HandlerChain;

public class WebBankServiceIF_Stub
		extends com.sun.xml.rpc.client.StubBase
		implements com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod.WebBankServiceIF
{


	/*
		 *  public constructor
		 */
	public WebBankServiceIF_Stub(HandlerChain handlerChain)
	{
		super(handlerChain);
		CodGateConfig config = ConfigFactory.getConfig(CodGateConfig.class);
		_setProperty(ENDPOINT_ADDRESS_PROPERTY, config.getCodUrl());
	}


	/*
		 *  implementation of sendMessage
		 */
	public java.lang.String sendMessage(java.lang.String message)
			throws java.rmi.RemoteException
	{

		try
		{

			StreamingSenderState _state = _start(_handlerChain);

			InternalSOAPMessage _request = _state.getRequest();
			_request.setOperationCode(sendMessage_OPCODE);

			com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod.SendMessage _mySendMessage = new com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod.SendMessage();
			_mySendMessage.setMessage(message);

			SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_sendMessage_sendMessage_QNAME);
			_bodyBlock.setValue(_mySendMessage);
			_bodyBlock.setSerializer(ns1_mySendMessage_LiteralSerializer);
			_request.setBody(_bodyBlock);

			_state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");

			_send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);

			com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod.SendMessageResponse _result = null;
			java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
			if (_responseObj instanceof SOAPDeserializationState)
			{
				_result = (com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod.SendMessageResponse) ((SOAPDeserializationState) _responseObj).getInstance();
			}
			else
			{
				_result = (com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod.SendMessageResponse) _responseObj;
			}

			return _result.getSendMessageReturn();

		}
		catch (RemoteException e)
		{
			// let this one through unchanged
			throw e;
		}
		catch (JAXRPCException e)
		{
			throw new RemoteException(e.getMessage(), e);
		}
		catch (Exception e)
		{
			if (e instanceof RuntimeException)
			{
				throw (RuntimeException) e;
			}
			else
			{
				throw new RemoteException(e.getMessage(), e);
			}
		}
	}


	/*
		 *  this method deserializes the request/response structure in the body
		 */
	protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception
	{
		int opcode = state.getRequest().getOperationCode();
		switch (opcode)
		{
			case sendMessage_OPCODE:
				_deserialize_sendMessage(bodyReader, deserializationContext, state);
				break;
			default:
				throw new SenderException("sender.response.unrecognizedOperation", java.lang.Integer.toString(opcode));
		}
	}


	/*
		 * This method deserializes the body of the sendMessage operation.
		 */
	private void _deserialize_sendMessage(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception
	{
		java.lang.Object mySendMessageResponseObj =
				ns1_mySendMessageResponse_LiteralSerializer.deserialize(ns1_sendMessage_sendMessageResponse_QNAME,
						bodyReader, deserializationContext);

		SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_sendMessage_sendMessageResponse_QNAME);
		bodyBlock.setValue(mySendMessageResponseObj);
		state.getResponse().setBody(bodyBlock);
	}


	protected java.lang.String _getDefaultEnvelopeEncodingStyle()
	{
		return null;
	}

	public java.lang.String _getImplicitEnvelopeEncodingStyle()
	{
		return "";
	}

	public java.lang.String _getEncodingStyle()
	{
		return SOAPNamespaceConstants.ENCODING;
	}

	public void _setEncodingStyle(java.lang.String encodingStyle)
	{
		throw new UnsupportedOperationException("cannot set encoding style");
	}


	/*
		 * This method returns an array containing (prefix, nsURI) pairs.
		 */
	protected java.lang.String[] _getNamespaceDeclarations()
	{
		return myNamespace_declarations;
	}

	/*
		 * This method returns an array containing the names of the headers we understand.
		 */
	public javax.xml.namespace.QName[] _getUnderstoodHeaders()
	{
		return understoodHeaderNames;
	}

	public void _initialize(InternalTypeMappingRegistry registry) throws Exception
	{
		super._initialize(registry);
		ns1_mySendMessage_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod.SendMessage.class, ns1_sendMessage_TYPE_QNAME);
		ns1_mySendMessageResponse_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", com.rssl.phizicgate.sbrf.ws.generated.jaxrpc.cod.SendMessageResponse.class, ns1_sendMessageResponse_TYPE_QNAME);
	}

	private static final javax.xml.namespace.QName _portName = new QName("urn:dpc", "WebBankServiceIFPort");
	private static final int sendMessage_OPCODE = 0;
	private static final javax.xml.namespace.QName ns1_sendMessage_sendMessage_QNAME = new QName("urn:dpc", "sendMessage");
	private static final javax.xml.namespace.QName ns1_sendMessage_TYPE_QNAME = new QName("urn:dpc", "sendMessage");
	private CombinedSerializer ns1_mySendMessage_LiteralSerializer;
	private static final javax.xml.namespace.QName ns1_sendMessage_sendMessageResponse_QNAME = new QName("urn:dpc", "sendMessageResponse");
	private static final javax.xml.namespace.QName ns1_sendMessageResponse_TYPE_QNAME = new QName("urn:dpc", "sendMessageResponse");
	private CombinedSerializer ns1_mySendMessageResponse_LiteralSerializer;
	private static final java.lang.String[] myNamespace_declarations =
			new java.lang.String[]{
					"ns0", "urn:dpc"
			};

	private static final QName[] understoodHeaderNames = new QName[]{};
}
