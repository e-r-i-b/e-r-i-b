В рамках запроса ENH031868 было сделано следующее: создана схема БД, в таблицах которой хранится информация о входных данных (которые посылаются в заглушку) и продуктах клиента (картах, вкладах и ОМС). 
Структура и перечень данных указаны в спецификации, находящейся по адресу: http://murena:81/svn/PhizIC/analytics/Проекты ИКФЛ/Клиентские/ЕРИБ/1-Аналитика/Интеграция/bp/ЕРИБ_спецификация_БП.doc (п.3.2. Интерфейс GFL, п.3.4 интерфейс ACC_DI, 3.9. интерфейс CRDWI, 3.6. Интерфейс IMA_IS_s). 

Также были сделаны изменения в структуре заглушки, вследствие чего происходит следующее: 
1. при входе клиента из таблицы GFL заглушка получает объект, содержащий поля записи, найденной по входным параметрам запроса. Идентификатор записи будет использоваться для получения списков продуктов клиента.
Если в таблице GFL не было найдено ни одной записи, соответствующей запросу, то вызывается старая заглушка. В этом случае:
а. если у пользователя были карты (информация о которых хранится в таблице CARD_LINKS) и вклады (ACCOUNT_LINKS) то используем их
б. если у пользователя нет карт, то с помощью заглушки генерируются новые карты
2. заглушка получает продукты клиента: из таблицы GFL_PRODUCTS, используя идентификатор записи, найденной в таблице GFL, выбираются идентификаторы продуктов с указанием их типа, а по ним из соответствующих таблиц (CARDS для карт, DEPOSIT для вкладов, IMACCOUNT для ОМС и CREDIT для кредитов) получаем сами продукты.

Предполагается, что если для входных параметров в таблице GFL была найдена запись, то все продукты клиента будут получены из заглушки. Если какие-то продукты найдены не были, то старой заглушкой они генерироваться не будут (у клиента просто не будет этого продукта)

Для получения детальной информации по продуктам используются интерфейсы CRDWI, ACC_DI, IMA_IS_s и LN_CI и соответствующий им таблицы CRDWI, ACC_DI, IMA_IS и LN_CI. По входным параметрам запроса в таблице ищется идентификатор продукта, по которому получается сам продукт. Если по входным параметрам не вернулась ни одна запись, детальная информация по продукту генерируется старой заглушкой.

-------------------------------------------------------------------------------------------------------------------------

ДЛЯ НАСТРОЙКИ ЗАГЛУШКИ НЕОБХОДИМО:

1. Если скрипт "create_ESBERIB_objects.sql" выполняется первый раз, то выполнить его под SYSTEM , иначе выполнить "update_ESBERIB_objects.sql".
Поменять значение параметра c_PrimarySchema (указать имя вашей рабочей схемы). Значение параметра c_SecondarySchema - опционально, можно оставить без изменений.
2. заполнить созданную схему данными (см. "ИНСТРУКЦИЯ ПО ЗАПОЛНЕНИЮ СХЕМЫ ДАННЫМИ").
3. В файле esberib.mock.properties поменять значение параметра esberib.mock.db.used на true. 
Если при создании схемы для заглушки вы меняли имя и/или пароль схемы (значение параметра c_SecondarySchema), то их надо указать в файле sbrf.PhizIC.properties (параметры esberib.mock.dbserver.username, esberib.mock.dbserver.password)

-------------------------------------------------------------------------------------------------------------------------

ИНСТРУКЦИЯ ПО ЗАПОЛНЕНИЮ СХЕМЫ ДАННЫМИ

	1.Заполнение БД данными по клиентам, картам, счетам, ОМС и кредитам
	
	Необходимо выполнить скрипт "Список клиентов их карт счетов ОМС и кредитов.sql". Скрипт заполняет все необходимые таблицы тестовыми данными по клиентам, картам, вкладам, ОМС и кредитам.
	ВНИМАНИЕ!!! Перед запуском скрипта, необходимо выполнить скрипт "create_ESBERIB_objects.sql" или "update_ESBERIB_objects.sql".
	ВНИМАНИЕ!!! Перед выполнением необходимо указать входные параметры.

Данный скрипт позволяет изменять:
"c_PrimarySchema" 		- Основная схема БД, с которой работает WEB-приложение (например "SBRF_118");
"c_SecondarySchema" 	- Схема в которую должны складываться запросы к шине и ответы от неё (схема создаётся скриптом "create_ESBERIB_objects.sql");
"c_UserCount" 			- Кол-во клиентов, которые будут сгенерированы;
"c_UserStatusList" 		- Список статусов клиентов;
"c_ClientId" 			- Внешняя система;
"c_DepartmentId" 		- Идентификатор департамента;
"c_AccessType" 			- Тип доступа;
"c_DocType" 			- Тип документа клиента(строковое представление);
"c_DocTypeNumber" 		- Тип документа клиента(числовое представление);
"c_ServicesNameList" 	- Список сервисов, которые по умолчанию будут доступны генерируемым клиентам;
"c_UserCardCount" 		- Кол-во карт генерируемые для клиента;
"c_CardStatusList" 		- Список кодов статусов карт;
"c_SystemIdList" 		- Список идентификаторов систем-источников продукта;
"c_CurrencyList" 		- Список валют счета;
"c_CardTypeList" 		- Список типов карт;
"c_VirtualCardNumber" 	- Список вирруальных карт (карты начинающиеся на эти числа - виртуальные);

"c_UserDepositCount" 	- Кол-во счетов генерируемых для клиента
"c_DepositStatusList"	- Список статусов счета
"c_DepAccMaskList"		- Список масок счетов (с них могут начинаться счета)

"c_UserIMACount"		- Кол-во ОМС генерируемых для клиента
"c_IMACurrencyList"		- Список валют для ОМС, которые будут встречаться в генерируемых данных

"c_UserLoanCount"		- Кол-во кредитов генерируемых для клиента (все крелиты рублевые).

	2. Заполнение БД данными по сотрудникам
	
	Необходимо выполнить скрипт "Список сотрудников.sql". Скрипт заполняет все необходимые таблицы тестовыми данными по сотрудникам.
	ВНИМАНИЕ!!! Перед выполнением необходимо указать входные параметры.

Данный скрипт позволяет изменять:
"c_EmployeesCount"		- Кол-во сотрудников, которые будут сгененрированы
"c_DepartmentId"		- Идентификатор департамента, к которому относится сотрудник
"c_ServicesNameList"	- Список сервисов, которые по умолчанию будут доступны генерируемым сотрудникам   

Все параметры находятся в начале скрипта и, для примера, заполнены значениями, при необходимости их можно скорректировать.
-------------------------------------------------------------------------------------------------------------------------

ДЛЯ РАБОТЫ С УДБО-КЛИЕНТАМИ:
Чтобы найти логин клиента, в своей рабочей схеме выполните запрос:
select ID, USER_ID from LOGINS where ID in (select LOGIN_ID from USERS where lower(FIRST_NAME) like '%generated%' and CREATION_TYPE = 'UDBO') order by id desc;
Логин клиента - LOGIN_ID, пароль a1d3g5j7.

ДЛЯ РАБОТЫ СО СБОЛ-КЛИЕНТАМИ: 
Чтобы найти логин клиента, в своей рабочей схеме выполните запрос
select LOGINS.ID, LOGINS.USER_ID, USERS.FIRST_NAME 
  from LOGINS, USERS 
where LOGINS.ID=USERS.LOGIN_ID
  and lower(USERS.FIRST_NAME) like '%generated%' and USERS.CREATION_TYPE = 'SBOL'
order by logins.id desc;
Логин клиента - LOGIN_ID, пароль a1d3g5j7.
Поскольку вклады СБОЛ-клиентов добавляются сотрудниками, необходимо выполнить следующие действия:
1. Выполнить запрос
select D.ACCTID, D.STATUS
  from GFL g
     , GFL_PRODUCTS gp 
     , DEPOSIT d
 where g.FIRSTNAME = 'Имя_Клиента'
   and GP.GFL_ID = g.id
   and d.id = GP.PRODUCT_ID
   and GP.PRODUCT_TYPE = 'Deposit';
где Имя_Клиента - значение USERS.FIRST_NAME из первого запроса.
2. Зайти сотрудником, найти клиента (по LOGIN_ID, равному LOGINS.ID из первого запроса). Добавить клиенту вклады со статусом Opened, номера которых получены во втором запросе (вклады с другим статусом не добавятся).