import rcw, rsd, deprintr;
import "rt_ib_xml.mac";


// ────────────────────────────────────────────────────────────────
// Получение суммы комисии за выполнение вкладной операции
// ────────────────────────────────────────────────────────────────
class(cBaseDeposit) 
    cCalcComPay( inXml, outXml ) 

/* 
    ───────────────────
      ИСХОДНЫЕ ДАННЫЕ  
    ───────────────────

Элемент сообщения          Тип             Комментарий                             Кратность
──────────────────────────┼───────────────┼───────────────────────────────────────┼──────────────
request                 
├─id                       string(32)      Идентификатор запроса в системе  ИКФЛ        
└─commissionPay_q
  └─ИМЯ_ТЭГА                               Запрос по одному виду вклада            [0..a]
    ├─dateCreated          date            Дата операции
    ├─chargeOffAccount     string(25)      Номер счета - плательщика.
    ├─receiverAccount      string(25)      Номер счета - получателя     
    ├─receiverCurrency     string(3)       Валюта получателя
    ├─ground               string(210)     Назначение платежа   
    ├─type                 int16           Номер (код) операции
    ├─subType              int16           Номер подоперации
    ├─depositConditionsId  string(12)      Вид вклада (условия вклада)
    ├─receiverName         string(320)     Имя получателя       
    ├─receiverBIC          string(9)       БИК банка получателя
    ├─receiverCorAccount   string(20)      Корсчет получателя   
    ├─receiverINN          string(12)      ИНН получателя       
    ├─receiverKPP          string(9)       КПП получателя       
    ├─receiverBankName     string(320)     Имя Банка получателя 
    ├─officeExternalId     int16           Внешний идентификатор подразделения банка, в котором открывается депозит
    ├─transferAccount      string(25)      Счет, на который переводится вклад по концу договора 
    ├─clientCode           int32           Код клиента  
    ├─chargeOffAmount                      Сумма платежа (списания)
    │ ├─value              lmoney          Сумма        
    │ └─currencyCode       string(3)       Валюта
    └─period                               Период вклада (срок договора)
      ├─days               int             Дней 
      ├─months             int             Месяцев      
      └─years              int             Лет  


    ───────────────────
          ОТВЕТ
    ───────────────────
Элемент сообщения       Тип             Комментарий
───────────────────────┼───────────────┼──────────────────────────────────────────────────────────────────────
response                        
├─parentId              string(32)      Идентификатор запроса в системе  ИКФЛ   
├─id                    string(32)      Идентификатор ответа    
└─commissionPay_a
  ├─errorCode           int             Код ошибки
  ├─errorText           string(80)      Текст ошибки
  └─commission                          Сумма комиссии  
    ├─value             lmoney          Искомая сумма   
    └─currency          string(3)       Код валюты      

*/

  private macro CreateTagData( outXml, commission, currency )

    outXML = AddError2OutXml(outXML, 0, "" );

    nodeDeposit = nodeAnswer.appendChild( outXML.createNode(1, "commission", "") );

    node = nodeDeposit.appendChild( outXML.createNode(1, "value", "") );
    node.text = commission;

    node = nodeDeposit.appendChild( outXML.createNode(1, "currency", "" ) );
    node.text = currency;

    SetParm( 1, outXml );
  end;//CreateTagData( outXml, commission, currency )


  private macro CalcComission( outXML )
    var stat = 0;
    var commission = $0.0;
    var typeCom = "", numOper = 0, complexOper = 0;

    var cmd_operation;
    var rs_account, rs_accountReceiver;
    var isFindAccount, isFindAccountReceiver;
    record r_sbdepdoc( "sbdepdoc.dbt", "sbbank.def" );

    if(( chargeOffAccount == null ) or ( chargeOffAccount == "" ))
      outXML = AddError2OutXml(outXML, -1, "Не задан счет");
      return outXML;
    end;

    if( dateCreated == null )
      outXML = AddError2OutXml(outXML, -1, "Не задана дата операции");
      return outXML; 
    end;
    isFindAccount = findAccount( outXML, rs_account, chargeOffAccount, chargeOffAmountCurrency, false);
    isFindAccountReceiver = findAccount( outXML, rs_accountReceiver, receiverAccount, receiverCurrency, false);

    setFNCash(rs_account.value("t_fnCash"));
    setFlagCur(rs_account.value("t_isCur"));

    if(nodeElement.nodeName == "closeDeposit_q")
       findAccountRest( outXML, chargeOffAmount, rs_account.value("t_referenc") );
    end;
    if( chargeOffAmount == null )
      outXML = AddError2OutXml(outXML, -1, "Не задана сумма опрерации");
      return outXML;
    end;

    if( not isFindAccount )
      return outXML;
    end;
    getOperTypeByAccount(rs_accountReceiver, rs_account, isFindAccountReceiver, nodeElement.nodeName);
    if( type == null )
      getDefaultOperation( rs_account.value("t_code_currency"), null, nodeElement.nodeName  );
    end;

    if ( clientCode == null )
      clientCode = rs_account.value("t_codclient");
    end;

    cmd_operation = RsdCommand( "{ ? = call rdpc.defineKindOp_( ?, ?, ?, ?, ? ) }" );
    cmd_operation.addParam( "RetValue", RSDBP_RETVAL, V_INTEGER );
    cmd_operation.addParam( "TypeOper", RSDBP_IN );               cmd_operation.value( "TypeOper" ) = type;
    cmd_operation.addParam( "SumOp",    RSDBP_IN );               cmd_operation.value( "SumOp" )    = chargeOffAmount;
    cmd_operation.addParam( "KindOp",   RSDBP_OUT, V_INTEGER );
    cmd_operation.addParam( "InSum",    RSDBP_OUT, V_MONEYL );
    cmd_operation.addParam( "OutSum",   RSDBP_OUT, V_MONEYL );
    cmd_operation.addParam( "fncash",   RSDBP_IN ); cmd_operation.value("fncash")  = rs_account.value("t_fncash");
    cmd_operation.addParam( "flagcur",  RSDBP_IN ); cmd_operation.value("flagcur") = rs_account.value("t_iscur");

    cmd_operation.execute;

    if ( cmd_operation.value("RetValue") )
      outXML = AddError2OutXml(outXML, cmd_operation.value("RetValue"), getErrorString(cmd_operation.value("RetValue")) );
      return outXML; 
    end;

    r_sbdepdoc.Referenc         = rs_account.value("t_referenc");
    r_sbdepdoc.Type_Account     = rs_account.value("t_type_account");
    r_sbdepdoc.IsCur            = rs_account.value("t_iscur");
    r_sbdepdoc.CodClient        = clientCode;
    r_sbdepdoc.DepDate_Document = dateCreated;
    r_sbdepdoc.Date_Document    = dateCreated;
    r_sbdepdoc.TypeOper         = type;
    if(subtype != null)
       r_sbdepdoc.ApplType         = subtype;
    end;
    r_sbdepdoc.TypeComplexOper  = type;
    r_sbdepdoc.InSum            = cmd_operation.value("InSum");
    r_sbdepdoc.OutSum           = cmd_operation.value("OutSum");
    // установим как безналичное зачисление, чтобы не показывать панель комиссии.
    SetBitFlag(r_sbdepdoc.Flags, 31, 1);

    stat = GetCommissionOnOper(r_sbdepdoc, r_sbdepdoc.InSum + r_sbdepdoc.OutSum, 1, commission, typeCom, numOper, Type);  

    if ( stat !=0 )
      outXML = AddError2OutXml(outXML, stat, getErrorString(stat) );
      return outXML; 
    end;

    CreateTagData( outXml, commission, CodeCurrency2ISO(rs_account.value("t_code_currency")) );
    return outXML;
    
  end;//CalcComission( outXML )

  macro start( inXml, outXml )

    var nodeParentElement;
    var stat = 0;

    if(not outXml )
      outXml = CreateXMLObject();
      if(not outXml) return; end;

      CreateBeginTag( outXml );

      nodeParentElement = inXml.documentElement.selectSingleNode( "//commissionPay_q" );
      nodeElement = nodeParentElement.firstChild();

      //while( nodeElement )
      if( nodeElement )

        getParameters( nodeElement );

        outXML = CalcComission( outXML );
        //nodeElement = nodeElement.nextSibling();
      end;

    end;//if(not outXml )

    return outXml;
  end;//macro start( inXml, outXml )

end;//class(cBaseDeposit) 

// ───────────────────────────────────────
// Комиссия по операции 
// ───────────────────────────────────────
macro CalcComPay( inXml, outXml ) 

  var t = cCalcComPay;
  outXml = t.start( inXml, outXml );

  SetParm( 1, outXml );
end;
