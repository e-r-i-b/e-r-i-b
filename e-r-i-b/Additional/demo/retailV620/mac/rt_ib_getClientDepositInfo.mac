import rcw, rsd, deprintr;
import "rt_ib_xml.mac";


// ───────────────────────────────────────
// Получить информацию по депозитам клиента
// ───────────────────────────────────────
class(cBaseDeposit) 
    cGetClientDepositInfo( inXml, outXml )

/* 
    ───────────────────
      ИСХОДНЫЕ ДАННЫЕ  
    ───────────────────

Элемент сообщения         Тип           Комментарий
────────────────────────────────────────────────────────────────────────────────────────────────────────────
request                 
├─id                      string(32)    Идентификатор запроса в системе  ИКФЛ   
└─getClientDepositInfo_q                        
  ├─ date                 bdate         Дата, на которую надо получить информацию.
  │                                     Если дата не передана, берется дата подразделения в котором открыт счет
  └─deposit     
    └─ accountNumber      string(25)    Номер счета


    ───────────────────
          ОТВЕТ
    ───────────────────

Элемент сообщения               Тип           Комментарий 
────────────────────────────────────────────────────────────────────────────────────────────────────────────
response                        
├─parentId                      string(32)    Идентификатор запроса в системе  ИКФЛ
├─id                            string(32)    Идентификатор ответа      
└─getDepositList_a                      

response                        
├─parentId                      string(32)    Идентификатор запроса в системе  ИКФЛ     
├─id                            string(32)    Идентификатор ответа      
└─getClientDepositInfo_a        
  └─deposit                                                                                          [0:n]
    ├─accountTypeId             string(12)    Идентификатор вида вклада в RS-Retail     
    ├─referenc                  int32         Референс счета в  Retail  
    ├─accountNumber             string(25)    Номер счета вклада        
    ├─number                    string(25)    Номер договора вклада в RS-Retail (depcontr.Number)       
    ├─currency                  string(3)     Валюта вклада (ISO)       
    ├─period                    int           Срок, на который размещены денежные средства (в днях)     
    ├─sum                       lmoney        Остаток на счете  
    ├─status                    char          Статус вклада
    │                                         "O"-Открыт
    │                                         "C"-Закрыт        
    ├─minimumAmount             lmoney        Минимальная сумма вклада  
    ├─interestRate              double        Текущая процентная ставка по вкладу       
    ├─additionalFee             bool          Разрешены или запрещены дополнительные взносы к сумме депозита    
    ├─minAdditionalFee          lmoney        Мин. сумма доп. взноса    
    ├─renewal                   bool          Пролонгация       
    ├─capitalization            bool          Капитализация процентов   
    ├─paymentPeriod             string(50)    Способ выплаты процентов
    ├─anticipatoryRemoval       bool          Разрешено ли досрочное снятие части средств по вкладу     
    ├─account                   string(25)    Номер счета для перечисления средств по истечении срока вклада    
    └─conditionsPaymentPercent  string(256)   Процентная ставка при нарушении условий договора  


*/

  // ───────────────────────────────────────────────
  private macro CreateAccountTag( outXml, referenc )
    var cmd, rs;
    var tempnode;

    cmd = RsdCommand( 
        "select   con.t_ac_type_get acc, con.t_partaccount partaccount "
            "from dsb_congt_dbt con "
           "where con.t_referencacc = ? "
             "and con.t_gettype = 2 "
        "order by con.t_partaccount desc " );

    cmd.addParam("ref", RSDBP_IN);  cmd.value("ref") = referenc;
    cmd.execute;

    rs = RsdRecordSet( cmd );
    while ( rs.moveNext )

      tempnode = nodeDeposit.appendChild( outXml.createNode(1, "finalAccount", "") );

      node = tempnode.appendChild( outXml.createNode(1, "number", "") );
      node.text = rs.value("acc");

      node = tempnode.appendChild( outXml.createNode(1, "part", "") );
      node.text = rs.value("partaccount");

    end;

  end; // CreateAccountTag( outXml, referenc )

  // ───────────────────────────────────────────────
  private macro CreateTagData( outXml, account )
    macro getCurDate( account )
      var cmd, rs;
      var d : date;
      
      cmd = RsdCommand(
          "select depparm.t_operdate d " +
            "from ddepparm_dbt depparm, ddepositr_dbt depos " +
           "where depparm.t_fncash = depos.t_fncash " +
             "and depparm.t_flagcur = depos.t_iscur " +
             "and depos.t_account = ? " ); 
      cmd.addParam("account", RSDBP_IN);  cmd.value("account") = account;
      cmd.execute;

      rs = RsdRecordSet( cmd );
      if ( rs.moveNext )
        d = rs.value("d");
      else
        d = date;
      end;

      return d;
    end;

    var stat = 0;
    var isFindRecord = false;
    var tempDate;

    var cmd_data;  
    var rs_data;
   
    if ( dateCreated == null )
      dateCreated = getCurDate( account );
    end;

    cmd_data = RsdCommand(
             "select   * " +
               "from (select distinct       /* +index(ddepositr_dbt ddepositr_dbt_idx7) */ " +
                            "dep.t_type_account accountTypeId, " +
                            "dep.t_referenc referenc, " +
                            "dep.t_account accountNumber, " +
                            "dep.t_svodaccount SvodAccount, " +
                            "case dep.t_open_close  " +
                               "when chr(0) then 'O'  " +
                                           "else 'C'  " +
                            "end status, " +
                            "dep.t_limit minimumAmount, " +
                            "case dep.t_end_datedep " +
                               "when rglobal.getnulldate then 0 " +
                               "else case dep.t_prol_datedep " +
                                       "when rglobal.getnulldate then dep.t_end_datedep - dep.t_open_date " +
                                                                "else dep.t_end_datedep - dep.t_prol_datedep + 1 " +
                                       "end " +
                            "end period, " +
                            "nvl((select depdoc.t_rest " +
                                   "from (select   t_referenc, t_rest " +
                                             "from dsbdepdoc_dbt " +
                                            "where t_date_document <= ? " +
                                              "and t_mode <> 2 " +
                                              "and t_kindop <> 8 " +
                                              "and t_kindop <> 9 " +
                                              "and t_kindop <> 14 " +
                                              "and t_kindop <> 15 " +
                                              "and t_kindop <> 16 " +
                                              "and t_action <> ralc.get_d_delete " +
                                              "and bitand(t_flags, 131072) = 0 " +
                                         "order by t_referenc desc, " +
                                                  "t_date_document desc, " +
                                                  "t_numdaydoc desc) depdoc " +
                                  "where depdoc.t_referenc = dep.t_referenc " +
                                    "and rownum = 1), 0 ) sum, " +
//                            "con.t_ac_type_get acc,  " +
                            "dep.t_iscur iscur, " +
                            "cur.t_short_name currency, " +
                            "case typ.t_FormContr " +
                               "when 30 then 'true' " +
                                       "else 'false' " +
                            "end renewal, " +
                            "ap.t_aptype conditionsPaymentPercent, " +
                            "to_char( dep.t_open_date, 'dd.mm.yyyy' ) opdate, " +
                            "nvl(congt.t_ac_type_get, dep.t_account ) percentAccount, " +
                            "case dep.t_formcontr when 0 then typ.t_formcontr else dep.t_formcontr end t_formcontr, " +
                            "dep.t_open_close, dep.t_usealternate, dep.t_end_datedep, dep.t_prol_datedep, dep.t_close_date " +
                       "from ddepositr_dbt dep  " +
//                            "left outer join dsb_congt_dbt con  " +
//                                         "on con.t_referencacc = dep.t_referenc " +
//                                        "and con.t_gettype = 2 " +
                            "left outer join dsb_dtyp_dbt typ  " +
                                         "on typ.t_flagcur = dep.t_iscur " +
                                        "and typ.t_kind = dep.t_type_account " +
                            "left outer join dcurrency_dbt cur  " +
                                         "on cur.t_code_currency = dep.t_code_currency " +
                            "left outer join dpc_apltp_dbt ap  " +
                                         "on ap.t_iscur = dep.t_iscur " +
                                        "and ap.t_typerec = rpcc.get_rtpc_account_type " +
                                        "and ap.t_type = dep.t_type_account " +
                                        "and ap.t_appltype = rpcc.get_rtpc_account_alt " +
                            "left outer join dsb_congt_dbt congt  " +
                                         "on congt.t_referencacc = dep.t_referenc " +
                                        "and t_gettype = 3 " +
                                        "and t_partaccount = 4 " +
                      "where dep.t_account = ? " +
                        "and dep.t_action <> ralc.get_d_delete ) " +
             "order by status desc " );

    cmd_data.nullConversion = true;
    cmd_data.addParam("curdate", RSDBP_IN);  cmd_data.value("curdate") = dateCreated;
    cmd_data.addParam("account", RSDBP_IN);  cmd_data.value("account") = account;
           
    cmd_data.execute;

    rs_data = RsdRecordSet( cmd_data );
    while ( rs_data.moveNext )
      isFindRecord = true;
      currentReferenc = rs_data.value( "referenc" );

      stat = TypeAccountParameters( rs_data.value("iscur"), rs_data.value("accountTypeId") );
      if ( stat != 0 )
        outXml = AddError2OutXml(outXml, stat, getErrorString(stat));
      else

        stat = PercentTypeAccountParameters( rs_data.value("iscur"), rs_data.value("accountTypeId"), dateCreated );
        if ( stat != 0 )
          outXml = AddError2OutXml(outXml, stat, getErrorString(stat));
        else
        
          stat =  DefineRateForAccount( rs_data.value("referenc"), 2001, dateCreated, rs_data.value("sum") );
          if ( stat != 0 )
            outXml = AddError2OutXml(outXml, stat, getErrorString(stat));
          else

             // Данные по счету
            nodeDeposit = nodeAnswer.appendChild( outXML.createNode(1, "deposit", "") );
            // Идентификатор вида вклада в RS-Retail 
            node = nodeDeposit.appendChild( outXml.createNode(1, "accountTypeId", "") );
            node.text = rs_data.value("accountTypeId");
            // Референс счета в  Retail 
            node = nodeDeposit.appendChild( outXml.createNode(1, "referenc", "") );
            node.text = rs_data.value("referenc");
            // Номер счета вклада
            node = nodeDeposit.appendChild( outXml.createNode(1, "accountNumber", "") );
            node.text = rs_data.value("accountNumber");
            // Номер договора вклада в RS-Retail 
            node = nodeDeposit.appendChild( outXml.createNode(1, "number", "") );
            node.text = rs_data.value("SvodAccount");
            // Валюта вклада (ISO)
            node = nodeDeposit.appendChild( outXml.createNode(1, "currency", "") );
            node.text = rs_data.value("currency");
            // Срок, на который размещены денежные средства (в днях)
            node = nodeDeposit.appendChild( outXml.createNode(1, "period", "") );
            node.text = rs_data.value("period");
            // Остаток на счете
            node = nodeDeposit.appendChild( outXml.createNode(1, "sum", "") );
            node.text = string(rs_data.value("sum"):0:2);
            // Статус вклада (открыт/закрыт)
            node = nodeDeposit.appendChild( outXml.createNode(1, "status", "") );
            node.text = rs_data.value("status");
            // Минимальная сумма вклада
            node = nodeDeposit.appendChild( outXml.createNode(1, "minimumAmount", "") );
            node.text = string(rs_data.value("minimumAmount"):0:2);
            // Текущая процентная ставка по вкладу
            node = nodeDeposit.appendChild( outXml.createNode(1, "interestRate", "") );
            node.text = string(Rate:0:2);
            //  Разрешены или запрещены дополнительные взносы к сумме депозита
            node = nodeDeposit.appendChild( outXml.createNode(1, "additionalFee", "") );
            node.text = addFee;
            // Мин. сумма доп. взноса
            node = nodeDeposit.appendChild( outXml.createNode(1, "minAdditionalFee", "") );
            node.text = string(minFee:0:2);
            // Пролонгация
            node = nodeDeposit.appendChild( outXml.createNode(1, "renewal", "") );
            node.text = rs_data.value("renewal");
            // Капитализация процентов
            node = nodeDeposit.appendChild( outXml.createNode(1, "capitalization", "") );
            node.text = capit;
            // Способ выплаты процентов
            node = nodeDeposit.appendChild( outXml.createNode(1, "paymentPeriod", "") );
            node.text = string(PaymPer);
            // Разрешено ли досрочное снятие части средств по вкладу
            node = nodeDeposit.appendChild( outXml.createNode(1, "anticipatoryRemoval", "") );
            node.text = antRem;
            // Номер счета для перечисления средств по истечении срока вклада
            CreateAccountTag( outXml, rs_data.value("referenc") );
            // Процентная ставка при нарушении условий договора
            if (rs_data.value("conditionsPaymentPercent"))
              node = nodeDeposit.appendChild( outXml.createNode(1, "conditionsPaymentPercent", "") );
              node.text = rs_data.value("conditionsPaymentPercent");
            end;
            // Дата открытия депозита
            node = nodeDeposit.appendChild( outXml.createNode(1, "openDate", "") );
            node.text = rs_data.value("opdate");
            // Дата истечения срока действия договора для депозита 
            // (как написано в договоре, с учетом пролонгирования)
            tempDate = findEndDate( rs_data.value("t_formcontr"), 
                                    rs_data.value("t_open_close"), 
                                    rs_data.value("t_usealternate"), 
                                    dateStamp2Date(rs_data.value("t_end_datedep")), 
                                    dateStamp2Date(rs_data.value("t_prol_datedep")) );
            if ( (tempDate != null ) and ( tempDate != null_date ) )
              node = nodeDeposit.appendChild( outXml.createNode(1, "endDate", "") );
              node.text = string(tempDate);
            end;
            // Фактическая дата завершения депозита 
            // (закрытие счета или перевод в альтернативное состояние при выдаче наследства)
            tempDate = findCloseDate( rs_data.value("t_formcontr"), 
                                      rs_data.value("t_open_close"), 
                                      rs_data.value("t_usealternate"), 
                                      dateStamp2Date(rs_data.value("t_end_datedep")), 
                                      dateStamp2Date(rs_data.value("t_prol_datedep")),
                                      dateStamp2Date(rs_data.value("t_close_date")) );
            if ( (tempDate != null ) and ( tempDate != null_date ) )
              node = nodeDeposit.appendChild( outXml.createNode(1, "closeDate", "") );
              node.text = string(tempDate);
            end;
            // Номер счета для перечесления причисленных процентов
            node = nodeDeposit.appendChild( outXml.createNode(1, "percentAccount", "") );
            node.text = rs_data.value("percentAccount");

          end;
        end;
      end;
    end; 
    if ( not(isFindRecord) )
      outXML = AddError2OutXml(outXML, 8524, "счет #" + account + " не найден");
    end;


  SetParm(1, outXml);

  end;//CreateTagData( outXml, account )


  // ───────────────────────────────────────────────
  //  Получение информации о счете
  // ───────────────────────────────────────────────
  macro start( inXml, outXml )

    var nodeClientDepositInfo, accountIDXml;
    var CurrentDateElement = inXml.documentElement.selectSingleNode( "//date" );
    var nodeDeposit;

    if ( CurrentDateElement )
      dateCreated = formatDateToDate( string(CurrentDateElement.text) );
      if ( dateCreated == null )
        outXML = AddError2OutXml(outXML, 19007, "некорректный формат даты, на которую запрашивается информация");
        return outXML;
      end; 
    else
      dateCreated = null;
    end;


    if(not outXml )
      outXml = CreateXMLObject();
      if(not outXml) return; end;

      CreateBeginTag( outXml );

      nodeClientDepositInfo = inXml.documentElement.selectSingleNode( "//getClientDepositInfo_q" );
      nodeDeposit = nodeClientDepositInfo.firstChild;
      
      while( nodeDeposit )
        if ( nodeDeposit.nodeName == "deposit" )
          accountIDXml = nodeDeposit.firstChild();
          if( accountIDXml and ( accountIDXml.nodeName == "accountNumber"))
            CreateTagData( outXml, accountIDXml.text );
          else
            outXML = AddError2OutXml(outXML, 19007, "Не задан счет");
            return outXML;
          end;
        end;
        nodeDeposit = nodeDeposit.nextSibling();
      end;
      
      return outXml;
    end;
  end;//start( inXml, outXml )

end;//class(cBaseDeposit) 



macro GetClientDepositInfo( inXml, outXml )

  var t = cGetClientDepositInfo;
  outXml = t.start( inXml, outXml );

  SetParm(1, outXml);
end;
