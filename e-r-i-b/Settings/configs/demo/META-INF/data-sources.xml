<?xml version="1.0" standalone='yes'?>

<data-sources
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://xmlns.oracle.com/oracleas/schema/data-sources-10_1.xsd">

  <native-data-source
      name="PhizIC" jndi-name="jdbc/PhizIC" data-source-class="@dbserver.dsclass@"
      url="@dbserver.url@" user="@dbserver.username@" password="@dbserver.password@">
	<property name="serverName" value="@dbserver.name@"/>
	<property name="portNumber" value="@dbserver.port@"/>
	<property name="databaseName" value="@dbserver.database@"/>
	<property name="connectionCacheName" value="PhizICConCache"/>
	<property name="connectionCachingEnabled" value="true"/>
	<!--
	The enhanced standard APIs for manipulating CLOBs are the setString() and getString() of the 
	PreparedStatement and ResultSet objects respectively. By default, the method preparedStatement.setString()
	will allow processing of the strings up to 32765 bytes. In order to insert data greater than 32765 bytes,
	a newly introduced Connection property - SetBigStringTryClob can be set. This forces the
	preparedStatement.setString() to use another newly introduced method,
	OraclePreparedStatement.setStringForClob() instead.
	This is actually done internally, transparent to the user.
	-->
	<!--property name="SetBigStringTryClob" value="true"/-->
  </native-data-source>

</data-sources>
