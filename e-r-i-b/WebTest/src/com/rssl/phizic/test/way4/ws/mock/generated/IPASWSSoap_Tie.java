// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizic.test.way4.ws.mock.generated;

import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;

import javax.xml.namespace.QName;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.server.*;

public class IPASWSSoap_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public IPASWSSoap_Tie() throws Exception {
        super(new com.rssl.phizic.test.way4.ws.mock.generated.IPASWS_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: PrepareOTP
     */
    private void invoke_PrepareOTP(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.way4.ws.mock.generated.PrepareOTPRqType myPrepareOTPRqType = null;
        Object myPrepareOTPRqTypeObj =
            state.getRequest().getBody().getValue();
        
        if (myPrepareOTPRqTypeObj instanceof SOAPDeserializationState) {
            myPrepareOTPRqType = (com.rssl.phizic.test.way4.ws.mock.generated.PrepareOTPRqType)((SOAPDeserializationState)myPrepareOTPRqTypeObj).getInstance();
        } else {
            myPrepareOTPRqType = (com.rssl.phizic.test.way4.ws.mock.generated.PrepareOTPRqType)myPrepareOTPRqTypeObj;
        }
        
        try {
            com.rssl.phizic.test.way4.ws.mock.generated.PrepareOTPRsType parameters = ((com.rssl.phizic.test.way4.ws.mock.generated.IPASWSSoap) getTarget()).prepareOTP(myPrepareOTPRqType.getSTAN(), myPrepareOTPRqType.getUserId());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            com.rssl.phizic.test.way4.ws.mock.generated.PrepareOTPRsType _response = parameters;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_PrepareOTP_PrepareOTPRs_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myPrepareOTPRsType_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: VerifyOTP
     */
    private void invoke_VerifyOTP(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.way4.ws.mock.generated.VerifySPRqType myVerifySPRqType = null;
        Object myVerifySPRqTypeObj =
            state.getRequest().getBody().getValue();
        
        if (myVerifySPRqTypeObj instanceof SOAPDeserializationState) {
            myVerifySPRqType = (com.rssl.phizic.test.way4.ws.mock.generated.VerifySPRqType)((SOAPDeserializationState)myVerifySPRqTypeObj).getInstance();
        } else {
            myVerifySPRqType = (com.rssl.phizic.test.way4.ws.mock.generated.VerifySPRqType)myVerifySPRqTypeObj;
        }
        
        try {
            com.rssl.phizic.test.way4.ws.mock.generated.VerifyAttRsType parameters = ((com.rssl.phizic.test.way4.ws.mock.generated.IPASWSSoap) getTarget()).verifyOTP(myVerifySPRqType.getSTAN(), myVerifySPRqType.getSID(), myVerifySPRqType.getPassword());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            com.rssl.phizic.test.way4.ws.mock.generated.VerifyAttRsType _response = parameters;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_VerifyOTP_VerifyOTPRs_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myVerifyAttRsType_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: GeneratePassword
     */
    private void invoke_GeneratePassword(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.way4.ws.mock.generated.VerifyPasswordRqType myVerifyPasswordRqType = null;
        Object myVerifyPasswordRqTypeObj =
            state.getRequest().getBody().getValue();
        
        if (myVerifyPasswordRqTypeObj instanceof SOAPDeserializationState) {
            myVerifyPasswordRqType = (com.rssl.phizic.test.way4.ws.mock.generated.VerifyPasswordRqType)((SOAPDeserializationState)myVerifyPasswordRqTypeObj).getInstance();
        } else {
            myVerifyPasswordRqType = (com.rssl.phizic.test.way4.ws.mock.generated.VerifyPasswordRqType)myVerifyPasswordRqTypeObj;
        }
        
        try {
            com.rssl.phizic.test.way4.ws.mock.generated.GeneratePasswordRsType parameters = ((com.rssl.phizic.test.way4.ws.mock.generated.IPASWSSoap) getTarget()).generatePassword(myVerifyPasswordRqType.getSTAN(), myVerifyPasswordRqType.getUserId(), myVerifyPasswordRqType.getPassword());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            com.rssl.phizic.test.way4.ws.mock.generated.GeneratePasswordRsType _response = parameters;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_GeneratePassword_GeneratePasswordRs_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myGeneratePasswordRsType_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: VerifyPassword
     */
    private void invoke_VerifyPassword(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.way4.ws.mock.generated.VerifyPasswordRqType myVerifyPasswordRqType = null;
        Object myVerifyPasswordRqTypeObj =
            state.getRequest().getBody().getValue();
        
        if (myVerifyPasswordRqTypeObj instanceof SOAPDeserializationState) {
            myVerifyPasswordRqType = (com.rssl.phizic.test.way4.ws.mock.generated.VerifyPasswordRqType)((SOAPDeserializationState)myVerifyPasswordRqTypeObj).getInstance();
        } else {
            myVerifyPasswordRqType = (com.rssl.phizic.test.way4.ws.mock.generated.VerifyPasswordRqType)myVerifyPasswordRqTypeObj;
        }
        
        try {
            com.rssl.phizic.test.way4.ws.mock.generated.VerifyRsType parameters = ((com.rssl.phizic.test.way4.ws.mock.generated.IPASWSSoap) getTarget()).verifyPassword(myVerifyPasswordRqType.getSTAN(), myVerifyPasswordRqType.getUserId(), myVerifyPasswordRqType.getPassword());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            com.rssl.phizic.test.way4.ws.mock.generated.VerifyRsType _response = parameters;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_VerifyPassword_VerifyPasswordRs_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myVerifyRsType_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_PrepareOTP_PrepareOTPRq_QNAME)) {
            state.getRequest().setOperationCode(PrepareOTP_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_VerifyOTP_VerifyOTPRq_QNAME)) {
            state.getRequest().setOperationCode(VerifyOTP_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_GeneratePassword_GeneratePasswordRq_QNAME)) {
            state.getRequest().setOperationCode(GeneratePassword_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_VerifyPassword_VerifyPasswordRq_QNAME)) {
            state.getRequest().setOperationCode(VerifyPassword_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case PrepareOTP_OPCODE:
                deserialize_PrepareOTP(bodyReader, deserializationContext, state);
                break;
            case VerifyOTP_OPCODE:
                deserialize_VerifyOTP(bodyReader, deserializationContext, state);
                break;
            case GeneratePassword_OPCODE:
                deserialize_GeneratePassword(bodyReader, deserializationContext, state);
                break;
            case VerifyPassword_OPCODE:
                deserialize_VerifyPassword(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the PrepareOTP operation.
     */
    private void deserialize_PrepareOTP(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myPrepareOTPRqTypeObj =
            ns1_myPrepareOTPRqType_LiteralSerializer.deserialize(ns1_PrepareOTP_PrepareOTPRq_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_PrepareOTP_PrepareOTPRq_QNAME);
        bodyBlock.setValue(myPrepareOTPRqTypeObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the VerifyOTP operation.
     */
    private void deserialize_VerifyOTP(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myVerifySPRqTypeObj =
            ns1_myVerifySPRqType_LiteralSerializer.deserialize(ns1_VerifyOTP_VerifyOTPRq_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_VerifyOTP_VerifyOTPRq_QNAME);
        bodyBlock.setValue(myVerifySPRqTypeObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the GeneratePassword operation.
     */
    private void deserialize_GeneratePassword(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myVerifyPasswordRqTypeObj =
            ns1_myVerifyPasswordRqType_LiteralSerializer.deserialize(ns1_GeneratePassword_GeneratePasswordRq_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_GeneratePassword_GeneratePasswordRq_QNAME);
        bodyBlock.setValue(myVerifyPasswordRqTypeObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the VerifyPassword operation.
     */
    private void deserialize_VerifyPassword(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myVerifyPasswordRqTypeObj =
            ns1_myVerifyPasswordRqType_LiteralSerializer.deserialize(ns1_VerifyPassword_VerifyPasswordRq_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_VerifyPassword_VerifyPasswordRq_QNAME);
        bodyBlock.setValue(myVerifyPasswordRqTypeObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case PrepareOTP_OPCODE:
                invoke_PrepareOTP(state);
                break;
            case VerifyOTP_OPCODE:
                invoke_VerifyOTP(state);
                break;
            case GeneratePassword_OPCODE:
                invoke_GeneratePassword(state);
                break;
            case VerifyPassword_OPCODE:
                invoke_VerifyPassword(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    protected java.lang.String getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public java.lang.String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_PrepareOTP_PrepareOTPRq_QNAME)) {
            return PrepareOTP_OPCODE;
        }
        if (name.equals(ns1_VerifyOTP_VerifyOTPRq_QNAME)) {
            return VerifyOTP_OPCODE;
        }
        if (name.equals(ns1_GeneratePassword_GeneratePasswordRq_QNAME)) {
            return GeneratePassword_OPCODE;
        }
        if (name.equals(ns1_VerifyPassword_VerifyPasswordRq_QNAME)) {
            return VerifyPassword_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case PrepareOTP_OPCODE:
                {
                    Class[] carray = { java.lang.String.class,java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.way4.ws.mock.generated.IPASWSSoap.class).getMethod("prepareOTP", carray);
                }
                break;
            
            case VerifyOTP_OPCODE:
                {
                    Class[] carray = { java.lang.String.class,java.lang.String.class,java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.way4.ws.mock.generated.IPASWSSoap.class).getMethod("verifyOTP", carray);
                }
                break;
            
            case GeneratePassword_OPCODE:
                {
                    Class[] carray = { java.lang.String.class,java.lang.String.class,java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.way4.ws.mock.generated.IPASWSSoap.class).getMethod("generatePassword", carray);
                }
                break;
            
            case VerifyPassword_OPCODE:
                {
                    Class[] carray = { java.lang.String.class,java.lang.String.class,java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.way4.ws.mock.generated.IPASWSSoap.class).getMethod("verifyPassword", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[4];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 4 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myVerifyRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.test.way4.ws.mock.generated.VerifyRsType.class, ns1_VerifyRsType_TYPE_QNAME);
        ns1_myGeneratePasswordRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.test.way4.ws.mock.generated.GeneratePasswordRsType.class, ns1_GeneratePasswordRsType_TYPE_QNAME);
        ns1_myVerifySPRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.test.way4.ws.mock.generated.VerifySPRqType.class, ns1_VerifySPRqType_TYPE_QNAME);
        ns1_myVerifyAttRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.test.way4.ws.mock.generated.VerifyAttRsType.class, ns1_VerifyAttRsType_TYPE_QNAME);
        ns1_myPrepareOTPRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.test.way4.ws.mock.generated.PrepareOTPRqType.class, ns1_PrepareOTPRqType_TYPE_QNAME);
        ns1_myPrepareOTPRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.test.way4.ws.mock.generated.PrepareOTPRsType.class, ns1_PrepareOTPRsType_TYPE_QNAME);
        ns1_myVerifyPasswordRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.test.way4.ws.mock.generated.VerifyPasswordRqType.class, ns1_VerifyPasswordRqType_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName portName = new QName("http://www.openwaygroup.com/iPAS/WS", "iPASWSSoap");
    private static final int PrepareOTP_OPCODE = 0;
    private static final int VerifyOTP_OPCODE = 1;
    private static final int GeneratePassword_OPCODE = 2;
    private static final int VerifyPassword_OPCODE = 3;
    private static final javax.xml.namespace.QName ns1_PrepareOTP_PrepareOTPRq_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRq");
    private static final javax.xml.namespace.QName ns1_PrepareOTPRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRqType");
    private CombinedSerializer ns1_myPrepareOTPRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_PrepareOTP_PrepareOTPRs_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRs");
    private static final javax.xml.namespace.QName ns1_PrepareOTPRsType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "PrepareOTPRsType");
    private CombinedSerializer ns1_myPrepareOTPRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifyOTP_VerifyOTPRq_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyOTPRq");
    private static final javax.xml.namespace.QName ns1_VerifySPRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifySPRqType");
    private CombinedSerializer ns1_myVerifySPRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifyOTP_VerifyOTPRs_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyOTPRs");
    private static final javax.xml.namespace.QName ns1_VerifyAttRsType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyAttRsType");
    private CombinedSerializer ns1_myVerifyAttRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_GeneratePassword_GeneratePasswordRq_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "GeneratePasswordRq");
    private static final javax.xml.namespace.QName ns1_VerifyPasswordRqType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyPasswordRqType");
    private CombinedSerializer ns1_myVerifyPasswordRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_GeneratePassword_GeneratePasswordRs_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "GeneratePasswordRs");
    private static final javax.xml.namespace.QName ns1_GeneratePasswordRsType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "GeneratePasswordRsType");
    private CombinedSerializer ns1_myGeneratePasswordRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_VerifyPassword_VerifyPasswordRq_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyPasswordRq");
    private static final javax.xml.namespace.QName ns1_VerifyPassword_VerifyPasswordRs_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyPasswordRs");
    private static final javax.xml.namespace.QName ns1_VerifyRsType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "VerifyRsType");
    private CombinedSerializer ns1_myVerifyRsType_LiteralSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "http://www.openwaygroup.com/iPAS/WS"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
