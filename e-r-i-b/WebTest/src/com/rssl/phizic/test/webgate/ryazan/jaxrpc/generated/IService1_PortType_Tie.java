// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated;

import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;

import javax.xml.namespace.QName;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.server.*;

public class IService1_PortType_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public IService1_PortType_Tie() throws Exception {
        super(new com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1Service_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: preparePayment
     */
    private void invoke_preparePayment(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_preparePayment_RequestStruct myIService1_PortType_preparePayment_RequestStruct = null;
        Object myIService1_PortType_preparePayment_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myIService1_PortType_preparePayment_RequestStructObj instanceof SOAPDeserializationState) {
            myIService1_PortType_preparePayment_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_preparePayment_RequestStruct)((SOAPDeserializationState)myIService1_PortType_preparePayment_RequestStructObj).getInstance();
        } else {
            myIService1_PortType_preparePayment_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_preparePayment_RequestStruct)myIService1_PortType_preparePayment_RequestStructObj;
        }
        
        try {
            java.lang.String _return = 
                ((com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType) getTarget()).preparePayment(myIService1_PortType_preparePayment_RequestStruct.getValue());
            com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_preparePayment_ResponseStruct myIService1_PortType_preparePayment_ResponseStruct =
                new com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_preparePayment_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myIService1_PortType_preparePayment_ResponseStruct.set_return(_return);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_preparePayment_preparePaymentResponse_QNAME);
            bodyBlock.setValue(myIService1_PortType_preparePayment_ResponseStruct);
            bodyBlock.setSerializer(ns1_myIService1_PortType_preparePayment_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: requestAttr
     */
    private void invoke_requestAttr(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_requestAttr_RequestStruct myIService1_PortType_requestAttr_RequestStruct = null;
        Object myIService1_PortType_requestAttr_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myIService1_PortType_requestAttr_RequestStructObj instanceof SOAPDeserializationState) {
            myIService1_PortType_requestAttr_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_requestAttr_RequestStruct)((SOAPDeserializationState)myIService1_PortType_requestAttr_RequestStructObj).getInstance();
        } else {
            myIService1_PortType_requestAttr_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_requestAttr_RequestStruct)myIService1_PortType_requestAttr_RequestStructObj;
        }
        
        try {
            java.lang.String _return = 
                ((com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType) getTarget()).requestAttr(myIService1_PortType_requestAttr_RequestStruct.getValue());
            com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_requestAttr_ResponseStruct myIService1_PortType_requestAttr_ResponseStruct =
                new com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_requestAttr_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myIService1_PortType_requestAttr_ResponseStruct.set_return(_return);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_requestAttr_requestAttrResponse_QNAME);
            bodyBlock.setValue(myIService1_PortType_requestAttr_ResponseStruct);
            bodyBlock.setSerializer(ns1_myIService1_PortType_requestAttr_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: executePayment
     */
    private void invoke_executePayment(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_executePayment_RequestStruct myIService1_PortType_executePayment_RequestStruct = null;
        Object myIService1_PortType_executePayment_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myIService1_PortType_executePayment_RequestStructObj instanceof SOAPDeserializationState) {
            myIService1_PortType_executePayment_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_executePayment_RequestStruct)((SOAPDeserializationState)myIService1_PortType_executePayment_RequestStructObj).getInstance();
        } else {
            myIService1_PortType_executePayment_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_executePayment_RequestStruct)myIService1_PortType_executePayment_RequestStructObj;
        }
        
        try {
            java.lang.String _return = 
                ((com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType) getTarget()).executePayment(myIService1_PortType_executePayment_RequestStruct.getValue());
            com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_executePayment_ResponseStruct myIService1_PortType_executePayment_ResponseStruct =
                new com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_executePayment_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myIService1_PortType_executePayment_ResponseStruct.set_return(_return);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executePayment_executePaymentResponse_QNAME);
            bodyBlock.setValue(myIService1_PortType_executePayment_ResponseStruct);
            bodyBlock.setSerializer(ns1_myIService1_PortType_executePayment_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: echoString
     */
    private void invoke_echoString(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_echoString_RequestStruct myIService1_PortType_echoString_RequestStruct = null;
        Object myIService1_PortType_echoString_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myIService1_PortType_echoString_RequestStructObj instanceof SOAPDeserializationState) {
            myIService1_PortType_echoString_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_echoString_RequestStruct)((SOAPDeserializationState)myIService1_PortType_echoString_RequestStructObj).getInstance();
        } else {
            myIService1_PortType_echoString_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_echoString_RequestStruct)myIService1_PortType_echoString_RequestStructObj;
        }
        
        try {
            java.lang.String _return = 
                ((com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType) getTarget()).echoString(myIService1_PortType_echoString_RequestStruct.getValue());
            com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_echoString_ResponseStruct myIService1_PortType_echoString_ResponseStruct =
                new com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_echoString_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myIService1_PortType_echoString_ResponseStruct.set_return(_return);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_echoString_echoStringResponse_QNAME);
            bodyBlock.setValue(myIService1_PortType_echoString_ResponseStruct);
            bodyBlock.setSerializer(ns1_myIService1_PortType_echoString_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: revokePayment
     */
    private void invoke_revokePayment(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_revokePayment_RequestStruct myIService1_PortType_revokePayment_RequestStruct = null;
        Object myIService1_PortType_revokePayment_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myIService1_PortType_revokePayment_RequestStructObj instanceof SOAPDeserializationState) {
            myIService1_PortType_revokePayment_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_revokePayment_RequestStruct)((SOAPDeserializationState)myIService1_PortType_revokePayment_RequestStructObj).getInstance();
        } else {
            myIService1_PortType_revokePayment_RequestStruct = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_revokePayment_RequestStruct)myIService1_PortType_revokePayment_RequestStructObj;
        }
        
        try {
            java.lang.String _return = 
                ((com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType) getTarget()).revokePayment(myIService1_PortType_revokePayment_RequestStruct.getValue());
            com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_revokePayment_ResponseStruct myIService1_PortType_revokePayment_ResponseStruct =
                new com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_revokePayment_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myIService1_PortType_revokePayment_ResponseStruct.set_return(_return);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_revokePayment_revokePaymentResponse_QNAME);
            bodyBlock.setValue(myIService1_PortType_revokePayment_ResponseStruct);
            bodyBlock.setSerializer(ns1_myIService1_PortType_revokePayment_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_preparePayment_preparePayment_QNAME)) {
            state.getRequest().setOperationCode(preparePayment_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_requestAttr_requestAttr_QNAME)) {
            state.getRequest().setOperationCode(requestAttr_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_executePayment_executePayment_QNAME)) {
            state.getRequest().setOperationCode(executePayment_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_echoString_echoString_QNAME)) {
            state.getRequest().setOperationCode(echoString_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_revokePayment_revokePayment_QNAME)) {
            state.getRequest().setOperationCode(revokePayment_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case preparePayment_OPCODE:
                deserialize_preparePayment(bodyReader, deserializationContext, state);
                break;
            case requestAttr_OPCODE:
                deserialize_requestAttr(bodyReader, deserializationContext, state);
                break;
            case executePayment_OPCODE:
                deserialize_executePayment(bodyReader, deserializationContext, state);
                break;
            case echoString_OPCODE:
                deserialize_echoString(bodyReader, deserializationContext, state);
                break;
            case revokePayment_OPCODE:
                deserialize_revokePayment(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the preparePayment operation.
     */
    private void deserialize_preparePayment(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myIService1_PortType_preparePayment_RequestStructObj =
            ns1_myIService1_PortType_preparePayment_RequestStruct_SOAPSerializer.deserialize(ns1_preparePayment_preparePayment_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_preparePayment_preparePayment_QNAME);
        bodyBlock.setValue(myIService1_PortType_preparePayment_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the requestAttr operation.
     */
    private void deserialize_requestAttr(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myIService1_PortType_requestAttr_RequestStructObj =
            ns1_myIService1_PortType_requestAttr_RequestStruct_SOAPSerializer.deserialize(ns1_requestAttr_requestAttr_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_requestAttr_requestAttr_QNAME);
        bodyBlock.setValue(myIService1_PortType_requestAttr_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executePayment operation.
     */
    private void deserialize_executePayment(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myIService1_PortType_executePayment_RequestStructObj =
            ns1_myIService1_PortType_executePayment_RequestStruct_SOAPSerializer.deserialize(ns1_executePayment_executePayment_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executePayment_executePayment_QNAME);
        bodyBlock.setValue(myIService1_PortType_executePayment_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the echoString operation.
     */
    private void deserialize_echoString(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myIService1_PortType_echoString_RequestStructObj =
            ns1_myIService1_PortType_echoString_RequestStruct_SOAPSerializer.deserialize(ns1_echoString_echoString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_echoString_echoString_QNAME);
        bodyBlock.setValue(myIService1_PortType_echoString_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the revokePayment operation.
     */
    private void deserialize_revokePayment(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myIService1_PortType_revokePayment_RequestStructObj =
            ns1_myIService1_PortType_revokePayment_RequestStruct_SOAPSerializer.deserialize(ns1_revokePayment_revokePayment_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_revokePayment_revokePayment_QNAME);
        bodyBlock.setValue(myIService1_PortType_revokePayment_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case preparePayment_OPCODE:
                invoke_preparePayment(state);
                break;
            case requestAttr_OPCODE:
                invoke_requestAttr(state);
                break;
            case executePayment_OPCODE:
                invoke_executePayment(state);
                break;
            case echoString_OPCODE:
                invoke_echoString(state);
                break;
            case revokePayment_OPCODE:
                invoke_revokePayment(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    public java.lang.String getDefaultEnvelopeEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public java.lang.String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_preparePayment_preparePayment_QNAME)) {
            return preparePayment_OPCODE;
        }
        if (name.equals(ns1_requestAttr_requestAttr_QNAME)) {
            return requestAttr_OPCODE;
        }
        if (name.equals(ns1_executePayment_executePayment_QNAME)) {
            return executePayment_OPCODE;
        }
        if (name.equals(ns1_echoString_echoString_QNAME)) {
            return echoString_OPCODE;
        }
        if (name.equals(ns1_revokePayment_revokePayment_QNAME)) {
            return revokePayment_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case preparePayment_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType.class).getMethod("preparePayment", carray);
                }
                break;
            
            case requestAttr_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType.class).getMethod("requestAttr", carray);
                }
                break;
            
            case executePayment_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType.class).getMethod("executePayment", carray);
                }
                break;
            
            case echoString_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType.class).getMethod("echoString", carray);
                }
                break;
            
            case revokePayment_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType.class).getMethod("revokePayment", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[5];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 5 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myIService1_PortType_executePayment_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_executePayment_ResponseStruct.class, ns1_executePaymentResponse_TYPE_QNAME);
        ns1_myIService1_PortType_requestAttr_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_requestAttr_RequestStruct.class, ns1_requestAttr_TYPE_QNAME);
        ns1_myIService1_PortType_echoString_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_echoString_ResponseStruct.class, ns1_echoStringResponse_TYPE_QNAME);
        ns1_myIService1_PortType_preparePayment_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_preparePayment_ResponseStruct.class, ns1_preparePaymentResponse_TYPE_QNAME);
        ns1_myIService1_PortType_revokePayment_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_revokePayment_ResponseStruct.class, ns1_revokePaymentResponse_TYPE_QNAME);
        ns1_myIService1_PortType_revokePayment_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_revokePayment_RequestStruct.class, ns1_revokePayment_TYPE_QNAME);
        ns1_myIService1_PortType_preparePayment_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_preparePayment_RequestStruct.class, ns1_preparePayment_TYPE_QNAME);
        ns1_myIService1_PortType_echoString_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_echoString_RequestStruct.class, ns1_echoString_TYPE_QNAME);
        ns1_myIService1_PortType_executePayment_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_executePayment_RequestStruct.class, ns1_executePayment_TYPE_QNAME);
        ns1_myIService1_PortType_requestAttr_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.test.webgate.ryazan.jaxrpc.generated.IService1_PortType_requestAttr_ResponseStruct.class, ns1_requestAttrResponse_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName portName = new QName("http://tempuri.org/", "IService1_PortTypePort");
    private static final int preparePayment_OPCODE = 0;
    private static final int requestAttr_OPCODE = 1;
    private static final int executePayment_OPCODE = 2;
    private static final int echoString_OPCODE = 3;
    private static final int revokePayment_OPCODE = 4;
    private static final javax.xml.namespace.QName ns1_preparePayment_preparePayment_QNAME = new QName("urn:Service1Intf-IService1", "preparePayment");
    private static final javax.xml.namespace.QName ns1_preparePayment_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "preparePayment");
    private CombinedSerializer ns1_myIService1_PortType_preparePayment_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_preparePayment_preparePaymentResponse_QNAME = new QName("urn:Service1Intf-IService1", "preparePaymentResponse");
    private static final javax.xml.namespace.QName ns1_preparePaymentResponse_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "preparePaymentResponse");
    private CombinedSerializer ns1_myIService1_PortType_preparePayment_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_requestAttr_requestAttr_QNAME = new QName("urn:Service1Intf-IService1", "requestAttr");
    private static final javax.xml.namespace.QName ns1_requestAttr_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "requestAttr");
    private CombinedSerializer ns1_myIService1_PortType_requestAttr_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_requestAttr_requestAttrResponse_QNAME = new QName("urn:Service1Intf-IService1", "requestAttrResponse");
    private static final javax.xml.namespace.QName ns1_requestAttrResponse_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "requestAttrResponse");
    private CombinedSerializer ns1_myIService1_PortType_requestAttr_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_executePayment_executePayment_QNAME = new QName("urn:Service1Intf-IService1", "executePayment");
    private static final javax.xml.namespace.QName ns1_executePayment_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "executePayment");
    private CombinedSerializer ns1_myIService1_PortType_executePayment_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_executePayment_executePaymentResponse_QNAME = new QName("urn:Service1Intf-IService1", "executePaymentResponse");
    private static final javax.xml.namespace.QName ns1_executePaymentResponse_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "executePaymentResponse");
    private CombinedSerializer ns1_myIService1_PortType_executePayment_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_echoString_echoString_QNAME = new QName("urn:Service1Intf-IService1", "echoString");
    private static final javax.xml.namespace.QName ns1_echoString_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "echoString");
    private CombinedSerializer ns1_myIService1_PortType_echoString_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_echoString_echoStringResponse_QNAME = new QName("urn:Service1Intf-IService1", "echoStringResponse");
    private static final javax.xml.namespace.QName ns1_echoStringResponse_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "echoStringResponse");
    private CombinedSerializer ns1_myIService1_PortType_echoString_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_revokePayment_revokePayment_QNAME = new QName("urn:Service1Intf-IService1", "revokePayment");
    private static final javax.xml.namespace.QName ns1_revokePayment_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "revokePayment");
    private CombinedSerializer ns1_myIService1_PortType_revokePayment_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_revokePayment_revokePaymentResponse_QNAME = new QName("urn:Service1Intf-IService1", "revokePaymentResponse");
    private static final javax.xml.namespace.QName ns1_revokePaymentResponse_TYPE_QNAME = new QName("urn:Service1Intf-IService1", "revokePaymentResponse");
    private CombinedSerializer ns1_myIService1_PortType_revokePayment_ResponseStruct_SOAPSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "urn:Service1Intf-IService1"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
