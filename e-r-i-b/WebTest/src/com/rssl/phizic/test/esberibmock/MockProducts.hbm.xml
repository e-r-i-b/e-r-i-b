<?xml version="1.0"?><!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
    <!--
    КАРТЫ КЛИЕНТА
    -->
    <class name="com.rssl.phizic.test.esberibmock.MockCard" table="CARDS">

        <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_CARDS</param>
            </generator>
        </id>

        <property name="acctId"             type="string"   column="ACCTID"             not-null="false"/>
        <property name="mainCard"           type="string"   column="MAINCARD"           not-null="false"/>
        <property name="additionalCard"     type="string"   column="ADDITIONALCARD"     not-null="false"/>
        <property name="bankacctstatuscode" type="string"   column="BANKACCTSTATUSCODE" not-null="false"/>
        <property name="statusdesc"         type="string"   column="STATUSDESC"         not-null="false"/>
        <property name="acctBal"            type="string"   column="ACCTBAL"            not-null="false"/>
        <property name="endDtForWay"        type="string"   column="ENDDTFORWAY"        not-null="false"/>
        <property name="pmtdt"              type="calendar" column="PMTDT"              not-null="false"/>

        <property name="acctCode"         type="long"     column="ACCTCODE"         not-null="true"/>
        <property name="acctCur"          type="string"   column="ACCTCUR"          not-null="true"/>
        <property name="acctSubCode"      type="long"     column="ACCTSUBCODE"      not-null="true"/>
        <property name="agencyId"         type="string"   column="AGENCYID"         not-null="true"/>
        <property name="branchId"         type="string"   column="BRANCHID"         not-null="true"/>
        <property name="cardHolder"       type="string"   column="CARDHOLDER"       not-null="true"/>
        <property name="cardName"         type="string"   column="CARDNAME"         not-null="true"/>
        <property name="cardNum"          type="string"   column="CARDNUM"          not-null="true"/>
        <property name="cardType"         type="string"   column="CARDTYPE"         not-null="true"/>
        <property name="endDt"            type="calendar" column="ENDDT"            not-null="true"/>
        <property name="issDt"            type="calendar" column="ISSDT"            not-null="true"/>
        <property name="rbBrchId"         type="string"   column="RBBRCHID"         not-null="true"/>
        <property name="regionId"         type="string"   column="REGIONID"         not-null="true"/>
        <property name="systemId"         type="string"   column="SYSTEMID"         not-null="true"/>


        <many-to-one name="personInfo"
		             class="com.rssl.phizic.test.esberibmock.MockPersonInfo"
		             column="PERSONINFO"
		             not-null="false"
                     fetch="join"
		             lazy="false"/>

    </class>

    <!--
    ОМС КЛИЕНТА
    -->
    <class name="com.rssl.phizic.test.esberibmock.MockIMAccount" table="IMACCOUNT">

        <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_IMACCOUNT</param>
            </generator>
        </id>

        <property name="acctId"           type="string"   column="ACCTID"           not-null="false"/>
        <property name="acctCur"          type="string"   column="ACCTCUR"          not-null="true"/>
        <property name="agencyId"         type="string"   column="AGENCYID"         not-null="true"/>
        <property name="branchId"         type="string"   column="BRANCHID"         not-null="true"/>
        <property name="rbBrchId"         type="string"   column="RBBRCHID"         not-null="true"/>
        <property name="regionId"         type="string"   column="REGIONID"         not-null="true"/>
        <property name="systemId"         type="string"   column="SYSTEMID"         not-null="true"/>

        <property name="acctName"         type="string"      column="ACCTNAME"         not-null="true"/>
        <property name="startDate"        type="calendar"    column="STARTDATE"        not-null="true"/>
        <property name="endDate"          type="calendar"    column="ENDDATE"          not-null="true"/>
        <property name="status"           type="string"      column="STATUS"           not-null="true"/>
        <property name="agreementNumber"  type="string"      column="AGREEMENTNUMBER"  not-null="true"/>
        <property name="acctBal"          type="string"      column="ACCTBAL"          not-null="true"/>

        <many-to-one name="personInfo"
		             class="com.rssl.phizic.test.esberibmock.MockPersonInfo"
		             column="PERSONINFO"
		             not-null="false"
                     fetch="join"
		             lazy="false"/>
    </class>

    <!--
    ВКЛАДЫ КЛИЕНТА
    -->
    <class name="com.rssl.phizic.test.esberibmock.MockDeposit" table="DEPOSIT">

        <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_DEPOSIT</param>
            </generator>
        </id>

        <property name="acctCode"            type="long"    column="ACCTCODE"              not-null="true"/>
        <property name="acctSubCode"         type="long"    column="ACCTSUBCODE"           not-null="true"/>
        <property name="needDepAccInfo"      type="boolean" column="ISNEEDDEPACCINFO"      not-null="true"/>
        <property name="needBankAcctPermiss" type="boolean" column="ISNEEDBANKACCTPERMISS" not-null="true"/>
        <property name="branchId"            type="string"  column="BRANCHID"              not-null="true"/>
        <property name="agencyId"            type="string"  column="AGENCYID"              not-null="true"/>
        <property name="regionId"            type="string"  column="REGIONID"              not-null="true"/>
        <property name="rbBrchId"            type="string"  column="RBBRCHID"              not-null="true"/>
        <property name="systemId"            type="string"  column="SYSTEMID"              not-null="true"/>
        <property name="acctId"              type="string"  column="ACCTID"                not-null="true"/>
        <property name="acctCur"             type="string"  column="ACCTCUR"               not-null="true"/>
        <property name="acctName"            type="string"  column="ACCTNAME"              not-null="true"/>
        <property name="acctBal"             type="string"  column="ACCTBAL"               not-null="true"/>

        <property name="openDate"       type="calendar"    column="OPENDATE"       not-null="false"/>
        <property name="endDate"        type="calendar"    column="ENDDATE"        not-null="false"/>
        <property name="period"         type="long"        column="PERIOD"         not-null="false"/>
        <property name="rate"           type="big_decimal" column="RATE"           not-null="false"/>

        <property name="creditAllowed"            type="boolean"    column="ISCREDITALLOWED"               not-null="false"/>
        <property name="debitAllowed"             type="boolean"    column="ISDEBITALLOWED"                not-null="false"/>
        <property name="prolongationAllowed"      type="boolean"    column="ISPROLONGATIONALLOWED"         not-null="false"/>
        <property name="creditCrossAgencyAllowed" type="boolean"    column="ISCREDITCROSSAGENCYALLOWED"    not-null="false"/>
        <property name="debitCrossAgencyAllowed"  type="boolean"    column="ISDEBITCROSSAGENCYALLOWED"     not-null="false"/>
        <property name="passBook"                 type="boolean"    column="ISPASSBOOK"                    not-null="false"/>

        <property name="status"                   type="string"  column="STATUS"                   not-null="false"/>
        <property name="interestOnDepositAcctId"  type="string"  column="INTERESTONDEPOSITACCTID"  not-null="false"/>
        <property name="interestOnDepositCardNum" type="string"  column="INTERESTONDEPOSITCARDNUM" not-null="false"/>
        <property name="bankAcctPermiss"          type="string"  column="BANKACCTPERMISS"          not-null="false"/>


        <many-to-one name="personInfo"
		             class="com.rssl.phizic.test.esberibmock.MockPersonInfo"
		             column="PERSONINFO"
		             not-null="false"
                     fetch="join"
		             lazy="false"/>
    </class>

    <!--
    КРЕДИТ КЛИЕНТА
    -->
    <class name="com.rssl.phizic.test.esberibmock.MockCredit" table="CREDIT">

        <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_CREDIT</param>
            </generator>
        </id>

        <property name="systemId"          type="string"      column="SYSTEMID"      not-null="true"/>
        <property name="acctId"            type="string"      column="ACCTID"        not-null="true"/>
        <property name="agreemtNum"        type="string"      column="AGREEMTNUM"    not-null="true"/>
        <property name="prodType"          type="string"      column="PRODTYPE"      not-null="true"/>
        <property name="loanType"          type="string"      column="LOANTYPE"      not-null="true"/>
        <property name="acctCur"           type="string"      column="ACCTCUR"       not-null="true"/>
        <property name="origAmt"           type="big_decimal" column="CURAMT"        not-null="true"/>
        <property name="branchId"          type="string"      column="BRANCHID"      not-null="false"/>
        <property name="agencyId"          type="string"      column="AGENCYID"      not-null="false"/>
        <property name="regionId"          type="string"      column="REGIONID"      not-null="true"/>
        <property name="rbBrchId"          type="string"      column="RBBRCHID"      not-null="true"/>
        <property name="ann"               type="boolean"     column="ANN"           not-null="true"/>
        <property name="startDt"           type="calendar"    column="STARTDT"       not-null="true"/>
        <property name="expDt"             type="calendar"    column="EXPDT"         not-null="true"/>
        <property name="personRole"        type="long"        column="PERSONROLE"    not-null="true"/>

        <many-to-one name="personInfo"
		             class="com.rssl.phizic.test.esberibmock.MockPersonInfo"
		             column="PERSONINFO"
		             not-null="false"
                     fetch="join"
		             lazy="false"/>
    </class>

    <!--
    ИНФОРМАЦИЯ О КЛИЕНТЕ
    -->
    <class name="com.rssl.phizic.test.esberibmock.MockPersonInfo" table="PERSONINFO">

	    <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_PERSONINFO</param>
            </generator>
        </id>

        <property name="custId"              type="string"   column="CUSTID"              not-null="true"/>
        <property name="birthday"            type="calendar" column="BIRTHDAY"            not-null="true"/>
        <property name="lastName"            type="string"   column="LASTNAME"            not-null="true"/>
        <property name="firstName"           type="string"   column="FIRSTNAME"           not-null="true"/>
        <property name="idType"              type="string"   column="IDTYPE"              not-null="false"/>
        <property name="idNum"               type="string"   column="IDNUM"               not-null="true"/>
        <property name="messageDeliveryType" type="string"   column="MESSAGEDELIVERYTYPE" not-null="true"/>

        <property name="birthPlace"     type="string"   column="BIRTHPLACE"     not-null="false"/>
        <property name="taxId"          type="string"   column="TAXID"          not-null="false"/>
        <property name="citizenship"    type="string"   column="CITIZENSHIP"    not-null="false"/>
        <property name="middleName"     type="string"   column="MIDDLENAME"     not-null="false"/>
        <property name="idSeries"       type="string"   column="IDSERIES"       not-null="false"/>
        <property name="issuedBy"       type="string"   column="ISSUEDBY"       not-null="false"/>
        <property name="issuedCode"     type="string"   column="ISSUEDCODE"     not-null="false"/>
        <property name="issueDt"        type="calendar" column="ISSUEDT"        not-null="false"/>
        <property name="expDt"          type="calendar" column="EXPDT"          not-null="false"/>
        <property name="additionalInfo" type="calendar" column="ADDITIONALINFO" not-null="false"/>
        <property name="emailAddr"      type="string" column="EMAILADDR"      not-null="false"/>

    </class>


    <!--
    GFL - для получения списка продуктов
    -->
    <class name="com.rssl.phizic.test.esberibmock.RequestGFL" table="GFL">

	    <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_GFL</param>
            </generator>
        </id>

        <property name="rbTbBrchId"   type="string"   column="RBTBBRCHID" not-null="true"/>
        <property name="birthday"     type="calendar" column="BIRTHDAY"   not-null="true"/>
        <property name="lastName"     type="string"   column="LASTNAME"   not-null="true"/>
        <property name="firstName"    type="string"   column="FIRSTNAME"  not-null="true"/>
        <property name="idType"       type="string"   column="IDTYPE"     not-null="true"/>
        <property name="idNum"        type="string"   column="IDNUM"      not-null="true"/>

        <property name="middleName"       type="string"   column="MIDDLENAME"    not-null="false"/>
        <property name="idSeries"         type="string"   column="IDSERIES"      not-null="false"/>
        <property name="issuedBy"         type="string"   column="ISSUEDBY"      not-null="false"/>
        <property name="issueDt"          type="calendar" column="ISSUEDT"       not-null="false"/>
        <property name="cardNum"          type="string"   column="CARDNUM"       not-null="false"/>

    </class>

    <!--
    CRDWI - для получения детальной информации по картам
    -->
    <class name="com.rssl.phizic.test.esberibmock.RequestCRDWI" table="CRDWI">

	    <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_CRDWI</param>
            </generator>
        </id>

        <property name="rbTbBrchId"   type="string"   column="RBTBBRCHID"  not-null="true"/>
        <property name="systemId"     type="string"   column="SYSTEMID"    not-null="false"/>
        <property name="cardNum"      type="string"   column="CARDNUM"     not-null="true"/>
        <property name="rbBrchId"     type="string"   column="RBBRCHID"    not-null="false"/>

        <many-to-one name="mockCard"
		             class="com.rssl.phizic.test.esberibmock.MockCard"
		             column="CARDID"
		             not-null="false"
                     fetch="join"
		             lazy="false"/>
    </class>

    <!--
    IMA_IS - для получения детальной информации по ОМС
    -->
    <class name="com.rssl.phizic.test.esberibmock.RequestIMAIS" table="IMA_IS">

	    <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_IMAIS</param>
            </generator>
        </id>

        <property name="rbTbBrchId"     type="string"   column="RBTBBRCHID"  not-null="true"/>
        <property name="systemId"       type="string"   column="SYSTEMID"    not-null="true"/>
        <property name="acctId"         type="string"   column="ACCTID"      not-null="true"/>
        <property name="rbBrchId"       type="string"   column="RBBRCHID"    not-null="false"/>

        <many-to-one name="mockIMAccount"
		             class="com.rssl.phizic.test.esberibmock.MockIMAccount"
		             column="IMACCOUNTID"
		             not-null="false"
                     fetch="join"
		             lazy="false"/>
    </class>

    <!--
    ACC_DI - для получения детальной информации по вкладам
    -->
    <class name="com.rssl.phizic.test.esberibmock.RequestACCDI" table="ACC_DI">

	    <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_ACCDI</param>
            </generator>
        </id>

        <property name="rbTbBrchId"    type="string"   column="RBTBBRCHID"  not-null="true"/>
        <property name="systemId"      type="string"   column="SYSTEMID"    not-null="true"/>
        <property name="acctId"        type="string"   column="ACCTID"      not-null="true"/>
        <property name="rbBrchId"      type="string"   column="RBBRCHID"    not-null="false"/>

        <many-to-one name="mockDeposit"
		             class="com.rssl.phizic.test.esberibmock.MockDeposit"
		             column="DEPOSITID"
		             not-null="false"
                     fetch="join"
		             lazy="false"/>

    </class>

    <!--
    LN_CI - для получения детальной информации по кредитам
    -->
    <class name="com.rssl.phizic.test.esberibmock.RequestLNCI" table="LN_CI">

	    <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_LNCI</param>
            </generator>
        </id>

        <property name="rbTbBrchId"     type="string"   column="RBTBBRCHID"  not-null="true"/>
        <property name="systemId"       type="string"   column="SYSTEMID"    not-null="true"/>
        <property name="acctId"         type="string"   column="ACCTID"      not-null="true"/>
        <property name="rbBrchId"       type="string"   column="RBBRCHID"    not-null="false"/>

        <many-to-one name="mockCredit"
		             class="com.rssl.phizic.test.esberibmock.MockCredit"
		             column="CREDITID"
		             not-null="false"
                     fetch="join"
		             lazy="false"/>
    </class>

    <!--
    GFL_PRODUCTS - вспомогательный объект, который содержит id GFL-запроса, id возвращаемого по нему продукта
    и тип продукта.
    -->
    <class name="com.rssl.phizic.test.esberibmock.ResponseProduct" table="GFL_PRODUCTS">
        <id name="id" type="long">
            <generator class="native">
                <param name="sequence">S_GFL_PRODUCT</param>
            </generator>
        </id>

        <property name="gflId"            type="long"    column="GFL_ID"              not-null="true"/>
        <property name="productId"        type="long"    column="PRODUCT_ID"          not-null="true"/>
        <property name="productType"      type="string"  column="PRODUCT_TYPE"        not-null="true"/>

    </class>

    <!--
    Получаем запись из таблицы GFL. Если объект не пустой, то по этим входным данным должны вернуться продукты
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getGFL">
        select gfl from RequestGFL gfl where
        gfl.rbTbBrchId = :rbTbBrchId
        and gfl.birthday = :birthday
        and (upper(gfl.lastName ) = upper(:lastName))
        and (upper(gfl.firstName ) = upper(:firstName))
        and gfl.idType  = :idType
        and gfl.idNum = :idNum
        and ((:middleName is null and gfl.middleName is null) or (:middleName is not null and upper(gfl.middleName ) = upper(:middleName)))
        and ((:idSeries is null and gfl.idSeries is null) or (:idSeries is not null and gfl.idSeries  =:idSeries))
        and ((:issuedBy is null and gfl.issuedBy is null) or (:issuedBy is not null and upper(gfl.issuedBy ) = upper(:issuedBy)))
        and ((:issueDt is null and gfl.issueDt is null) or (:issueDt is not null and gfl.issueDt = TO_DATE(:issueDt , 'YYYY-MM-DD')))
        and ((:cardNum is null and gfl.cardNum is null) or (:cardNum is not null and gfl.cardNum  = :cardNum))

    </query>

    <!--
    Получаем карты, используя id GFL-запроса (для GFL)
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getCardsForGFL">
        select cards from MockCard cards, ResponseProduct rp left join fetch cards.personInfo
        where
               rp.gflId = :id
               and rp.productType = 'Card'
               and cards.id  = rp.productId
    </query>

    <!--
    Получаем ОМС, используя id GFL-запроса (для GFL)
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getIMAccountsForGFL">
        select imAccount from MockIMAccount imAccount, ResponseProduct rp left join fetch imAccount.personInfo
        where
               rp.gflId = :id
               and rp.productType = 'IMA'
               and imAccount.id  = rp.productId
    </query>

    <!--
    Получаем вклады, используя id GFL-запроса (для GFL)
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getDepositsForGFL">
        select deposit from MockDeposit deposit, ResponseProduct rp left join fetch deposit.personInfo
        where
               rp.gflId = :id
               and rp.productType = 'Deposit'
               and deposit.id  = rp.productId
    </query>

    <!--
    Получаем кредиты, используя id GFL-запроса (для GFL)
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getCreditsForGFL">
        select credit from MockCredit credit, ResponseProduct rp left join fetch credit.personInfo 
        where
               rp.gflId = :id
               and rp.productType = 'Credit'
               and credit.id  = rp.productId
    </query>

    <!--
    Находим карту, используя входные данные (CRDWI)
    mockCardId - искомый идентификатор карты, ключ на карту.
    Если запрос ничего не вернул (ничего не найдено по входным параметрам),
    то детальная информация будет сгенерирована старой заглушкой.
    Если ответ есть, но не указан id карты (например, умышленно), то детальная информация получена не будет
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getCardByCRDWI">
        select crdwi from
        RequestCRDWI crdwi left join fetch crdwi.mockCard left join fetch crdwi.mockCard.personInfo
        where
        crdwi.rbTbBrchId  = :rbTbBrchId
        and ((:systemId is null and crdwi.systemId is null) or (:systemId is not null and upper(crdwi.systemId ) = upper(:systemId)))
        and (crdwi.cardNum = :cardNum)
        and ((:rbBrchId is null and crdwi.rbBrchId is null) or (:rbBrchId is not null and crdwi.rbBrchId = :rbBrchId))
    </query>

    <!--
    Находим вклад, используя входные данные (ACC_DI)
    mockDepositId - искомый идентификатор вклада, ключ на вклад
    ID - используется как признак того, вернулся ли запрос пустым
    (ничего не найдено по входным параметрам), или ответ есть, но не указан id вклада (например, умышленно)
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getDepositByACCDI">
        select accdi from
        RequestACCDI accdi left join fetch accdi.mockDeposit  left join fetch accdi.mockDeposit.personInfo
        where
        accdi.rbTbBrchId  = :rbTbBrchId
        and ((:systemId is null and accdi.systemId is null) or (:systemId is not null and upper(accdi.systemId ) = upper(:systemId)))
        and (accdi.acctId = :acctId)
        and ((:rbBrchId is null and accdi.rbBrchId is null) or (:rbBrchId is not null and accdi.rbBrchId = :rbBrchId))
    </query>

    <!--
    Находим ОМС, используя входные данные (IMA_IS)
    mockIMAccount - искомый идентификатор ОМС, ключ на ОМС
    Если запрос ничего не вернул (ничего не найдено по входным параметрам),
    то детальная информация будет сгенерирована старой заглушкой.
    Если ответ есть, но не указан id ОМС (например, умышленно), то детальная информация получена не будет
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getIMAccountByIMAIS">
        select imais from
        RequestIMAIS imais left join fetch imais.mockIMAccount left join fetch imais.mockIMAccount.personInfo
        where
        imais.rbTbBrchId  = :rbTbBrchId
        and ((:systemId is null and imais.systemId is null) or (:systemId is not null and upper(imais.systemId) = upper(:systemId)))
        and imais.acctId = :acctId
        and ((:rbBrchId is null and imais.rbBrchId is null) or (:rbBrchId is not null and imais.rbBrchId = :rbBrchId))
    </query>

    <!--
    Находим кредит, используя входные данные (LN_CI)
    mockCreditId - искомый идентификатор кредита, ключ на кредит
    Если запрос ничего не вернул (ничего не найдено по входным параметрам),
    то детальная информация будет сгенерирована старой заглушкой.
    Если ответ есть, но не указан id кредита (например, умышленно), то детальная информация получена не будет
    -->
    <query name="com.rssl.phizic.test.esberibmock.MockProductService.getCreditByLNCI">
        select lnci
        from RequestLNCI lnci left join fetch lnci.mockCredit left join fetch lnci.mockCredit.personInfo
        where
        lnci.rbTbBrchId  = :rbTbBrchId
        and ((:systemId is null and lnci.systemId is null) or (:systemId is not null and upper(lnci.systemId) = upper(:systemId)))
        and lnci.acctId = :acctId
        and ((:rbBrchId is null and lnci.rbBrchId is null) or (:rbBrchId is not null and lnci.rbBrchId = :rbBrchId))
    </query>
    
</hibernate-mapping>