// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizicgate.bars.ws.jaxrpc;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;

public class XsbRemoteClientNameResult_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final javax.xml.namespace.QName ns1_docID_QNAME = new QName("", "docID");
    private static final javax.xml.namespace.QName ns3_XsbDocID_TYPE_QNAME = new QName("http://common.xsb.webservices.bars.sbrf", "XsbDocID");
    private CombinedSerializer ns3_myXsbDocID_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_exceptionItems_QNAME = new QName("", "exceptionItems");
    private static final javax.xml.namespace.QName ns3_ArrayOfXsbExceptionItem_TYPE_QNAME = new QName("http://common.xsb.webservices.bars.sbrf", "ArrayOfXsbExceptionItem");
    private CombinedSerializer ns3_myArrayOfXsbExceptionItem_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_DOldNameBeg_QNAME = new QName("", "DOldNameBeg");
    private static final javax.xml.namespace.QName ns2_anyType_TYPE_QNAME = SchemaConstants.QNAME_TYPE_URTYPE;
    private CombinedSerializer ns2_ns2_anyType_TYPE_QNAME_Serializer;
    private static final javax.xml.namespace.QName ns1_DOldNameEnd_QNAME = new QName("", "DOldNameEnd");
    private static final javax.xml.namespace.QName ns1_SFName_QNAME = new QName("", "SFName");
    private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns1_SFNameOld_QNAME = new QName("", "SFNameOld");
    private static final javax.xml.namespace.QName ns1_SInn_QNAME = new QName("", "SInn");
    private static final javax.xml.namespace.QName ns1_SSName_QNAME = new QName("", "SSName");
    private static final javax.xml.namespace.QName ns1_SSNameOld_QNAME = new QName("", "SSNameOld");
    
    public XsbRemoteClientNameResult_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle) {
        this(type, encodingStyle, false);
    }
    
    public XsbRemoteClientNameResult_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_myXsbDocID_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizicgate.bars.ws.jaxrpc.XsbDocID.class, ns3_XsbDocID_TYPE_QNAME);
        ns3_myArrayOfXsbExceptionItem_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizicgate.bars.ws.jaxrpc.ArrayOfXsbExceptionItem.class, ns3_ArrayOfXsbExceptionItem_TYPE_QNAME);
        ns2_ns2_anyType_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns2_anyType_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
    }
    
    public java.lang.Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws java.lang.Exception {
        com.rssl.phizicgate.bars.ws.jaxrpc.XsbRemoteClientNameResult instance = new com.rssl.phizicgate.bars.ws.jaxrpc.XsbRemoteClientNameResult();
        java.lang.Object member=null;
        javax.xml.namespace.QName elementName;
        java.util.List values;
        java.lang.Object value;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_docID_QNAME)) {
                member = ns3_myXsbDocID_LiteralSerializer.deserialize(ns1_docID_QNAME, reader, context);
                instance.setDocID((com.rssl.phizicgate.bars.ws.jaxrpc.XsbDocID)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_exceptionItems_QNAME)) {
                member = ns3_myArrayOfXsbExceptionItem_LiteralSerializer.deserialize(ns1_exceptionItems_QNAME, reader, context);
                instance.setExceptionItems((com.rssl.phizicgate.bars.ws.jaxrpc.ArrayOfXsbExceptionItem)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_DOldNameBeg_QNAME)) {
                member = ns2_ns2_anyType_TYPE_QNAME_Serializer.deserialize(ns1_DOldNameBeg_QNAME, reader, context);
                instance.setDOldNameBeg((javax.xml.soap.SOAPElement)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_DOldNameBeg_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_DOldNameEnd_QNAME)) {
                member = ns2_ns2_anyType_TYPE_QNAME_Serializer.deserialize(ns1_DOldNameEnd_QNAME, reader, context);
                instance.setDOldNameEnd((javax.xml.soap.SOAPElement)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_DOldNameEnd_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SFName_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SFName_QNAME, reader, context);
                instance.setSFName((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SFName_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SFNameOld_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SFNameOld_QNAME, reader, context);
                instance.setSFNameOld((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SFNameOld_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SInn_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SInn_QNAME, reader, context);
                instance.setSInn((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SInn_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SSName_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SSName_QNAME, reader, context);
                instance.setSSName((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SSName_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SSNameOld_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SSNameOld_QNAME, reader, context);
                instance.setSSNameOld((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SSNameOld_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object)instance;
    }
    
    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        com.rssl.phizicgate.bars.ws.jaxrpc.XsbRemoteClientNameResult instance = (com.rssl.phizicgate.bars.ws.jaxrpc.XsbRemoteClientNameResult)obj;
        
    }
    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        com.rssl.phizicgate.bars.ws.jaxrpc.XsbRemoteClientNameResult instance = (com.rssl.phizicgate.bars.ws.jaxrpc.XsbRemoteClientNameResult)obj;
        
        ns3_myXsbDocID_LiteralSerializer.serialize(instance.getDocID(), ns1_docID_QNAME, null, writer, context);
        ns3_myArrayOfXsbExceptionItem_LiteralSerializer.serialize(instance.getExceptionItems(), ns1_exceptionItems_QNAME, null, writer, context);
        ns2_ns2_anyType_TYPE_QNAME_Serializer.serialize(instance.getDOldNameBeg(), ns1_DOldNameBeg_QNAME, null, writer, context);
        ns2_ns2_anyType_TYPE_QNAME_Serializer.serialize(instance.getDOldNameEnd(), ns1_DOldNameEnd_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSFName(), ns1_SFName_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSFNameOld(), ns1_SFNameOld_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSInn(), ns1_SInn_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSSName(), ns1_SSName_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSSNameOld(), ns1_SSNameOld_QNAME, null, writer, context);
    }
}
