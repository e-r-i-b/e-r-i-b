// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizic.authgate.way4.ws.generated;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.xsd.XSDConstants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;

public class VerifyAttRsType_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final javax.xml.namespace.QName ns1_STAN_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "STAN");
    private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns1_Status_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "Status");
    private static final javax.xml.namespace.QName ns1_UserInfo_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "UserInfo");
    private static final javax.xml.namespace.QName ns1_UserInfoType_TYPE_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "UserInfoType");
    private CombinedSerializer ns1_myUserInfoType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_Token_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "Token");
    private static final javax.xml.namespace.QName ns1_Attempts_QNAME = new QName("http://www.openwaygroup.com/iPAS/WS", "Attempts");
    private static final javax.xml.namespace.QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
    private CombinedSerializer ns2_myns2__int__java_lang_Integer_Int_Serializer;
    
    public VerifyAttRsType_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle) {
        this(type, encodingStyle, false);
    }
    
    public VerifyAttRsType_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns1_myUserInfoType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.way4.ws.generated.UserInfoType.class, ns1_UserInfoType_TYPE_QNAME);
        ns2_myns2__int__java_lang_Integer_Int_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.Integer.class, ns2_int_TYPE_QNAME);
    }
    
    public java.lang.Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws java.lang.Exception {
        com.rssl.phizic.authgate.way4.ws.generated.VerifyAttRsType instance = new com.rssl.phizic.authgate.way4.ws.generated.VerifyAttRsType();
        java.lang.Object member=null;
        javax.xml.namespace.QName elementName;
        java.util.List values;
        java.lang.Object value;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_STAN_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_STAN_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setSTAN((java.lang.String)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Status_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Status_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setStatus((java.lang.String)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_UserInfo_QNAME)) {
                member = ns1_myUserInfoType_LiteralSerializer.deserialize(ns1_UserInfo_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setUserInfo((com.rssl.phizic.authgate.way4.ws.generated.UserInfoType)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Token_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Token_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setToken((java.lang.String)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Attempts_QNAME)) {
                member = ns2_myns2__int__java_lang_Integer_Int_Serializer.deserialize(ns1_Attempts_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setAttempts((java.lang.Integer)member);
                reader.nextElementContent();
            }
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object)instance;
    }
    
    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        com.rssl.phizic.authgate.way4.ws.generated.VerifyAttRsType instance = (com.rssl.phizic.authgate.way4.ws.generated.VerifyAttRsType)obj;
        
    }
    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        com.rssl.phizic.authgate.way4.ws.generated.VerifyAttRsType instance = (com.rssl.phizic.authgate.way4.ws.generated.VerifyAttRsType)obj;
        
        if (instance.getSTAN() != null) {
            ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSTAN(), ns1_STAN_QNAME, null, writer, context);
        }
        if (instance.getStatus() != null) {
            ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getStatus(), ns1_Status_QNAME, null, writer, context);
        }
        if (instance.getUserInfo() != null) {
            ns1_myUserInfoType_LiteralSerializer.serialize(instance.getUserInfo(), ns1_UserInfo_QNAME, null, writer, context);
        }
        if (instance.getToken() != null) {
            ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getToken(), ns1_Token_QNAME, null, writer, context);
        }
        if (instance.getAttempts() != null) {
            ns2_myns2__int__java_lang_Integer_Int_Serializer.serialize(instance.getAttempts(), ns1_Attempts_QNAME, null, writer, context);
        }
    }
}
