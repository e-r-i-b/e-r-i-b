// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizic.authgate.csa.ws.generated;

import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.StreamingSenderState;
import com.sun.xml.rpc.client.http.HttpClientTransport;
import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPDeserializationState;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPNamespaceConstants;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;

import java.rmi.RemoteException;
import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.handler.HandlerChain;

public class AuthServicePortType_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements com.rssl.phizic.authgate.csa.ws.generated.AuthServicePortType {
    
    
    
    /*
     *  public constructor
     */
    public AuthServicePortType_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://esk3:8060/CODListener/csa.asmx");
    }
    
    
    /*
     *  implementation of authSessionCancel
     */
    public com.rssl.phizic.authgate.csa.ws.generated.AuthSessionCancelRsType authSessionCancel(java.lang.String SID)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(AuthSessionCancel_OPCODE);
            
            com.rssl.phizic.authgate.csa.ws.generated.AuthSessionCancelRqType _myAuthSessionCancelRqType = new com.rssl.phizic.authgate.csa.ws.generated.AuthSessionCancelRqType();
            _myAuthSessionCancelRqType.setSID(SID);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_AuthSessionCancel_AuthSessionCancelRq_QNAME);
            _bodyBlock.setValue(_myAuthSessionCancelRqType);
            _bodyBlock.setSerializer(ns1_myAuthSessionCancelRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "AuthSessionCancel");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.phizic.authgate.csa.ws.generated.AuthSessionCancelRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.AuthSessionCancelRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.AuthSessionCancelRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of prepareAuthentication
     */
    public com.rssl.phizic.authgate.csa.ws.generated.PrepareAuthenticationRsType prepareAuthentication(java.lang.String SID, com.rssl.phizic.authgate.csa.ws.generated.GetPutListType authContext)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(PrepareAuthentication_OPCODE);
            
            com.rssl.phizic.authgate.csa.ws.generated.PrepareAuthenticationRqType _myPrepareAuthenticationRqType = new com.rssl.phizic.authgate.csa.ws.generated.PrepareAuthenticationRqType();
            _myPrepareAuthenticationRqType.setSID(SID);
            _myPrepareAuthenticationRqType.setAuthContext(authContext);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_PrepareAuthentication_PrepareAuthenticationRq_QNAME);
            _bodyBlock.setValue(_myPrepareAuthenticationRqType);
            _bodyBlock.setSerializer(ns1_myPrepareAuthenticationRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "PrepareAuthentication");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.phizic.authgate.csa.ws.generated.PrepareAuthenticationRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.PrepareAuthenticationRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.PrepareAuthenticationRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of test
     */
    public java.lang.String test(java.lang.String inpXml)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(Test_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_Test_inpXml_QNAME);
            _bodyBlock.setValue(inpXml);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "http://csa.sbrf.ru/AuthService/Test");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            java.lang.String _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (java.lang.String)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (java.lang.String)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of setAlias
     */
    public com.rssl.phizic.authgate.csa.ws.generated.StatusType setAlias(java.lang.String SID, java.lang.String userId, java.lang.String alias, java.lang.String newAlias)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(SetAlias_OPCODE);
            
            com.rssl.phizic.authgate.csa.ws.generated.SetAliasRqType _mySetAliasRqType = new com.rssl.phizic.authgate.csa.ws.generated.SetAliasRqType();
            _mySetAliasRqType.setSID(SID);
            _mySetAliasRqType.setUserId(userId);
            _mySetAliasRqType.setAlias(alias);
            _mySetAliasRqType.setNewAlias(newAlias);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_SetAlias_SetAliasRq_QNAME);
            _bodyBlock.setValue(_mySetAliasRqType);
            _bodyBlock.setSerializer(ns1_mySetAliasRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "SetAlias");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.phizic.authgate.csa.ws.generated.SetAliasRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.SetAliasRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.SetAliasRsType)_responseObj;
            }
            
            return _result.getStatus();
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of moveSession
     */
    public com.rssl.phizic.authgate.csa.ws.generated.MoveSessionRsType moveSession(java.lang.String SID, java.lang.String authTokenRq, java.lang.String nextService, com.rssl.phizic.authgate.csa.ws.generated.GetPutListType authContext)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(MoveSession_OPCODE);
            
            com.rssl.phizic.authgate.csa.ws.generated.MoveSessionRqType _myMoveSessionRqType = new com.rssl.phizic.authgate.csa.ws.generated.MoveSessionRqType();
            _myMoveSessionRqType.setSID(SID);
            _myMoveSessionRqType.setAuthTokenRq(authTokenRq);
            _myMoveSessionRqType.setNextService(nextService);
            _myMoveSessionRqType.setAuthContext(authContext);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_MoveSession_MoveSessionRq_QNAME);
            _bodyBlock.setValue(_myMoveSessionRqType);
            _bodyBlock.setSerializer(ns1_myMoveSessionRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "MoveSession");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.phizic.authgate.csa.ws.generated.MoveSessionRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.MoveSessionRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.MoveSessionRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of checkSession
     */
    public com.rssl.phizic.authgate.csa.ws.generated.CheckSessionRsType checkSession(com.rssl.phizic.authgate.csa.ws.generated.AuthTokenType authToken, java.lang.String service, com.rssl.phizic.authgate.csa.ws.generated.GetPutListType authContext)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(CheckSession_OPCODE);
            
            com.rssl.phizic.authgate.csa.ws.generated.CheckSessionRqType _myCheckSessionRqType = new com.rssl.phizic.authgate.csa.ws.generated.CheckSessionRqType();
            _myCheckSessionRqType.setAuthToken(authToken);
            _myCheckSessionRqType.setService(service);
            _myCheckSessionRqType.setAuthContext(authContext);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_CheckSession_CheckSessionRq_QNAME);
            _bodyBlock.setValue(_myCheckSessionRqType);
            _bodyBlock.setSerializer(ns1_myCheckSessionRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "CheckSession");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.phizic.authgate.csa.ws.generated.CheckSessionRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.CheckSessionRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.CheckSessionRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of checkAuthentication
     */
    public com.rssl.phizic.authgate.csa.ws.generated.CheckAuthenticationRsType checkAuthentication(com.rssl.phizic.authgate.csa.ws.generated.AuthTokenType authToken, java.lang.String service, com.rssl.phizic.authgate.csa.ws.generated.GetPutListType authContext)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(CheckAuthentication_OPCODE);
            
            com.rssl.phizic.authgate.csa.ws.generated.CheckAuthenticationRqType _myCheckAuthenticationRqType = new com.rssl.phizic.authgate.csa.ws.generated.CheckAuthenticationRqType();
            _myCheckAuthenticationRqType.setAuthToken(authToken);
            _myCheckAuthenticationRqType.setService(service);
            _myCheckAuthenticationRqType.setAuthContext(authContext);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_CheckAuthentication_CheckAuthenticationRq_QNAME);
            _bodyBlock.setValue(_myCheckAuthenticationRqType);
            _bodyBlock.setSerializer(ns1_myCheckAuthenticationRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "CheckAuthentication");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.phizic.authgate.csa.ws.generated.CheckAuthenticationRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.CheckAuthenticationRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.CheckAuthenticationRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of prepareSession
     */
    public com.rssl.phizic.authgate.csa.ws.generated.PrepareSessionRsType prepareSession(java.lang.String userId, java.lang.String password)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(PrepareSession_OPCODE);
            
            com.rssl.phizic.authgate.csa.ws.generated.PrepareSessionRqType _myPrepareSessionRqType = new com.rssl.phizic.authgate.csa.ws.generated.PrepareSessionRqType();
            _myPrepareSessionRqType.setUserId(userId);
            _myPrepareSessionRqType.setPassword(password);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_PrepareSession_PrepareSessionRq_QNAME);
            _bodyBlock.setValue(_myPrepareSessionRqType);
            _bodyBlock.setSerializer(ns1_myPrepareSessionRqType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "PrepareSession");
            
            _send((java.lang.String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.rssl.phizic.authgate.csa.ws.generated.PrepareSessionRsType _result = null;
            java.lang.Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.PrepareSessionRsType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.rssl.phizic.authgate.csa.ws.generated.PrepareSessionRsType)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case AuthSessionCancel_OPCODE:
                _deserialize_AuthSessionCancel(bodyReader, deserializationContext, state);
                break;
            case PrepareAuthentication_OPCODE:
                _deserialize_PrepareAuthentication(bodyReader, deserializationContext, state);
                break;
            case Test_OPCODE:
                _deserialize_Test(bodyReader, deserializationContext, state);
                break;
            case SetAlias_OPCODE:
                _deserialize_SetAlias(bodyReader, deserializationContext, state);
                break;
            case MoveSession_OPCODE:
                _deserialize_MoveSession(bodyReader, deserializationContext, state);
                break;
            case CheckSession_OPCODE:
                _deserialize_CheckSession(bodyReader, deserializationContext, state);
                break;
            case CheckAuthentication_OPCODE:
                _deserialize_CheckAuthentication(bodyReader, deserializationContext, state);
                break;
            case PrepareSession_OPCODE:
                _deserialize_PrepareSession(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the AuthSessionCancel operation.
     */
    private void _deserialize_AuthSessionCancel(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myAuthSessionCancelRsTypeObj =
            ns1_myAuthSessionCancelRsType_LiteralSerializer.deserialize(ns1_AuthSessionCancel_AuthSessionCancelRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_AuthSessionCancel_AuthSessionCancelRs_QNAME);
        bodyBlock.setValue(myAuthSessionCancelRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the PrepareAuthentication operation.
     */
    private void _deserialize_PrepareAuthentication(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myPrepareAuthenticationRsTypeObj =
            ns1_myPrepareAuthenticationRsType_LiteralSerializer.deserialize(ns1_PrepareAuthentication_PrepareAuthenticationRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_PrepareAuthentication_PrepareAuthenticationRs_QNAME);
        bodyBlock.setValue(myPrepareAuthenticationRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the Test operation.
     */
    private void _deserialize_Test(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns3_Test_TestResult_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns3_Test_TestResult_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the SetAlias operation.
     */
    private void _deserialize_SetAlias(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object mySetAliasRsTypeObj =
            ns1_mySetAliasRsType_LiteralSerializer.deserialize(ns1_SetAlias_SetAliasRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_SetAlias_SetAliasRs_QNAME);
        bodyBlock.setValue(mySetAliasRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the MoveSession operation.
     */
    private void _deserialize_MoveSession(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myMoveSessionRsTypeObj =
            ns1_myMoveSessionRsType_LiteralSerializer.deserialize(ns1_MoveSession_MoveSessionRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_MoveSession_MoveSessionRs_QNAME);
        bodyBlock.setValue(myMoveSessionRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the CheckSession operation.
     */
    private void _deserialize_CheckSession(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myCheckSessionRsTypeObj =
            ns1_myCheckSessionRsType_LiteralSerializer.deserialize(ns1_CheckSession_CheckSessionRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_CheckSession_CheckSessionRs_QNAME);
        bodyBlock.setValue(myCheckSessionRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the CheckAuthentication operation.
     */
    private void _deserialize_CheckAuthentication(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myCheckAuthenticationRsTypeObj =
            ns1_myCheckAuthenticationRsType_LiteralSerializer.deserialize(ns1_CheckAuthentication_CheckAuthenticationRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_CheckAuthentication_CheckAuthenticationRs_QNAME);
        bodyBlock.setValue(myCheckAuthenticationRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the PrepareSession operation.
     */
    private void _deserialize_PrepareSession(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        java.lang.Object myPrepareSessionRsTypeObj =
            ns1_myPrepareSessionRsType_LiteralSerializer.deserialize(ns1_PrepareSession_PrepareSessionRs_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_PrepareSession_PrepareSessionRs_QNAME);
        bodyBlock.setValue(myPrepareSessionRsTypeObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected java.lang.String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public java.lang.String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public java.lang.String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(java.lang.String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myCheckAuthenticationRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.CheckAuthenticationRqType.class, ns1_CheckAuthenticationRqType_TYPE_QNAME);
        ns1_mySetAliasRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.SetAliasRsType.class, ns1_SetAliasRsType_TYPE_QNAME);
        ns1_myPrepareAuthenticationRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.PrepareAuthenticationRqType.class, ns1_PrepareAuthenticationRqType_TYPE_QNAME);
        ns1_myMoveSessionRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.MoveSessionRqType.class, ns1_MoveSessionRqType_TYPE_QNAME);
        ns1_myCheckAuthenticationRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.CheckAuthenticationRsType.class, ns1_CheckAuthenticationRsType_TYPE_QNAME);
        ns1_myPrepareSessionRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.PrepareSessionRsType.class, ns1_PrepareSessionRsType_TYPE_QNAME);
        ns1_myCheckSessionRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.CheckSessionRqType.class, ns1_CheckSessionRqType_TYPE_QNAME);
        ns1_myPrepareSessionRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.PrepareSessionRqType.class, ns1_PrepareSessionRqType_TYPE_QNAME);
        ns1_myAuthSessionCancelRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.AuthSessionCancelRsType.class, ns1_AuthSessionCancelRsType_TYPE_QNAME);
        ns1_myPrepareAuthenticationRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.PrepareAuthenticationRsType.class, ns1_PrepareAuthenticationRsType_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns1_myAuthSessionCancelRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.AuthSessionCancelRqType.class, ns1_AuthSessionCancelRqType_TYPE_QNAME);
        ns1_mySetAliasRqType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.SetAliasRqType.class, ns1_SetAliasRqType_TYPE_QNAME);
        ns1_myMoveSessionRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.MoveSessionRsType.class, ns1_MoveSessionRsType_TYPE_QNAME);
        ns1_myCheckSessionRsType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.rssl.phizic.authgate.csa.ws.generated.CheckSessionRsType.class, ns1_CheckSessionRsType_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName _portName = new QName("http://csa.sbrf.ru/AuthService", "AuthServicePort");
    private static final int AuthSessionCancel_OPCODE = 0;
    private static final int PrepareAuthentication_OPCODE = 1;
    private static final int Test_OPCODE = 2;
    private static final int SetAlias_OPCODE = 3;
    private static final int MoveSession_OPCODE = 4;
    private static final int CheckSession_OPCODE = 5;
    private static final int CheckAuthentication_OPCODE = 6;
    private static final int PrepareSession_OPCODE = 7;
    private static final javax.xml.namespace.QName ns1_AuthSessionCancel_AuthSessionCancelRq_QNAME = new QName("http://csa.sbrf.ru/AuthService", "AuthSessionCancelRq");
    private static final javax.xml.namespace.QName ns1_AuthSessionCancelRqType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "AuthSessionCancelRqType");
    private CombinedSerializer ns1_myAuthSessionCancelRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_AuthSessionCancel_AuthSessionCancelRs_QNAME = new QName("http://csa.sbrf.ru/AuthService", "AuthSessionCancelRs");
    private static final javax.xml.namespace.QName ns1_AuthSessionCancelRsType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "AuthSessionCancelRsType");
    private CombinedSerializer ns1_myAuthSessionCancelRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_PrepareAuthentication_PrepareAuthenticationRq_QNAME = new QName("http://csa.sbrf.ru/AuthService", "PrepareAuthenticationRq");
    private static final javax.xml.namespace.QName ns1_PrepareAuthenticationRqType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "PrepareAuthenticationRqType");
    private CombinedSerializer ns1_myPrepareAuthenticationRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_PrepareAuthentication_PrepareAuthenticationRs_QNAME = new QName("http://csa.sbrf.ru/AuthService", "PrepareAuthenticationRs");
    private static final javax.xml.namespace.QName ns1_PrepareAuthenticationRsType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "PrepareAuthenticationRsType");
    private CombinedSerializer ns1_myPrepareAuthenticationRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_Test_inpXml_QNAME = new QName("http://csa.sbrf.ru/AuthService", "inpXml");
    private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns3_Test_TestResult_QNAME = new QName("http://www.contoso.com", "TestResult");
    private static final javax.xml.namespace.QName ns1_SetAlias_SetAliasRq_QNAME = new QName("http://csa.sbrf.ru/AuthService", "SetAliasRq");
    private static final javax.xml.namespace.QName ns1_SetAliasRqType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "SetAliasRqType");
    private CombinedSerializer ns1_mySetAliasRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_SetAlias_SetAliasRs_QNAME = new QName("http://csa.sbrf.ru/AuthService", "SetAliasRs");
    private static final javax.xml.namespace.QName ns1_SetAliasRsType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "SetAliasRsType");
    private CombinedSerializer ns1_mySetAliasRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_MoveSession_MoveSessionRq_QNAME = new QName("http://csa.sbrf.ru/AuthService", "MoveSessionRq");
    private static final javax.xml.namespace.QName ns1_MoveSessionRqType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "MoveSessionRqType");
    private CombinedSerializer ns1_myMoveSessionRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_MoveSession_MoveSessionRs_QNAME = new QName("http://csa.sbrf.ru/AuthService", "MoveSessionRs");
    private static final javax.xml.namespace.QName ns1_MoveSessionRsType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "MoveSessionRsType");
    private CombinedSerializer ns1_myMoveSessionRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_CheckSession_CheckSessionRq_QNAME = new QName("http://csa.sbrf.ru/AuthService", "CheckSessionRq");
    private static final javax.xml.namespace.QName ns1_CheckSessionRqType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "CheckSessionRqType");
    private CombinedSerializer ns1_myCheckSessionRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_CheckSession_CheckSessionRs_QNAME = new QName("http://csa.sbrf.ru/AuthService", "CheckSessionRs");
    private static final javax.xml.namespace.QName ns1_CheckSessionRsType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "CheckSessionRsType");
    private CombinedSerializer ns1_myCheckSessionRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_CheckAuthentication_CheckAuthenticationRq_QNAME = new QName("http://csa.sbrf.ru/AuthService", "CheckAuthenticationRq");
    private static final javax.xml.namespace.QName ns1_CheckAuthenticationRqType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "CheckAuthenticationRqType");
    private CombinedSerializer ns1_myCheckAuthenticationRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_CheckAuthentication_CheckAuthenticationRs_QNAME = new QName("http://csa.sbrf.ru/AuthService", "CheckAuthenticationRs");
    private static final javax.xml.namespace.QName ns1_CheckAuthenticationRsType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "CheckAuthenticationRsType");
    private CombinedSerializer ns1_myCheckAuthenticationRsType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_PrepareSession_PrepareSessionRq_QNAME = new QName("http://csa.sbrf.ru/AuthService", "PrepareSessionRq");
    private static final javax.xml.namespace.QName ns1_PrepareSessionRqType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "PrepareSessionRqType");
    private CombinedSerializer ns1_myPrepareSessionRqType_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_PrepareSession_PrepareSessionRs_QNAME = new QName("http://csa.sbrf.ru/AuthService", "PrepareSessionRs");
    private static final javax.xml.namespace.QName ns1_PrepareSessionRsType_TYPE_QNAME = new QName("http://csa.sbrf.ru/AuthService", "PrepareSessionRsType");
    private CombinedSerializer ns1_myPrepareSessionRsType_LiteralSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "http://csa.sbrf.ru/AuthService"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
