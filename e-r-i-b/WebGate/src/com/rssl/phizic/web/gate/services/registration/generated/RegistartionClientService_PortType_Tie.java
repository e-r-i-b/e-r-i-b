// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizic.web.gate.services.registration.generated;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.server.*;
import javax.xml.rpc.handler.HandlerInfo;
import com.sun.xml.rpc.client.HandlerChainImpl;

public class RegistartionClientService_PortType_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public RegistartionClientService_PortType_Tie() throws Exception {
        super(new com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_Server_Impl_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: update
     */
    private void invoke_update(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update_RequestStruct myRegistartionClientService_PortType_update_RequestStruct = null;
        Object myRegistartionClientService_PortType_update_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myRegistartionClientService_PortType_update_RequestStructObj instanceof SOAPDeserializationState) {
            myRegistartionClientService_PortType_update_RequestStruct = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update_RequestStruct)((SOAPDeserializationState)myRegistartionClientService_PortType_update_RequestStructObj).getInstance();
        } else {
            myRegistartionClientService_PortType_update_RequestStruct = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update_RequestStruct)myRegistartionClientService_PortType_update_RequestStructObj;
        }
        
        try {
            ((com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType) getTarget()).update(myRegistartionClientService_PortType_update_RequestStruct.getClient_1(), myRegistartionClientService_PortType_update_RequestStruct.getCalendar_2(), myRegistartionClientService_PortType_update_RequestStruct.isBoolean_3(), myRegistartionClientService_PortType_update_RequestStruct.getUser_4());
            com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update_ResponseStruct myRegistartionClientService_PortType_update_ResponseStruct =
                new com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_update_updateResponse_QNAME);
            bodyBlock.setValue(myRegistartionClientService_PortType_update_ResponseStruct);
            bodyBlock.setSerializer(ns1_myRegistartionClientService_PortType_update_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: update2
     */
    private void invoke_update2(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update2_RequestStruct myRegistartionClientService_PortType_update2_RequestStruct = null;
        Object myRegistartionClientService_PortType_update2_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myRegistartionClientService_PortType_update2_RequestStructObj instanceof SOAPDeserializationState) {
            myRegistartionClientService_PortType_update2_RequestStruct = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update2_RequestStruct)((SOAPDeserializationState)myRegistartionClientService_PortType_update2_RequestStructObj).getInstance();
        } else {
            myRegistartionClientService_PortType_update2_RequestStruct = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update2_RequestStruct)myRegistartionClientService_PortType_update2_RequestStructObj;
        }
        
        try {
            ((com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType) getTarget()).update2(myRegistartionClientService_PortType_update2_RequestStruct.getOffice_1(), myRegistartionClientService_PortType_update2_RequestStruct.getString_2());
            com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update2_ResponseStruct myRegistartionClientService_PortType_update2_ResponseStruct =
                new com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update2_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_update2_update2Response_QNAME);
            bodyBlock.setValue(myRegistartionClientService_PortType_update2_ResponseStruct);
            bodyBlock.setSerializer(ns1_myRegistartionClientService_PortType_update2_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: cancellation
     */
    private void invoke_cancellation(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_cancellation_RequestStruct myRegistartionClientService_PortType_cancellation_RequestStruct = null;
        Object myRegistartionClientService_PortType_cancellation_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myRegistartionClientService_PortType_cancellation_RequestStructObj instanceof SOAPDeserializationState) {
            myRegistartionClientService_PortType_cancellation_RequestStruct = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_cancellation_RequestStruct)((SOAPDeserializationState)myRegistartionClientService_PortType_cancellation_RequestStructObj).getInstance();
        } else {
            myRegistartionClientService_PortType_cancellation_RequestStruct = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_cancellation_RequestStruct)myRegistartionClientService_PortType_cancellation_RequestStructObj;
        }
        
        try {
            com.rssl.phizic.web.gate.services.registration.generated.CancelationCallBackImpl result = 
                ((com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType) getTarget()).cancellation(myRegistartionClientService_PortType_cancellation_RequestStruct.getClient_1(), myRegistartionClientService_PortType_cancellation_RequestStruct.getString_2(), myRegistartionClientService_PortType_cancellation_RequestStruct.getCalendar_3(), myRegistartionClientService_PortType_cancellation_RequestStruct.getString_4(), myRegistartionClientService_PortType_cancellation_RequestStruct.getString_5());
            com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_cancellation_ResponseStruct myRegistartionClientService_PortType_cancellation_ResponseStruct =
                new com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_cancellation_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myRegistartionClientService_PortType_cancellation_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_cancellation_cancellationResponse_QNAME);
            bodyBlock.setValue(myRegistartionClientService_PortType_cancellation_ResponseStruct);
            bodyBlock.setSerializer(ns1_myRegistartionClientService_PortType_cancellation_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: register
     */
    private void invoke_register(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_register_RequestStruct myRegistartionClientService_PortType_register_RequestStruct = null;
        Object myRegistartionClientService_PortType_register_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myRegistartionClientService_PortType_register_RequestStructObj instanceof SOAPDeserializationState) {
            myRegistartionClientService_PortType_register_RequestStruct = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_register_RequestStruct)((SOAPDeserializationState)myRegistartionClientService_PortType_register_RequestStructObj).getInstance();
        } else {
            myRegistartionClientService_PortType_register_RequestStruct = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_register_RequestStruct)myRegistartionClientService_PortType_register_RequestStructObj;
        }
        
        try {
            ((com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType) getTarget()).register(myRegistartionClientService_PortType_register_RequestStruct.getOffice_1(), myRegistartionClientService_PortType_register_RequestStruct.getString_2());
            com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_register_ResponseStruct myRegistartionClientService_PortType_register_ResponseStruct =
                new com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_register_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_register_registerResponse_QNAME);
            bodyBlock.setValue(myRegistartionClientService_PortType_register_ResponseStruct);
            bodyBlock.setSerializer(ns1_myRegistartionClientService_PortType_register_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_update_update_QNAME)) {
            state.getRequest().setOperationCode(update_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_update2_update2_QNAME)) {
            state.getRequest().setOperationCode(update2_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_cancellation_cancellation_QNAME)) {
            state.getRequest().setOperationCode(cancellation_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_register_register_QNAME)) {
            state.getRequest().setOperationCode(register_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case update_OPCODE:
                deserialize_update(bodyReader, deserializationContext, state);
                break;
            case update2_OPCODE:
                deserialize_update2(bodyReader, deserializationContext, state);
                break;
            case cancellation_OPCODE:
                deserialize_cancellation(bodyReader, deserializationContext, state);
                break;
            case register_OPCODE:
                deserialize_register(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the update operation.
     */
    private void deserialize_update(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRegistartionClientService_PortType_update_RequestStructObj =
            ns1_myRegistartionClientService_PortType_update_RequestStruct_SOAPSerializer.deserialize(ns1_update_update_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_update_update_QNAME);
        bodyBlock.setValue(myRegistartionClientService_PortType_update_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the update2 operation.
     */
    private void deserialize_update2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRegistartionClientService_PortType_update2_RequestStructObj =
            ns1_myRegistartionClientService_PortType_update2_RequestStruct_SOAPSerializer.deserialize(ns1_update2_update2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_update2_update2_QNAME);
        bodyBlock.setValue(myRegistartionClientService_PortType_update2_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the cancellation operation.
     */
    private void deserialize_cancellation(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRegistartionClientService_PortType_cancellation_RequestStructObj =
            ns1_myRegistartionClientService_PortType_cancellation_RequestStruct_SOAPSerializer.deserialize(ns1_cancellation_cancellation_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_cancellation_cancellation_QNAME);
        bodyBlock.setValue(myRegistartionClientService_PortType_cancellation_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the register operation.
     */
    private void deserialize_register(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRegistartionClientService_PortType_register_RequestStructObj =
            ns1_myRegistartionClientService_PortType_register_RequestStruct_SOAPSerializer.deserialize(ns1_register_register_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_register_register_QNAME);
        bodyBlock.setValue(myRegistartionClientService_PortType_register_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case update_OPCODE:
                invoke_update(state);
                break;
            case update2_OPCODE:
                invoke_update2(state);
                break;
            case cancellation_OPCODE:
                invoke_cancellation(state);
                break;
            case register_OPCODE:
                invoke_register(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    public java.lang.String getDefaultEnvelopeEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public java.lang.String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_update_update_QNAME)) {
            return update_OPCODE;
        }
        if (name.equals(ns1_update2_update2_QNAME)) {
            return update2_OPCODE;
        }
        if (name.equals(ns1_cancellation_cancellation_QNAME)) {
            return cancellation_OPCODE;
        }
        if (name.equals(ns1_register_register_QNAME)) {
            return register_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case update_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.registration.generated.Client.class,java.util.Calendar.class,Boolean.TYPE,com.rssl.phizic.web.gate.services.registration.generated.User.class };
                    theMethod = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType.class).getMethod("update", carray);
                }
                break;
            
            case update2_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.registration.generated.Office.class,java.lang.String.class };
                    theMethod = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType.class).getMethod("update2", carray);
                }
                break;
            
            case cancellation_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.registration.generated.Client.class,java.lang.String.class,java.util.Calendar.class,java.lang.String.class,java.lang.String.class };
                    theMethod = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType.class).getMethod("cancellation", carray);
                }
                break;
            
            case register_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.registration.generated.Office.class,java.lang.String.class };
                    theMethod = (com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType.class).getMethod("register", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[4];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 4 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myRegistartionClientService_PortType_register_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_register_ResponseStruct.class, ns1_registerResponse_TYPE_QNAME);
        ns1_myRegistartionClientService_PortType_register_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_register_RequestStruct.class, ns1_register_TYPE_QNAME);
        ns1_myRegistartionClientService_PortType_update2_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update2_RequestStruct.class, ns1_update2_TYPE_QNAME);
        ns1_myRegistartionClientService_PortType_cancellation_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_cancellation_ResponseStruct.class, ns1_cancellationResponse_TYPE_QNAME);
        ns1_myRegistartionClientService_PortType_cancellation_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_cancellation_RequestStruct.class, ns1_cancellation_TYPE_QNAME);
        ns1_myRegistartionClientService_PortType_update_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update_ResponseStruct.class, ns1_updateResponse_TYPE_QNAME);
        ns1_myRegistartionClientService_PortType_update_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update_RequestStruct.class, ns1_update_TYPE_QNAME);
        ns1_myRegistartionClientService_PortType_update2_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.registration.generated.RegistartionClientService_PortType_update2_ResponseStruct.class, ns1_update2Response_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName portName = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "RegistartionClientService_PortTypePort");
    private static final int update_OPCODE = 0;
    private static final int update2_OPCODE = 1;
    private static final int cancellation_OPCODE = 2;
    private static final int register_OPCODE = 3;
    private static final javax.xml.namespace.QName ns1_update_update_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "update");
    private static final javax.xml.namespace.QName ns1_update_TYPE_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "update");
    private CombinedSerializer ns1_myRegistartionClientService_PortType_update_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_update_updateResponse_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "updateResponse");
    private static final javax.xml.namespace.QName ns1_updateResponse_TYPE_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "updateResponse");
    private CombinedSerializer ns1_myRegistartionClientService_PortType_update_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_update2_update2_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "update2");
    private static final javax.xml.namespace.QName ns1_update2_TYPE_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "update2");
    private CombinedSerializer ns1_myRegistartionClientService_PortType_update2_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_update2_update2Response_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "update2Response");
    private static final javax.xml.namespace.QName ns1_update2Response_TYPE_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "update2Response");
    private CombinedSerializer ns1_myRegistartionClientService_PortType_update2_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_cancellation_cancellation_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "cancellation");
    private static final javax.xml.namespace.QName ns1_cancellation_TYPE_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "cancellation");
    private CombinedSerializer ns1_myRegistartionClientService_PortType_cancellation_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_cancellation_cancellationResponse_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "cancellationResponse");
    private static final javax.xml.namespace.QName ns1_cancellationResponse_TYPE_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "cancellationResponse");
    private CombinedSerializer ns1_myRegistartionClientService_PortType_cancellation_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_register_register_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "register");
    private static final javax.xml.namespace.QName ns1_register_TYPE_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "register");
    private CombinedSerializer ns1_myRegistartionClientService_PortType_register_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_register_registerResponse_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "registerResponse");
    private static final javax.xml.namespace.QName ns1_registerResponse_TYPE_QNAME = new QName("http://generated.registration.services.gate.web.phizic.rssl.com", "registerResponse");
    private CombinedSerializer ns1_myRegistartionClientService_PortType_register_ResponseStruct_SOAPSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "http://generated.registration.services.gate.web.phizic.rssl.com",
                                            "ns1", "http://java.sun.com/jax-rpc-ri/internal"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
