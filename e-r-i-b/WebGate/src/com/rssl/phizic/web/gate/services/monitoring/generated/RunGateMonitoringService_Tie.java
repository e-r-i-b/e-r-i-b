// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizic.web.gate.services.monitoring.generated;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.server.*;
import javax.xml.rpc.handler.HandlerInfo;
import com.sun.xml.rpc.client.HandlerChainImpl;

public class RunGateMonitoringService_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public RunGateMonitoringService_Tie() throws Exception {
        super(new com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringServiceImpl_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: __forGenerateMonitoringStateParameters
     */
    private void invoke___forGenerateMonitoringStateParameters(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct = null;
        Object myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStructObj instanceof SOAPDeserializationState) {
            myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct = (com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct)((SOAPDeserializationState)myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStructObj).getInstance();
        } else {
            myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct = (com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct)myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStructObj;
        }
        
        try {
            com.rssl.phizic.web.gate.services.monitoring.generated.MonitoringStateParameters result = 
                ((com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService) getTarget()).__forGenerateMonitoringStateParameters();
            com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct myRunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct =
                new com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myRunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1___forGenerateMonitoringStateParameters___forGenerateMonitoringStateParametersResponse_QNAME);
            bodyBlock.setValue(myRunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct);
            bodyBlock.setSerializer(ns1_myRunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: run
     */
    private void invoke_run(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService_run_RequestStruct myRunGateMonitoringService_run_RequestStruct = null;
        Object myRunGateMonitoringService_run_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myRunGateMonitoringService_run_RequestStructObj instanceof SOAPDeserializationState) {
            myRunGateMonitoringService_run_RequestStruct = (com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService_run_RequestStruct)((SOAPDeserializationState)myRunGateMonitoringService_run_RequestStructObj).getInstance();
        } else {
            myRunGateMonitoringService_run_RequestStruct = (com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService_run_RequestStruct)myRunGateMonitoringService_run_RequestStructObj;
        }
        
        try {
            ((com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService) getTarget()).run(myRunGateMonitoringService_run_RequestStruct.getMonitoringParameters_1());
            com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService_run_ResponseStruct myRunGateMonitoringService_run_ResponseStruct =
                new com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService_run_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_run_runResponse_QNAME);
            bodyBlock.setValue(myRunGateMonitoringService_run_ResponseStruct);
            bodyBlock.setSerializer(ns1_myRunGateMonitoringService_run_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1___forGenerateMonitoringStateParameters___forGenerateMonitoringStateParameters_QNAME)) {
            state.getRequest().setOperationCode(__forGenerateMonitoringStateParameters_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_run_run_QNAME)) {
            state.getRequest().setOperationCode(run_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case __forGenerateMonitoringStateParameters_OPCODE:
                deserialize___forGenerateMonitoringStateParameters(bodyReader, deserializationContext, state);
                break;
            case run_OPCODE:
                deserialize_run(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the __forGenerateMonitoringStateParameters operation.
     */
    private void deserialize___forGenerateMonitoringStateParameters(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStructObj =
            ns1_myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct_SOAPSerializer.deserialize(ns1___forGenerateMonitoringStateParameters___forGenerateMonitoringStateParameters_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1___forGenerateMonitoringStateParameters___forGenerateMonitoringStateParameters_QNAME);
        bodyBlock.setValue(myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the run operation.
     */
    private void deserialize_run(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myRunGateMonitoringService_run_RequestStructObj =
            ns1_myRunGateMonitoringService_run_RequestStruct_SOAPSerializer.deserialize(ns1_run_run_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_run_run_QNAME);
        bodyBlock.setValue(myRunGateMonitoringService_run_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case __forGenerateMonitoringStateParameters_OPCODE:
                invoke___forGenerateMonitoringStateParameters(state);
                break;
            case run_OPCODE:
                invoke_run(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    public java.lang.String getDefaultEnvelopeEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public java.lang.String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1___forGenerateMonitoringStateParameters___forGenerateMonitoringStateParameters_QNAME)) {
            return __forGenerateMonitoringStateParameters_OPCODE;
        }
        if (name.equals(ns1_run_run_QNAME)) {
            return run_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case __forGenerateMonitoringStateParameters_OPCODE:
                {
                    Class[] carray = {  };
                    theMethod = (com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService.class).getMethod("__forGenerateMonitoringStateParameters", carray);
                }
                break;
            
            case run_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.monitoring.generated.MonitoringParameters.class };
                    theMethod = (com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService.class).getMethod("run", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[2];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 2 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myRunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct.class, ns1___forGenerateMonitoringStateParametersResponse_TYPE_QNAME);
        ns1_myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct.class, ns1___forGenerateMonitoringStateParameters_TYPE_QNAME);
        ns1_myRunGateMonitoringService_run_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService_run_RequestStruct.class, ns1_run_TYPE_QNAME);
        ns1_myRunGateMonitoringService_run_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.monitoring.generated.RunGateMonitoringService_run_ResponseStruct.class, ns1_runResponse_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName portName = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "RunGateMonitoringServicePort");
    private static final int __forGenerateMonitoringStateParameters_OPCODE = 0;
    private static final int run_OPCODE = 1;
    private static final javax.xml.namespace.QName ns1___forGenerateMonitoringStateParameters___forGenerateMonitoringStateParameters_QNAME = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "__forGenerateMonitoringStateParameters");
    private static final javax.xml.namespace.QName ns1___forGenerateMonitoringStateParameters_TYPE_QNAME = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "__forGenerateMonitoringStateParameters");
    private CombinedSerializer ns1_myRunGateMonitoringService___forGenerateMonitoringStateParameters_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1___forGenerateMonitoringStateParameters___forGenerateMonitoringStateParametersResponse_QNAME = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "__forGenerateMonitoringStateParametersResponse");
    private static final javax.xml.namespace.QName ns1___forGenerateMonitoringStateParametersResponse_TYPE_QNAME = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "__forGenerateMonitoringStateParametersResponse");
    private CombinedSerializer ns1_myRunGateMonitoringService___forGenerateMonitoringStateParameters_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_run_run_QNAME = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "run");
    private static final javax.xml.namespace.QName ns1_run_TYPE_QNAME = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "run");
    private CombinedSerializer ns1_myRunGateMonitoringService_run_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_run_runResponse_QNAME = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "runResponse");
    private static final javax.xml.namespace.QName ns1_runResponse_TYPE_QNAME = new QName("http://generated.monitoring.services.gate.web.phizic.rssl.com", "runResponse");
    private CombinedSerializer ns1_myRunGateMonitoringService_run_ResponseStruct_SOAPSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "http://generated.monitoring.services.gate.web.phizic.rssl.com",
                                            "ns1", "http://java.sun.com/jax-rpc-ri/internal"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
