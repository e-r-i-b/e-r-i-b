// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.rssl.phizic.web.gate.services.util.generated;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.server.*;
import javax.xml.rpc.handler.HandlerInfo;
import com.sun.xml.rpc.client.HandlerChainImpl;

public class GateInfoService_PortType_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public GateInfoService_PortType_Tie() throws Exception {
        super(new com.rssl.phizic.web.gate.services.util.GateInfoServiceImpl_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: isRecipientExtedendAttributesAvailable
     */
    private void invoke_isRecipientExtedendAttributesAvailable(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct = null;
        Object myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct)myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isRecipientExtedendAttributesAvailable(myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct.getBilling_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isRecipientExtedendAttributesAvailable_isRecipientExtedendAttributesAvailableResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isCalendarAvailable
     */
    private void invoke_isCalendarAvailable(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCalendarAvailable_RequestStruct myGateInfoService_PortType_isCalendarAvailable_RequestStruct = null;
        Object myGateInfoService_PortType_isCalendarAvailable_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isCalendarAvailable_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isCalendarAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCalendarAvailable_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isCalendarAvailable_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isCalendarAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCalendarAvailable_RequestStruct)myGateInfoService_PortType_isCalendarAvailable_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isCalendarAvailable(myGateInfoService_PortType_isCalendarAvailable_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCalendarAvailable_ResponseStruct myGateInfoService_PortType_isCalendarAvailable_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCalendarAvailable_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isCalendarAvailable_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isCalendarAvailable_isCalendarAvailableResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isCalendarAvailable_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isCalendarAvailable_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isPersonalRecipientAvailable
     */
    private void invoke_isPersonalRecipientAvailable(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct = null;
        Object myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct)myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isPersonalRecipientAvailable(myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct.getBilling_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct myGateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isPersonalRecipientAvailable_isPersonalRecipientAvailableResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: getCardInputMode
     */
    private void invoke_getCardInputMode(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getCardInputMode_RequestStruct myGateInfoService_PortType_getCardInputMode_RequestStruct = null;
        Object myGateInfoService_PortType_getCardInputMode_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_getCardInputMode_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_getCardInputMode_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getCardInputMode_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_getCardInputMode_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_getCardInputMode_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getCardInputMode_RequestStruct)myGateInfoService_PortType_getCardInputMode_RequestStructObj;
        }
        
        try {
            java.lang.String result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).getCardInputMode(myGateInfoService_PortType_getCardInputMode_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getCardInputMode_ResponseStruct myGateInfoService_PortType_getCardInputMode_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getCardInputMode_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_getCardInputMode_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getCardInputMode_getCardInputModeResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_getCardInputMode_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_getCardInputMode_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isDelayedPaymentNeedSend
     */
    private void invoke_isDelayedPaymentNeedSend(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct = null;
        Object myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct)myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isDelayedPaymentNeedSend(myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct myGateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isDelayedPaymentNeedSend_isDelayedPaymentNeedSendResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: needTwoPhaseTransaction
     */
    private void invoke_needTwoPhaseTransaction(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_RequestStruct myGateInfoService_PortType_needTwoPhaseTransaction_RequestStruct = null;
        Object myGateInfoService_PortType_needTwoPhaseTransaction_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_needTwoPhaseTransaction_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_needTwoPhaseTransaction_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_needTwoPhaseTransaction_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_needTwoPhaseTransaction_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_RequestStruct)myGateInfoService_PortType_needTwoPhaseTransaction_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).needTwoPhaseTransaction(myGateInfoService_PortType_needTwoPhaseTransaction_RequestStruct.getBilling_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_needTwoPhaseTransaction_needTwoPhaseTransactionResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isOfficesHierarchySupported
     */
    private void invoke_isOfficesHierarchySupported(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isOfficesHierarchySupported_RequestStruct myGateInfoService_PortType_isOfficesHierarchySupported_RequestStruct = null;
        Object myGateInfoService_PortType_isOfficesHierarchySupported_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isOfficesHierarchySupported_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isOfficesHierarchySupported_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isOfficesHierarchySupported_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isOfficesHierarchySupported_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isOfficesHierarchySupported_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isOfficesHierarchySupported_RequestStruct)myGateInfoService_PortType_isOfficesHierarchySupported_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isOfficesHierarchySupported(myGateInfoService_PortType_isOfficesHierarchySupported_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct myGateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isOfficesHierarchySupported_isOfficesHierarchySupportedResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isPaymentCommissionAvailable
     */
    private void invoke_isPaymentCommissionAvailable(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct = null;
        Object myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct)myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isPaymentCommissionAvailable(myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct.getBilling_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct myGateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isPaymentCommissionAvailable_isPaymentCommissionAvailableResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isClientImportEnable
     */
    private void invoke_isClientImportEnable(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isClientImportEnable_RequestStruct myGateInfoService_PortType_isClientImportEnable_RequestStruct = null;
        Object myGateInfoService_PortType_isClientImportEnable_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isClientImportEnable_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isClientImportEnable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isClientImportEnable_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isClientImportEnable_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isClientImportEnable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isClientImportEnable_RequestStruct)myGateInfoService_PortType_isClientImportEnable_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isClientImportEnable(myGateInfoService_PortType_isClientImportEnable_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isClientImportEnable_ResponseStruct myGateInfoService_PortType_isClientImportEnable_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isClientImportEnable_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isClientImportEnable_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isClientImportEnable_isClientImportEnableResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isClientImportEnable_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isClientImportEnable_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isCurrencyRateAvailable
     */
    private void invoke_isCurrencyRateAvailable(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCurrencyRateAvailable_RequestStruct myGateInfoService_PortType_isCurrencyRateAvailable_RequestStruct = null;
        Object myGateInfoService_PortType_isCurrencyRateAvailable_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isCurrencyRateAvailable_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isCurrencyRateAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCurrencyRateAvailable_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isCurrencyRateAvailable_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isCurrencyRateAvailable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCurrencyRateAvailable_RequestStruct)myGateInfoService_PortType_isCurrencyRateAvailable_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isCurrencyRateAvailable(myGateInfoService_PortType_isCurrencyRateAvailable_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct myGateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isCurrencyRateAvailable_isCurrencyRateAvailableResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: getAccountInputMode
     */
    private void invoke_getAccountInputMode(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getAccountInputMode_RequestStruct myGateInfoService_PortType_getAccountInputMode_RequestStruct = null;
        Object myGateInfoService_PortType_getAccountInputMode_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_getAccountInputMode_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_getAccountInputMode_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getAccountInputMode_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_getAccountInputMode_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_getAccountInputMode_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getAccountInputMode_RequestStruct)myGateInfoService_PortType_getAccountInputMode_RequestStructObj;
        }
        
        try {
            java.lang.String result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).getAccountInputMode(myGateInfoService_PortType_getAccountInputMode_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getAccountInputMode_ResponseStruct myGateInfoService_PortType_getAccountInputMode_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getAccountInputMode_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_getAccountInputMode_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getAccountInputMode_getAccountInputModeResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_getAccountInputMode_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_getAccountInputMode_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: needTwoPhaseTransaction2
     */
    private void invoke_needTwoPhaseTransaction2(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct = null;
        Object myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct)myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).needTwoPhaseTransaction(myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct.getString_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1 myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1 =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_needTwoPhaseTransaction2_needTwoPhaseTransaction2Response_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: getConfiguration
     */
    private void invoke_getConfiguration(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getConfiguration_RequestStruct myGateInfoService_PortType_getConfiguration_RequestStruct = null;
        Object myGateInfoService_PortType_getConfiguration_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_getConfiguration_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_getConfiguration_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getConfiguration_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_getConfiguration_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_getConfiguration_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getConfiguration_RequestStruct)myGateInfoService_PortType_getConfiguration_RequestStructObj;
        }
        
        try {
            com.rssl.phizic.web.gate.services.util.generated.GateConfiguration result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).getConfiguration(myGateInfoService_PortType_getConfiguration_RequestStruct.getBilling_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getConfiguration_ResponseStruct myGateInfoService_PortType_getConfiguration_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getConfiguration_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_getConfiguration_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getConfiguration_getConfigurationResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_getConfiguration_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_getConfiguration_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: getUID
     */
    private void invoke_getUID(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getUID_RequestStruct myGateInfoService_PortType_getUID_RequestStruct = null;
        Object myGateInfoService_PortType_getUID_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_getUID_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_getUID_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getUID_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_getUID_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_getUID_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getUID_RequestStruct)myGateInfoService_PortType_getUID_RequestStructObj;
        }
        
        try {
            java.lang.String result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).getUID(myGateInfoService_PortType_getUID_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getUID_ResponseStruct myGateInfoService_PortType_getUID_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getUID_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_getUID_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUID_getUIDResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_getUID_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_getUID_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isNeedChargeOff
     */
    private void invoke_isNeedChargeOff(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedChargeOff_RequestStruct myGateInfoService_PortType_isNeedChargeOff_RequestStruct = null;
        Object myGateInfoService_PortType_isNeedChargeOff_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isNeedChargeOff_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isNeedChargeOff_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedChargeOff_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isNeedChargeOff_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isNeedChargeOff_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedChargeOff_RequestStruct)myGateInfoService_PortType_isNeedChargeOff_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isNeedChargeOff(myGateInfoService_PortType_isNeedChargeOff_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedChargeOff_ResponseStruct myGateInfoService_PortType_isNeedChargeOff_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedChargeOff_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isNeedChargeOff_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isNeedChargeOff_isNeedChargeOffResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isNeedChargeOff_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isNeedChargeOff_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isPaymentsRecallSupported
     */
    private void invoke_isPaymentsRecallSupported(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentsRecallSupported_RequestStruct myGateInfoService_PortType_isPaymentsRecallSupported_RequestStruct = null;
        Object myGateInfoService_PortType_isPaymentsRecallSupported_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isPaymentsRecallSupported_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isPaymentsRecallSupported_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentsRecallSupported_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isPaymentsRecallSupported_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isPaymentsRecallSupported_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentsRecallSupported_RequestStruct)myGateInfoService_PortType_isPaymentsRecallSupported_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isPaymentsRecallSupported(myGateInfoService_PortType_isPaymentsRecallSupported_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct myGateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isPaymentsRecallSupported_isPaymentsRecallSupportedResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isNeedAgrementCancellation
     */
    private void invoke_isNeedAgrementCancellation(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedAgrementCancellation_RequestStruct myGateInfoService_PortType_isNeedAgrementCancellation_RequestStruct = null;
        Object myGateInfoService_PortType_isNeedAgrementCancellation_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isNeedAgrementCancellation_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isNeedAgrementCancellation_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedAgrementCancellation_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isNeedAgrementCancellation_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isNeedAgrementCancellation_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedAgrementCancellation_RequestStruct)myGateInfoService_PortType_isNeedAgrementCancellation_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isNeedAgrementCancellation(myGateInfoService_PortType_isNeedAgrementCancellation_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct myGateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isNeedAgrementCancellation_isNeedAgrementCancellationResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isRegistrationEnable
     */
    private void invoke_isRegistrationEnable(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRegistrationEnable_RequestStruct myGateInfoService_PortType_isRegistrationEnable_RequestStruct = null;
        Object myGateInfoService_PortType_isRegistrationEnable_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isRegistrationEnable_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isRegistrationEnable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRegistrationEnable_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isRegistrationEnable_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isRegistrationEnable_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRegistrationEnable_RequestStruct)myGateInfoService_PortType_isRegistrationEnable_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isRegistrationEnable(myGateInfoService_PortType_isRegistrationEnable_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRegistrationEnable_ResponseStruct myGateInfoService_PortType_isRegistrationEnable_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRegistrationEnable_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isRegistrationEnable_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isRegistrationEnable_isRegistrationEnableResponse_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isRegistrationEnable_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isRegistrationEnable_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: isPaymentCommissionAvailable2
     */
    private void invoke_isPaymentCommissionAvailable2(StreamingHandlerState state) throws Exception {
        
        com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct = null;
        Object myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStructObj instanceof SOAPDeserializationState) {
            myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct)((SOAPDeserializationState)myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStructObj).getInstance();
        } else {
            myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct)myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStructObj;
        }
        
        try {
            java.lang.Boolean result = 
                ((com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType) getTarget()).isPaymentCommissionAvailable2(myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct.getOffice_1());
            com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct myGateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct =
                new com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct.setResult(result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isPaymentCommissionAvailable2_isPaymentCommissionAvailable2Response_QNAME);
            bodyBlock.setValue(myGateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_isRecipientExtedendAttributesAvailable_isRecipientExtedendAttributesAvailable_QNAME)) {
            state.getRequest().setOperationCode(isRecipientExtedendAttributesAvailable_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isCalendarAvailable_isCalendarAvailable_QNAME)) {
            state.getRequest().setOperationCode(isCalendarAvailable_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isPersonalRecipientAvailable_isPersonalRecipientAvailable_QNAME)) {
            state.getRequest().setOperationCode(isPersonalRecipientAvailable_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_getCardInputMode_getCardInputMode_QNAME)) {
            state.getRequest().setOperationCode(getCardInputMode_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isDelayedPaymentNeedSend_isDelayedPaymentNeedSend_QNAME)) {
            state.getRequest().setOperationCode(isDelayedPaymentNeedSend_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_needTwoPhaseTransaction_needTwoPhaseTransaction_QNAME)) {
            state.getRequest().setOperationCode(needTwoPhaseTransaction_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isOfficesHierarchySupported_isOfficesHierarchySupported_QNAME)) {
            state.getRequest().setOperationCode(isOfficesHierarchySupported_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isPaymentCommissionAvailable_isPaymentCommissionAvailable_QNAME)) {
            state.getRequest().setOperationCode(isPaymentCommissionAvailable_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isClientImportEnable_isClientImportEnable_QNAME)) {
            state.getRequest().setOperationCode(isClientImportEnable_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isCurrencyRateAvailable_isCurrencyRateAvailable_QNAME)) {
            state.getRequest().setOperationCode(isCurrencyRateAvailable_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_getAccountInputMode_getAccountInputMode_QNAME)) {
            state.getRequest().setOperationCode(getAccountInputMode_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_needTwoPhaseTransaction2_needTwoPhaseTransaction2_QNAME)) {
            state.getRequest().setOperationCode(needTwoPhaseTransaction2_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_getConfiguration_getConfiguration_QNAME)) {
            state.getRequest().setOperationCode(getConfiguration_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_getUID_getUID_QNAME)) {
            state.getRequest().setOperationCode(getUID_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isNeedChargeOff_isNeedChargeOff_QNAME)) {
            state.getRequest().setOperationCode(isNeedChargeOff_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isPaymentsRecallSupported_isPaymentsRecallSupported_QNAME)) {
            state.getRequest().setOperationCode(isPaymentsRecallSupported_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isNeedAgrementCancellation_isNeedAgrementCancellation_QNAME)) {
            state.getRequest().setOperationCode(isNeedAgrementCancellation_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isRegistrationEnable_isRegistrationEnable_QNAME)) {
            state.getRequest().setOperationCode(isRegistrationEnable_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_isPaymentCommissionAvailable2_isPaymentCommissionAvailable2_QNAME)) {
            state.getRequest().setOperationCode(isPaymentCommissionAvailable2_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case isRecipientExtedendAttributesAvailable_OPCODE:
                deserialize_isRecipientExtedendAttributesAvailable(bodyReader, deserializationContext, state);
                break;
            case isCalendarAvailable_OPCODE:
                deserialize_isCalendarAvailable(bodyReader, deserializationContext, state);
                break;
            case isPersonalRecipientAvailable_OPCODE:
                deserialize_isPersonalRecipientAvailable(bodyReader, deserializationContext, state);
                break;
            case getCardInputMode_OPCODE:
                deserialize_getCardInputMode(bodyReader, deserializationContext, state);
                break;
            case isDelayedPaymentNeedSend_OPCODE:
                deserialize_isDelayedPaymentNeedSend(bodyReader, deserializationContext, state);
                break;
            case needTwoPhaseTransaction_OPCODE:
                deserialize_needTwoPhaseTransaction(bodyReader, deserializationContext, state);
                break;
            case isOfficesHierarchySupported_OPCODE:
                deserialize_isOfficesHierarchySupported(bodyReader, deserializationContext, state);
                break;
            case isPaymentCommissionAvailable_OPCODE:
                deserialize_isPaymentCommissionAvailable(bodyReader, deserializationContext, state);
                break;
            case isClientImportEnable_OPCODE:
                deserialize_isClientImportEnable(bodyReader, deserializationContext, state);
                break;
            case isCurrencyRateAvailable_OPCODE:
                deserialize_isCurrencyRateAvailable(bodyReader, deserializationContext, state);
                break;
            case getAccountInputMode_OPCODE:
                deserialize_getAccountInputMode(bodyReader, deserializationContext, state);
                break;
            case needTwoPhaseTransaction2_OPCODE:
                deserialize_needTwoPhaseTransaction2(bodyReader, deserializationContext, state);
                break;
            case getConfiguration_OPCODE:
                deserialize_getConfiguration(bodyReader, deserializationContext, state);
                break;
            case getUID_OPCODE:
                deserialize_getUID(bodyReader, deserializationContext, state);
                break;
            case isNeedChargeOff_OPCODE:
                deserialize_isNeedChargeOff(bodyReader, deserializationContext, state);
                break;
            case isPaymentsRecallSupported_OPCODE:
                deserialize_isPaymentsRecallSupported(bodyReader, deserializationContext, state);
                break;
            case isNeedAgrementCancellation_OPCODE:
                deserialize_isNeedAgrementCancellation(bodyReader, deserializationContext, state);
                break;
            case isRegistrationEnable_OPCODE:
                deserialize_isRegistrationEnable(bodyReader, deserializationContext, state);
                break;
            case isPaymentCommissionAvailable2_OPCODE:
                deserialize_isPaymentCommissionAvailable2(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the isRecipientExtedendAttributesAvailable operation.
     */
    private void deserialize_isRecipientExtedendAttributesAvailable(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStructObj =
            ns1_myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct_SOAPSerializer.deserialize(ns1_isRecipientExtedendAttributesAvailable_isRecipientExtedendAttributesAvailable_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isRecipientExtedendAttributesAvailable_isRecipientExtedendAttributesAvailable_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isCalendarAvailable operation.
     */
    private void deserialize_isCalendarAvailable(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isCalendarAvailable_RequestStructObj =
            ns1_myGateInfoService_PortType_isCalendarAvailable_RequestStruct_SOAPSerializer.deserialize(ns1_isCalendarAvailable_isCalendarAvailable_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isCalendarAvailable_isCalendarAvailable_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isCalendarAvailable_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isPersonalRecipientAvailable operation.
     */
    private void deserialize_isPersonalRecipientAvailable(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStructObj =
            ns1_myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct_SOAPSerializer.deserialize(ns1_isPersonalRecipientAvailable_isPersonalRecipientAvailable_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isPersonalRecipientAvailable_isPersonalRecipientAvailable_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getCardInputMode operation.
     */
    private void deserialize_getCardInputMode(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_getCardInputMode_RequestStructObj =
            ns1_myGateInfoService_PortType_getCardInputMode_RequestStruct_SOAPSerializer.deserialize(ns1_getCardInputMode_getCardInputMode_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getCardInputMode_getCardInputMode_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_getCardInputMode_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isDelayedPaymentNeedSend operation.
     */
    private void deserialize_isDelayedPaymentNeedSend(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStructObj =
            ns1_myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct_SOAPSerializer.deserialize(ns1_isDelayedPaymentNeedSend_isDelayedPaymentNeedSend_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isDelayedPaymentNeedSend_isDelayedPaymentNeedSend_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the needTwoPhaseTransaction operation.
     */
    private void deserialize_needTwoPhaseTransaction(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_needTwoPhaseTransaction_RequestStructObj =
            ns1_myGateInfoService_PortType_needTwoPhaseTransaction_RequestStruct_SOAPSerializer.deserialize(ns1_needTwoPhaseTransaction_needTwoPhaseTransaction_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_needTwoPhaseTransaction_needTwoPhaseTransaction_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_needTwoPhaseTransaction_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isOfficesHierarchySupported operation.
     */
    private void deserialize_isOfficesHierarchySupported(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isOfficesHierarchySupported_RequestStructObj =
            ns1_myGateInfoService_PortType_isOfficesHierarchySupported_RequestStruct_SOAPSerializer.deserialize(ns1_isOfficesHierarchySupported_isOfficesHierarchySupported_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isOfficesHierarchySupported_isOfficesHierarchySupported_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isOfficesHierarchySupported_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isPaymentCommissionAvailable operation.
     */
    private void deserialize_isPaymentCommissionAvailable(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStructObj =
            ns1_myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct_SOAPSerializer.deserialize(ns1_isPaymentCommissionAvailable_isPaymentCommissionAvailable_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isPaymentCommissionAvailable_isPaymentCommissionAvailable_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isClientImportEnable operation.
     */
    private void deserialize_isClientImportEnable(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isClientImportEnable_RequestStructObj =
            ns1_myGateInfoService_PortType_isClientImportEnable_RequestStruct_SOAPSerializer.deserialize(ns1_isClientImportEnable_isClientImportEnable_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isClientImportEnable_isClientImportEnable_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isClientImportEnable_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isCurrencyRateAvailable operation.
     */
    private void deserialize_isCurrencyRateAvailable(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isCurrencyRateAvailable_RequestStructObj =
            ns1_myGateInfoService_PortType_isCurrencyRateAvailable_RequestStruct_SOAPSerializer.deserialize(ns1_isCurrencyRateAvailable_isCurrencyRateAvailable_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isCurrencyRateAvailable_isCurrencyRateAvailable_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isCurrencyRateAvailable_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getAccountInputMode operation.
     */
    private void deserialize_getAccountInputMode(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_getAccountInputMode_RequestStructObj =
            ns1_myGateInfoService_PortType_getAccountInputMode_RequestStruct_SOAPSerializer.deserialize(ns1_getAccountInputMode_getAccountInputMode_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getAccountInputMode_getAccountInputMode_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_getAccountInputMode_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the needTwoPhaseTransaction2 operation.
     */
    private void deserialize_needTwoPhaseTransaction2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStructObj =
            ns1_myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct_SOAPSerializer.deserialize(ns1_needTwoPhaseTransaction2_needTwoPhaseTransaction2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_needTwoPhaseTransaction2_needTwoPhaseTransaction2_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getConfiguration operation.
     */
    private void deserialize_getConfiguration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_getConfiguration_RequestStructObj =
            ns1_myGateInfoService_PortType_getConfiguration_RequestStruct_SOAPSerializer.deserialize(ns1_getConfiguration_getConfiguration_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getConfiguration_getConfiguration_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_getConfiguration_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUID operation.
     */
    private void deserialize_getUID(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_getUID_RequestStructObj =
            ns1_myGateInfoService_PortType_getUID_RequestStruct_SOAPSerializer.deserialize(ns1_getUID_getUID_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUID_getUID_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_getUID_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isNeedChargeOff operation.
     */
    private void deserialize_isNeedChargeOff(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isNeedChargeOff_RequestStructObj =
            ns1_myGateInfoService_PortType_isNeedChargeOff_RequestStruct_SOAPSerializer.deserialize(ns1_isNeedChargeOff_isNeedChargeOff_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isNeedChargeOff_isNeedChargeOff_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isNeedChargeOff_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isPaymentsRecallSupported operation.
     */
    private void deserialize_isPaymentsRecallSupported(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isPaymentsRecallSupported_RequestStructObj =
            ns1_myGateInfoService_PortType_isPaymentsRecallSupported_RequestStruct_SOAPSerializer.deserialize(ns1_isPaymentsRecallSupported_isPaymentsRecallSupported_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isPaymentsRecallSupported_isPaymentsRecallSupported_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isPaymentsRecallSupported_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isNeedAgrementCancellation operation.
     */
    private void deserialize_isNeedAgrementCancellation(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isNeedAgrementCancellation_RequestStructObj =
            ns1_myGateInfoService_PortType_isNeedAgrementCancellation_RequestStruct_SOAPSerializer.deserialize(ns1_isNeedAgrementCancellation_isNeedAgrementCancellation_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isNeedAgrementCancellation_isNeedAgrementCancellation_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isNeedAgrementCancellation_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isRegistrationEnable operation.
     */
    private void deserialize_isRegistrationEnable(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isRegistrationEnable_RequestStructObj =
            ns1_myGateInfoService_PortType_isRegistrationEnable_RequestStruct_SOAPSerializer.deserialize(ns1_isRegistrationEnable_isRegistrationEnable_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isRegistrationEnable_isRegistrationEnable_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isRegistrationEnable_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the isPaymentCommissionAvailable2 operation.
     */
    private void deserialize_isPaymentCommissionAvailable2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        java.lang.Object myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStructObj =
            ns1_myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct_SOAPSerializer.deserialize(ns1_isPaymentCommissionAvailable2_isPaymentCommissionAvailable2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_isPaymentCommissionAvailable2_isPaymentCommissionAvailable2_QNAME);
        bodyBlock.setValue(myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case isRecipientExtedendAttributesAvailable_OPCODE:
                invoke_isRecipientExtedendAttributesAvailable(state);
                break;
            case isCalendarAvailable_OPCODE:
                invoke_isCalendarAvailable(state);
                break;
            case isPersonalRecipientAvailable_OPCODE:
                invoke_isPersonalRecipientAvailable(state);
                break;
            case getCardInputMode_OPCODE:
                invoke_getCardInputMode(state);
                break;
            case isDelayedPaymentNeedSend_OPCODE:
                invoke_isDelayedPaymentNeedSend(state);
                break;
            case needTwoPhaseTransaction_OPCODE:
                invoke_needTwoPhaseTransaction(state);
                break;
            case isOfficesHierarchySupported_OPCODE:
                invoke_isOfficesHierarchySupported(state);
                break;
            case isPaymentCommissionAvailable_OPCODE:
                invoke_isPaymentCommissionAvailable(state);
                break;
            case isClientImportEnable_OPCODE:
                invoke_isClientImportEnable(state);
                break;
            case isCurrencyRateAvailable_OPCODE:
                invoke_isCurrencyRateAvailable(state);
                break;
            case getAccountInputMode_OPCODE:
                invoke_getAccountInputMode(state);
                break;
            case needTwoPhaseTransaction2_OPCODE:
                invoke_needTwoPhaseTransaction2(state);
                break;
            case getConfiguration_OPCODE:
                invoke_getConfiguration(state);
                break;
            case getUID_OPCODE:
                invoke_getUID(state);
                break;
            case isNeedChargeOff_OPCODE:
                invoke_isNeedChargeOff(state);
                break;
            case isPaymentsRecallSupported_OPCODE:
                invoke_isPaymentsRecallSupported(state);
                break;
            case isNeedAgrementCancellation_OPCODE:
                invoke_isNeedAgrementCancellation(state);
                break;
            case isRegistrationEnable_OPCODE:
                invoke_isRegistrationEnable(state);
                break;
            case isPaymentCommissionAvailable2_OPCODE:
                invoke_isPaymentCommissionAvailable2(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", java.lang.Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    public java.lang.String getDefaultEnvelopeEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public java.lang.String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_isRecipientExtedendAttributesAvailable_isRecipientExtedendAttributesAvailable_QNAME)) {
            return isRecipientExtedendAttributesAvailable_OPCODE;
        }
        if (name.equals(ns1_isCalendarAvailable_isCalendarAvailable_QNAME)) {
            return isCalendarAvailable_OPCODE;
        }
        if (name.equals(ns1_isPersonalRecipientAvailable_isPersonalRecipientAvailable_QNAME)) {
            return isPersonalRecipientAvailable_OPCODE;
        }
        if (name.equals(ns1_getCardInputMode_getCardInputMode_QNAME)) {
            return getCardInputMode_OPCODE;
        }
        if (name.equals(ns1_isDelayedPaymentNeedSend_isDelayedPaymentNeedSend_QNAME)) {
            return isDelayedPaymentNeedSend_OPCODE;
        }
        if (name.equals(ns1_needTwoPhaseTransaction_needTwoPhaseTransaction_QNAME)) {
            return needTwoPhaseTransaction_OPCODE;
        }
        if (name.equals(ns1_isOfficesHierarchySupported_isOfficesHierarchySupported_QNAME)) {
            return isOfficesHierarchySupported_OPCODE;
        }
        if (name.equals(ns1_isPaymentCommissionAvailable_isPaymentCommissionAvailable_QNAME)) {
            return isPaymentCommissionAvailable_OPCODE;
        }
        if (name.equals(ns1_isClientImportEnable_isClientImportEnable_QNAME)) {
            return isClientImportEnable_OPCODE;
        }
        if (name.equals(ns1_isCurrencyRateAvailable_isCurrencyRateAvailable_QNAME)) {
            return isCurrencyRateAvailable_OPCODE;
        }
        if (name.equals(ns1_getAccountInputMode_getAccountInputMode_QNAME)) {
            return getAccountInputMode_OPCODE;
        }
        if (name.equals(ns1_needTwoPhaseTransaction2_needTwoPhaseTransaction2_QNAME)) {
            return needTwoPhaseTransaction2_OPCODE;
        }
        if (name.equals(ns1_getConfiguration_getConfiguration_QNAME)) {
            return getConfiguration_OPCODE;
        }
        if (name.equals(ns1_getUID_getUID_QNAME)) {
            return getUID_OPCODE;
        }
        if (name.equals(ns1_isNeedChargeOff_isNeedChargeOff_QNAME)) {
            return isNeedChargeOff_OPCODE;
        }
        if (name.equals(ns1_isPaymentsRecallSupported_isPaymentsRecallSupported_QNAME)) {
            return isPaymentsRecallSupported_OPCODE;
        }
        if (name.equals(ns1_isNeedAgrementCancellation_isNeedAgrementCancellation_QNAME)) {
            return isNeedAgrementCancellation_OPCODE;
        }
        if (name.equals(ns1_isRegistrationEnable_isRegistrationEnable_QNAME)) {
            return isRegistrationEnable_OPCODE;
        }
        if (name.equals(ns1_isPaymentCommissionAvailable2_isPaymentCommissionAvailable2_QNAME)) {
            return isPaymentCommissionAvailable2_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case isRecipientExtedendAttributesAvailable_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Billing.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isRecipientExtedendAttributesAvailable", carray);
                }
                break;
            
            case isCalendarAvailable_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isCalendarAvailable", carray);
                }
                break;
            
            case isPersonalRecipientAvailable_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Billing.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isPersonalRecipientAvailable", carray);
                }
                break;
            
            case getCardInputMode_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("getCardInputMode", carray);
                }
                break;
            
            case isDelayedPaymentNeedSend_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isDelayedPaymentNeedSend", carray);
                }
                break;
            
            case needTwoPhaseTransaction_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Billing.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("needTwoPhaseTransaction", carray);
                }
                break;
            
            case isOfficesHierarchySupported_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isOfficesHierarchySupported", carray);
                }
                break;
            
            case isPaymentCommissionAvailable_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Billing.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isPaymentCommissionAvailable", carray);
                }
                break;
            
            case isClientImportEnable_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isClientImportEnable", carray);
                }
                break;
            
            case isCurrencyRateAvailable_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isCurrencyRateAvailable", carray);
                }
                break;
            
            case getAccountInputMode_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("getAccountInputMode", carray);
                }
                break;
            
            case needTwoPhaseTransaction2_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("needTwoPhaseTransaction", carray);
                }
                break;
            
            case getConfiguration_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Billing.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("getConfiguration", carray);
                }
                break;
            
            case getUID_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("getUID", carray);
                }
                break;
            
            case isNeedChargeOff_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isNeedChargeOff", carray);
                }
                break;
            
            case isPaymentsRecallSupported_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isPaymentsRecallSupported", carray);
                }
                break;
            
            case isNeedAgrementCancellation_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isNeedAgrementCancellation", carray);
                }
                break;
            
            case isRegistrationEnable_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isRegistrationEnable", carray);
                }
                break;
            
            case isPaymentCommissionAvailable2_OPCODE:
                {
                    Class[] carray = { com.rssl.phizic.web.gate.services.util.generated.Office.class };
                    theMethod = (com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType.class).getMethod("isPaymentCommissionAvailable2", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[19];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 19 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected java.lang.String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public javax.xml.namespace.QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct.class, ns1_needTwoPhaseTransactionResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isRegistrationEnable_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRegistrationEnable_RequestStruct.class, ns1_isRegistrationEnable_TYPE_QNAME);
        ns1_myGateInfoService_PortType_getConfiguration_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getConfiguration_RequestStruct.class, ns1_getConfiguration_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct.class, ns1_isPersonalRecipientAvailableResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct.class, ns1_isPaymentCommissionAvailable_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct.class, ns1_isPaymentCommissionAvailable2_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isPaymentsRecallSupported_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentsRecallSupported_RequestStruct.class, ns1_isPaymentsRecallSupported_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct.class, ns1_isDelayedPaymentNeedSend_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isClientImportEnable_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isClientImportEnable_RequestStruct.class, ns1_isClientImportEnable_TYPE_QNAME);
        ns1_myGateInfoService_PortType_needTwoPhaseTransaction_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_RequestStruct.class, ns1_needTwoPhaseTransaction_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct.class, ns1_isPersonalRecipientAvailable_TYPE_QNAME);
        ns1_myGateInfoService_PortType_getUID_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getUID_ResponseStruct.class, ns1_getUIDResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isOfficesHierarchySupported_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isOfficesHierarchySupported_RequestStruct.class, ns1_isOfficesHierarchySupported_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isCurrencyRateAvailable_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCurrencyRateAvailable_RequestStruct.class, ns1_isCurrencyRateAvailable_TYPE_QNAME);
        ns1_myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1.class, ns1_needTwoPhaseTransaction2Response_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isNeedChargeOff_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedChargeOff_RequestStruct.class, ns1_isNeedChargeOff_TYPE_QNAME);
        ns1_myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct.class, ns1_needTwoPhaseTransaction2_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isClientImportEnable_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isClientImportEnable_ResponseStruct.class, ns1_isClientImportEnableResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isRegistrationEnable_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRegistrationEnable_ResponseStruct.class, ns1_isRegistrationEnableResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct.class, ns1_isRecipientExtedendAttributesAvailable_TYPE_QNAME);
        ns1_myGateInfoService_PortType_getUID_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getUID_RequestStruct.class, ns1_getUID_TYPE_QNAME);
        ns1_myGateInfoService_PortType_getCardInputMode_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getCardInputMode_ResponseStruct.class, ns1_getCardInputModeResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_getAccountInputMode_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getAccountInputMode_ResponseStruct.class, ns1_getAccountInputModeResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct.class, ns1_isNeedAgrementCancellationResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_getAccountInputMode_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getAccountInputMode_RequestStruct.class, ns1_getAccountInputMode_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct.class, ns1_isRecipientExtedendAttributesAvailableResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct.class, ns1_isPaymentCommissionAvailable2Response_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct.class, ns1_isCurrencyRateAvailableResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isNeedChargeOff_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedChargeOff_ResponseStruct.class, ns1_isNeedChargeOffResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isCalendarAvailable_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCalendarAvailable_RequestStruct.class, ns1_isCalendarAvailable_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isNeedAgrementCancellation_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isNeedAgrementCancellation_RequestStruct.class, ns1_isNeedAgrementCancellation_TYPE_QNAME);
        ns1_myGateInfoService_PortType_getConfiguration_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getConfiguration_ResponseStruct.class, ns1_getConfigurationResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct.class, ns1_isDelayedPaymentNeedSendResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isCalendarAvailable_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isCalendarAvailable_ResponseStruct.class, ns1_isCalendarAvailableResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct.class, ns1_isPaymentCommissionAvailableResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_getCardInputMode_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_getCardInputMode_RequestStruct.class, ns1_getCardInputMode_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct.class, ns1_isOfficesHierarchySupportedResponse_TYPE_QNAME);
        ns1_myGateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.rssl.phizic.web.gate.services.util.generated.GateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct.class, ns1_isPaymentsRecallSupportedResponse_TYPE_QNAME);
    }
    
    private static final javax.xml.namespace.QName portName = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "GateInfoService_PortType");
    private static final int isRecipientExtedendAttributesAvailable_OPCODE = 0;
    private static final int isCalendarAvailable_OPCODE = 1;
    private static final int isPersonalRecipientAvailable_OPCODE = 2;
    private static final int getCardInputMode_OPCODE = 3;
    private static final int isDelayedPaymentNeedSend_OPCODE = 4;
    private static final int needTwoPhaseTransaction_OPCODE = 5;
    private static final int isOfficesHierarchySupported_OPCODE = 6;
    private static final int isPaymentCommissionAvailable_OPCODE = 7;
    private static final int isClientImportEnable_OPCODE = 8;
    private static final int isCurrencyRateAvailable_OPCODE = 9;
    private static final int getAccountInputMode_OPCODE = 10;
    private static final int needTwoPhaseTransaction2_OPCODE = 11;
    private static final int getConfiguration_OPCODE = 12;
    private static final int getUID_OPCODE = 13;
    private static final int isNeedChargeOff_OPCODE = 14;
    private static final int isPaymentsRecallSupported_OPCODE = 15;
    private static final int isNeedAgrementCancellation_OPCODE = 16;
    private static final int isRegistrationEnable_OPCODE = 17;
    private static final int isPaymentCommissionAvailable2_OPCODE = 18;
    private static final javax.xml.namespace.QName ns1_isRecipientExtedendAttributesAvailable_isRecipientExtedendAttributesAvailable_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isRecipientExtedendAttributesAvailable");
    private static final javax.xml.namespace.QName ns1_isRecipientExtedendAttributesAvailable_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isRecipientExtedendAttributesAvailable");
    private CombinedSerializer ns1_myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isRecipientExtedendAttributesAvailable_isRecipientExtedendAttributesAvailableResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isRecipientExtedendAttributesAvailableResponse");
    private static final javax.xml.namespace.QName ns1_isRecipientExtedendAttributesAvailableResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isRecipientExtedendAttributesAvailableResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isRecipientExtedendAttributesAvailable_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isCalendarAvailable_isCalendarAvailable_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isCalendarAvailable");
    private static final javax.xml.namespace.QName ns1_isCalendarAvailable_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isCalendarAvailable");
    private CombinedSerializer ns1_myGateInfoService_PortType_isCalendarAvailable_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isCalendarAvailable_isCalendarAvailableResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isCalendarAvailableResponse");
    private static final javax.xml.namespace.QName ns1_isCalendarAvailableResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isCalendarAvailableResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isCalendarAvailable_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isPersonalRecipientAvailable_isPersonalRecipientAvailable_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPersonalRecipientAvailable");
    private static final javax.xml.namespace.QName ns1_isPersonalRecipientAvailable_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPersonalRecipientAvailable");
    private CombinedSerializer ns1_myGateInfoService_PortType_isPersonalRecipientAvailable_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isPersonalRecipientAvailable_isPersonalRecipientAvailableResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPersonalRecipientAvailableResponse");
    private static final javax.xml.namespace.QName ns1_isPersonalRecipientAvailableResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPersonalRecipientAvailableResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isPersonalRecipientAvailable_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getCardInputMode_getCardInputMode_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getCardInputMode");
    private static final javax.xml.namespace.QName ns1_getCardInputMode_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getCardInputMode");
    private CombinedSerializer ns1_myGateInfoService_PortType_getCardInputMode_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getCardInputMode_getCardInputModeResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getCardInputModeResponse");
    private static final javax.xml.namespace.QName ns1_getCardInputModeResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getCardInputModeResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_getCardInputMode_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isDelayedPaymentNeedSend_isDelayedPaymentNeedSend_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isDelayedPaymentNeedSend");
    private static final javax.xml.namespace.QName ns1_isDelayedPaymentNeedSend_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isDelayedPaymentNeedSend");
    private CombinedSerializer ns1_myGateInfoService_PortType_isDelayedPaymentNeedSend_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isDelayedPaymentNeedSend_isDelayedPaymentNeedSendResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isDelayedPaymentNeedSendResponse");
    private static final javax.xml.namespace.QName ns1_isDelayedPaymentNeedSendResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isDelayedPaymentNeedSendResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isDelayedPaymentNeedSend_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_needTwoPhaseTransaction_needTwoPhaseTransaction_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "needTwoPhaseTransaction");
    private static final javax.xml.namespace.QName ns1_needTwoPhaseTransaction_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "needTwoPhaseTransaction");
    private CombinedSerializer ns1_myGateInfoService_PortType_needTwoPhaseTransaction_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_needTwoPhaseTransaction_needTwoPhaseTransactionResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "needTwoPhaseTransactionResponse");
    private static final javax.xml.namespace.QName ns1_needTwoPhaseTransactionResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "needTwoPhaseTransactionResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isOfficesHierarchySupported_isOfficesHierarchySupported_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isOfficesHierarchySupported");
    private static final javax.xml.namespace.QName ns1_isOfficesHierarchySupported_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isOfficesHierarchySupported");
    private CombinedSerializer ns1_myGateInfoService_PortType_isOfficesHierarchySupported_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isOfficesHierarchySupported_isOfficesHierarchySupportedResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isOfficesHierarchySupportedResponse");
    private static final javax.xml.namespace.QName ns1_isOfficesHierarchySupportedResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isOfficesHierarchySupportedResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isOfficesHierarchySupported_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isPaymentCommissionAvailable_isPaymentCommissionAvailable_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentCommissionAvailable");
    private static final javax.xml.namespace.QName ns1_isPaymentCommissionAvailable_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentCommissionAvailable");
    private CombinedSerializer ns1_myGateInfoService_PortType_isPaymentCommissionAvailable_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isPaymentCommissionAvailable_isPaymentCommissionAvailableResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentCommissionAvailableResponse");
    private static final javax.xml.namespace.QName ns1_isPaymentCommissionAvailableResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentCommissionAvailableResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isPaymentCommissionAvailable_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isClientImportEnable_isClientImportEnable_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isClientImportEnable");
    private static final javax.xml.namespace.QName ns1_isClientImportEnable_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isClientImportEnable");
    private CombinedSerializer ns1_myGateInfoService_PortType_isClientImportEnable_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isClientImportEnable_isClientImportEnableResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isClientImportEnableResponse");
    private static final javax.xml.namespace.QName ns1_isClientImportEnableResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isClientImportEnableResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isClientImportEnable_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isCurrencyRateAvailable_isCurrencyRateAvailable_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isCurrencyRateAvailable");
    private static final javax.xml.namespace.QName ns1_isCurrencyRateAvailable_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isCurrencyRateAvailable");
    private CombinedSerializer ns1_myGateInfoService_PortType_isCurrencyRateAvailable_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isCurrencyRateAvailable_isCurrencyRateAvailableResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isCurrencyRateAvailableResponse");
    private static final javax.xml.namespace.QName ns1_isCurrencyRateAvailableResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isCurrencyRateAvailableResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isCurrencyRateAvailable_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getAccountInputMode_getAccountInputMode_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getAccountInputMode");
    private static final javax.xml.namespace.QName ns1_getAccountInputMode_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getAccountInputMode");
    private CombinedSerializer ns1_myGateInfoService_PortType_getAccountInputMode_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getAccountInputMode_getAccountInputModeResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getAccountInputModeResponse");
    private static final javax.xml.namespace.QName ns1_getAccountInputModeResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getAccountInputModeResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_getAccountInputMode_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_needTwoPhaseTransaction2_needTwoPhaseTransaction2_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "needTwoPhaseTransaction2");
    private static final javax.xml.namespace.QName ns1_needTwoPhaseTransaction2_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "needTwoPhaseTransaction2");
    private CombinedSerializer ns1_myGateInfoService_PortType_needTwoPhaseTransaction2_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_needTwoPhaseTransaction2_needTwoPhaseTransaction2Response_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "needTwoPhaseTransaction2Response");
    private static final javax.xml.namespace.QName ns1_needTwoPhaseTransaction2Response_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "needTwoPhaseTransaction2Response");
    private CombinedSerializer ns1_myGateInfoService_PortType_needTwoPhaseTransaction_ResponseStruct1_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getConfiguration_getConfiguration_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getConfiguration");
    private static final javax.xml.namespace.QName ns1_getConfiguration_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getConfiguration");
    private CombinedSerializer ns1_myGateInfoService_PortType_getConfiguration_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getConfiguration_getConfigurationResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getConfigurationResponse");
    private static final javax.xml.namespace.QName ns1_getConfigurationResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getConfigurationResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_getConfiguration_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getUID_getUID_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getUID");
    private static final javax.xml.namespace.QName ns1_getUID_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getUID");
    private CombinedSerializer ns1_myGateInfoService_PortType_getUID_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_getUID_getUIDResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getUIDResponse");
    private static final javax.xml.namespace.QName ns1_getUIDResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "getUIDResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_getUID_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isNeedChargeOff_isNeedChargeOff_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isNeedChargeOff");
    private static final javax.xml.namespace.QName ns1_isNeedChargeOff_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isNeedChargeOff");
    private CombinedSerializer ns1_myGateInfoService_PortType_isNeedChargeOff_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isNeedChargeOff_isNeedChargeOffResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isNeedChargeOffResponse");
    private static final javax.xml.namespace.QName ns1_isNeedChargeOffResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isNeedChargeOffResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isNeedChargeOff_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isPaymentsRecallSupported_isPaymentsRecallSupported_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentsRecallSupported");
    private static final javax.xml.namespace.QName ns1_isPaymentsRecallSupported_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentsRecallSupported");
    private CombinedSerializer ns1_myGateInfoService_PortType_isPaymentsRecallSupported_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isPaymentsRecallSupported_isPaymentsRecallSupportedResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentsRecallSupportedResponse");
    private static final javax.xml.namespace.QName ns1_isPaymentsRecallSupportedResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentsRecallSupportedResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isPaymentsRecallSupported_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isNeedAgrementCancellation_isNeedAgrementCancellation_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isNeedAgrementCancellation");
    private static final javax.xml.namespace.QName ns1_isNeedAgrementCancellation_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isNeedAgrementCancellation");
    private CombinedSerializer ns1_myGateInfoService_PortType_isNeedAgrementCancellation_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isNeedAgrementCancellation_isNeedAgrementCancellationResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isNeedAgrementCancellationResponse");
    private static final javax.xml.namespace.QName ns1_isNeedAgrementCancellationResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isNeedAgrementCancellationResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isNeedAgrementCancellation_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isRegistrationEnable_isRegistrationEnable_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isRegistrationEnable");
    private static final javax.xml.namespace.QName ns1_isRegistrationEnable_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isRegistrationEnable");
    private CombinedSerializer ns1_myGateInfoService_PortType_isRegistrationEnable_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isRegistrationEnable_isRegistrationEnableResponse_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isRegistrationEnableResponse");
    private static final javax.xml.namespace.QName ns1_isRegistrationEnableResponse_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isRegistrationEnableResponse");
    private CombinedSerializer ns1_myGateInfoService_PortType_isRegistrationEnable_ResponseStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isPaymentCommissionAvailable2_isPaymentCommissionAvailable2_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentCommissionAvailable2");
    private static final javax.xml.namespace.QName ns1_isPaymentCommissionAvailable2_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentCommissionAvailable2");
    private CombinedSerializer ns1_myGateInfoService_PortType_isPaymentCommissionAvailable2_RequestStruct_SOAPSerializer;
    private static final javax.xml.namespace.QName ns1_isPaymentCommissionAvailable2_isPaymentCommissionAvailable2Response_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentCommissionAvailable2Response");
    private static final javax.xml.namespace.QName ns1_isPaymentCommissionAvailable2Response_TYPE_QNAME = new QName("http://generated.util.services.gate.web.phizic.rssl.com", "isPaymentCommissionAvailable2Response");
    private CombinedSerializer ns1_myGateInfoService_PortType_isPaymentCommissionAvailable2_ResponseStruct_SOAPSerializer;
    private static final java.lang.String[] myNamespace_declarations =
                                        new java.lang.String[] {
                                            "ns0", "http://generated.util.services.gate.web.phizic.rssl.com",
                                            "ns1", "http://java.sun.com/jax-rpc-ri/internal"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
